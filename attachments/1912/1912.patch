diff --git a/src/mpi/coll/helper_fns.c b/src/mpi/coll/helper_fns.c
index 12079beb..0ca8b7ad 100644
--- a/src/mpi/coll/helper_fns.c
+++ b/src/mpi/coll/helper_fns.c
@@ -259,8 +259,7 @@ int MPIC_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int t
     MPIU_ERR_CHKANDJUMP1((count < 0), mpi_errno, MPI_ERR_COUNT,
                          "**countneg", "**countneg %d", count);
 
-    if (*errflag && MPIR_PARAM_ENABLE_COLL_FT_RET)
-        MPIR_TAG_SET_ERROR_BIT(tag);
+    if (*errflag) MPIR_TAG_SET_ERROR_BIT(tag);
 
     MPID_Comm_get_ptr(comm, comm_ptr);
     context_id = (comm_ptr->comm_kind == MPID_INTRACOMM) ?
@@ -327,8 +326,6 @@ int MPIC_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag,
         MPID_Request_release(request_ptr);
     }
 
-    if (!MPIR_PARAM_ENABLE_COLL_FT_RET) goto fn_exit;
-
     if (source != MPI_PROC_NULL) {
         if (MPIR_TAG_CHECK_ERROR_BIT(status->MPI_TAG)) {
             *errflag = TRUE;
@@ -372,8 +369,7 @@ int MPIC_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int
     context_id = (comm_ptr->comm_kind == MPID_INTRACOMM) ?
         MPID_CONTEXT_INTRA_COLL : MPID_CONTEXT_INTER_COLL;
 
-    if (*errflag && MPIR_PARAM_ENABLE_COLL_FT_RET)
-        MPIR_TAG_SET_ERROR_BIT(tag);
+    if (*errflag) MPIR_TAG_SET_ERROR_BIT(tag);
 
     mpi_errno = MPID_Ssend(buf, count, datatype, dest, tag, comm_ptr,
                            context_id, &request_ptr);
@@ -423,10 +419,8 @@ int MPIC_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
     context_id = (comm_ptr->comm_kind == MPID_INTRACOMM) ?
         MPID_CONTEXT_INTRA_COLL : MPID_CONTEXT_INTER_COLL;
 
-    if (MPIR_PARAM_ENABLE_COLL_FT_RET) {
-        if (status == MPI_STATUS_IGNORE) status = &mystatus;
-        if (*errflag) MPIR_TAG_SET_ERROR_BIT(sendtag);
-    }
+    if (status == MPI_STATUS_IGNORE) status = &mystatus;
+    if (*errflag) MPIR_TAG_SET_ERROR_BIT(sendtag);
 
     mpi_errno = MPID_Irecv(recvbuf, recvcount, recvtype, source, recvtag,
                            comm_ptr, context_id, &recv_req_ptr);
@@ -446,8 +440,6 @@ int MPIC_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
     MPID_Request_release(send_req_ptr);
     MPID_Request_release(recv_req_ptr);
 
-    if (!MPIR_PARAM_ENABLE_COLL_FT_RET) goto fn_exit;
-
     if (source != MPI_PROC_NULL) {
         if (MPIR_TAG_CHECK_ERROR_BIT(status->MPI_TAG)) {
             *errflag = TRUE;
@@ -501,10 +493,8 @@ int MPIC_Sendrecv_replace(void *buf, int count, MPI_Datatype datatype,
     MPIU_ERR_CHKANDJUMP1((count < 0), mpi_errno, MPI_ERR_COUNT,
                          "**countneg", "**countneg %d", count);
 
-    if (MPIR_PARAM_ENABLE_COLL_FT_RET) {
-        if (status == MPI_STATUS_IGNORE) status = &mystatus;
-        if (*errflag) MPIR_TAG_SET_ERROR_BIT(sendtag);
-    }
+    if (status == MPI_STATUS_IGNORE) status = &mystatus;
+    if (*errflag) MPIR_TAG_SET_ERROR_BIT(sendtag);
 
     MPID_Comm_get_ptr(comm, comm_ptr);
     context_id_offset = (comm_ptr->comm_kind == MPID_INTRACOMM) ?
@@ -562,7 +552,6 @@ int MPIC_Sendrecv_replace(void *buf, int count, MPI_Datatype datatype,
     MPID_Request_release(sreq);
     MPID_Request_release(rreq);
 
-    if (!MPIR_PARAM_ENABLE_COLL_FT_RET) goto fn_exit;
     if (mpi_errno) MPIU_ERR_POP(mpi_errno);
     
     if (source != MPI_PROC_NULL) {
@@ -603,8 +592,7 @@ int MPIC_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int
     MPIU_ERR_CHKANDJUMP1((count < 0), mpi_errno, MPI_ERR_COUNT,
                          "**countneg", "**countneg %d", count);
 
-    if (*errflag && MPIR_PARAM_ENABLE_COLL_FT_RET)
-        MPIR_TAG_SET_ERROR_BIT(tag);
+    if (*errflag) MPIR_TAG_SET_ERROR_BIT(tag);
 
     MPID_Comm_get_ptr(comm, comm_ptr);
     context_id = (comm_ptr->comm_kind == MPID_INTRACOMM) ?
@@ -684,8 +672,7 @@ int MPIC_Waitall(int numreq, MPI_Request requests[], MPI_Status statuses[], int
     mpi_errno = MPIR_Waitall_impl(numreq, requests, statuses);
     if (mpi_errno) MPIU_ERR_POP(mpi_errno);
 
-    if (*errflag || !MPIR_PARAM_ENABLE_COLL_FT_RET)
-        goto fn_exit;
+    if (*errflag) goto fn_exit;
 
     for (i = 0; i < numreq; ++i) {
         if (MPIR_TAG_CHECK_ERROR_BIT(statuses[i].MPI_TAG)) {
diff --git a/src/util/param/params.yml b/src/util/param/params.yml
index 7d378c7a..4c85a784 100644
--- a/src/util/param/params.yml
+++ b/src/util/param/params.yml
@@ -312,21 +312,6 @@ parameters:
         (currently compile-time disabled by "#if 0")
 
   ##############################################################
-    # fault-tolerance parameters
-    - category    : fault_tolerance
-      name        : ENABLE_COLL_FT_RET
-      type        : boolean
-      default     : true
-      class       : device
-      description : >-
-        DEPRECATED! Will be removed in MPICH-3.2
-        Collectives called on a communicator with a failed process
-        should not hang, however the result of the operation may be
-        invalid even though the function returns MPI_SUCCESS.  This
-        option enables an experimental feature that will return an error
-        if the result of the collective is invalid.
-
-  ##############################################################
     # memory parameters
     - category    : memory
       name        : ABORT_ON_LEAKED_HANDLES
