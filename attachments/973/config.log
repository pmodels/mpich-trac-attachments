This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by configure, which was
generated by GNU Autoconf 2.63.  Invocation command line was

  $ ./configure --prefix=/gpfs/small/STED/shared/mpich2/pwr5 OBJECT_MODE=64 CC=xlc CXX=xlc++ FC=xlf F90=xlf90 CFLAGS=-q64 CXXFLAGS=-q64 FFLAGS=-q64 F90FLAGS=-q64 AR=ar -X64

## --------- ##
## Platform. ##
## --------- ##

hostname = pls01.ccni.rpi.edu
uname -m = 00C8193F4C00
uname -r = 3
uname -s = AIX
uname -v = 5

/usr/bin/uname -p = powerpc
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = 5.3.0.0
/bin/universe          = unknown

PATH: /gpfs/small/STED/shared/mpich2/pwr5/bin
PATH: ./
PATH: .
PATH: /gpfs/small/STED/shared/python/pwr5/bin
PATH: /gpfs/small/STED/home/STEDsuny/bin
PATH: /usr/bin
PATH: /etc
PATH: /usr/sbin
PATH: /usr/ucb
PATH: /usr/bin/X11
PATH: /sbin
PATH: /usr/java14/jre/bin
PATH: /usr/java14/bin
PATH: /usr/vacpp/bin/
PATH: /usr/lpp/LoadL/full/bin/
PATH: /opt/slurm/bin/
PATH: /gpfs/small/STED/home/STEDsuny/bin


## ----------- ##
## Core tests. ##
## ----------- ##

configure:4145: checking for gcc
configure:4172: result: xlc
configure:4404: checking for C compiler version
configure:4412: xlc --version >&5
xlc: 1501-216 command option --version is not recognized - passed to ld



  xlc(1)                 IBM (October 2005)                  xlc(1)



  NAME
         xlc, cc, c89, c99 and related commands - invoke the IBM XL
         C compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

         The invocation commands are:
         xlc, cc, c89, c99, xlc128, cc128, c89_128, c99_128,
         optionally followed by _r, _r4, or _r7.

  DESCRIPTION
         xlc and related commands compile C source files.  They
         also process assembler source files and object files. The
         compiler calls the link editor to produce a single
         executable or shared library, unless you specify the
         compiler options that prevent object files from being
         linked.

         The input file may have any of the following suffixes:
          .c = C source file
          .i = preprocessed C source file
          .a = archive file
          .o = object file for ld command
          .s = assembler source file
          .S = assembler source file that needs preprocessing

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -C     Preserves comments in preprocessed output if used
                with -E or -P. With the -E option, comments are
                written to standard output; with the -P option,
                comments are written to an output file.

         -D<name>[=[<def>]]
                Defines <name> as in the #define directive. <def>
                is an optional definition or value assigned to
                <name>. Specifying "-D<name>=" (with no <def>) is
                equivalent to "#define <name>"; specifying "-
                D<name>" is equivalent to "#define <name> 1".

         -I<dir>
                Specifies an additional search path for include
                filenames that do not specify an absolute path.

         -U<name>
                Undefines the identifier <name> defined by the
                compiler or by the -D<name> option.

         -qaltivec | -qnoaltivec
                Enables compiler support for vector data types.
                Instructs the compiler to support vector data types
                and operators and is accepted when the architecture
                specified by -qarch option supports VMX
                instructions and -qenablevmx is in effect.  The
                default is -qnoaltivec.

         -qasm[=gcc] | -qnoasm[=gcc]
                Controls the interpretation of, and subsequent
                generation of code for, asm statements.  If 'gcc'
                is specified, the compiler will interpret asm
                statements using gcc syntax.

                The default is -qasm=gcc.

         -qcpluscmt | -qnocpluscmt
                Permits the usage of "//" to introduce a comment
                that lasts until the end of the current source
                line, as in C++.  The default is -qcpluscmt when
                you invoke the compiler with xlc, xlc_r, cc, or
                cc_r, or when -qlanglvl is set to stdc99 or extc99.
                Otherwise, the default setting is -qnocpluscmt.

         -qdbcs | -qnodbcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qmbcs.  The default is -qnodbcs.

         -qdigraph | -qnodigraph
                Allows usage of digraph key combinations or
                keywords to represent characters not found on some
                keyboards.
                The default is -qdigraph when -qlanglvl is extc89,
                extended, extc99 or stdc99. Otherwise the default
                is -qnodigraph.

         -qdollar | -qnodollar
                Allows the '$' symbol to be used in the names of
                identifiers. When -qdollar is in effect, the dollar
                symbol '$' in an identifier is treated as a base
                character. If the options -qnodollar and
                -qlanglvl=ucs are both in effect, the dollar symbol
                is treated as an extended character.  The default
                is -qnodollar.

         -qidirfirst | -qnoidirfirst
                Specifies the search order for files included with
                the #include "<filename>" directive.  Use
                -qidirfirst with the -I option.  If -qidirfirst is
                specified, the directories specified by the
                -I<directory> option are searched before the
                directory in which the current file resides.  The
                default is -qnoidirfirst.

         -qignprag=<option>
                Instructs the compiler to ignore certain pragma
                statements.  The options are:

                disjoint
                     Ignores all #pragma disjoint directives in the
                     source file.
                isolated
                     Ignores all #pragma isolated_call directives
                     in the source file.
                all
                     Ignores all #pragma isolated_call directives
                     and #pragma disjoint directives in the source
                     file.
                omp
                     Ignores all OpenMP parallel processing
                     directives in the source file.
                ibm
                     Ignores IBM parallel processing directives.

         -qkeyword=<keyword> | -qnokeyword=<keyword>
                Controls whether the specified name is treated as a
                keyword or as an identifier whenever it appears in
                a program source.  By default all the built-in
                keywords defined in the C language standards are
                reserved as keywords. However, you can use
                -qnokeyword=<keyword> to disable built-in keywords,
                and use -qkeyword=<keyword> to reinstate those
                keywords.

         -qlanglvl=<suboptions_list>
                Selects the language level and language options for
                the compilation. <suboptions_list> is a colon-
                separated list of suboptions.  The suboptions are:

                classic
                     Allows the compilation of non-stdc89 programs,
                     and conforms closely to the K&R level
                     preprocessor.
                extended
                     Provides compatibility with the RT compiler
                     and classic. This language level is based on
                     C89.
                saa
                     Compilation conforms to the current SAA(R) C
                     CPI language definition. This is currently SAA
                     C Level 2.
                saal2
                     Compilation conforms to the SAA C Level 2 CPI
                     language definition, with some exceptions.
                stdc89
                     Compilation conforms to the ANSI C89 standard,
                     also known as ISO C90.
                stdc99
                     Compilation conforms to the ISO C99 standard.
                extc89
                     Compilation conforms to the ANSI C89 standard,
                     and accepts implementation-specific language
                     extensions.
                extc99
                     Compilation conforms to the ISO C99 standard,
                     and accepts implementation-specific language
                     extensions.
                ucs | noucs
                     This option controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in program
                     source code.  Under language levels stdc99 and
                     extc99, the default is -qlanglvl=ucs.


                The default depends on the invocation command used:

                COMMAND         DEFAULT
                xlc             extc89
                cc              extended
                c89             stdc89
                c99             stdc99

         -qmacpstr | -qnomacpstr
                Converts Pascal string literals into null-
                terminated strings where the first byte contains
                the length of the string.  The default is
                -qnomacpstr.

         -qmbcs | -qnombcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qdbcs.  The default is -qnombcs.

         -qpascal | -qnopascal
                Specifies whether to recognize and accept the
                keyword 'pascal' in type specifiers and function
                declarations.  The default is -qnopascal.

         -qsourcetype=<type>
                Determines whether to treat all recognized source
                files as if they are of the source type specified
                by <type> (regardless of filename suffix), or
                whether to use the filename suffix to determine the
                programming language. The options are:

                default
                     The compiler assumes that the programming
                     language of a source file will be implied by
                     its filename suffix.
                c
                     The compiler compiles all source files
                     following this option as if they are C
                     language source files.
                c++
                     The compiler compiles all source files
                     following this option as if they are C++
                     language source files.
                assembler
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files.
                assembler-with-cpp
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files that need preprocessing.

                The default is -qsourcetype=default.

         -qstdinc | -qnostdinc
                Specifies which directories are used for files
                included by the #include <file_name> and #include
                "file_name" directives. The -qnostdinc option
                excludes the standard include directories from the
                search path.  The default is -qstdinc.

         -qsyntaxonly
                Performs syntax checking without generating an
                object file.

         -qtrigraph | -qnotrigraph
                Allows trigraph key combinations to represent
                characters not found on some keyboards.
                The default is qtrigraph, however if
                -qlanglvl=classic is in effect or implied, the
                trigraphs are not recognized by default.

         -qutf | -qnoutf
                Enables recognition of UTF literal syntax.  The
                default is -qnoutf.

  Output Control Options
         -#     Traces the compilation and generates information on
                the progress of the compilation without invoking
                the preprocessor, compiler, or linkage editor.

         -c     Instructs the compiler to pass source files to the
                compiler only. Compiled source files are not sent
                to the linkage editor.

         -E     Instructs the compiler to preprocess the source
                files and send preprocessed source to standard
                output.

         -M     Creates an output file that contains information to
                be included in a "make" description file. This is
                equivalent to specifying -qmakedep without a
                suboption.

         -MF<file>
                Specifies the target for the output generated by
                the -qmakedep or -M options, where <file> is the
                target output filepath. Note that "-MF <file>"
                (with a space before the argument) is also
                acceptable. This option only has effect when
                specified with -qmakedep or -M.

         -ma    Substitutes inline code for calls to function
                alloca.

         -o <filespec>
                Specifies an output location for the object,
                assembler, or executable files created by the
                compiler. When the -o option is used during
                compiler invocation, <filespec> can be the name of
                either a file or a directory.  The default name is
                a.out.

         -P     Preprocesses the C source files named in the
                compiler invocation and creates an output
                preprocessed source file, <filename.i> for each
                input source file.  The default is to compile and
                link-edit C source files to produce an executable
                file.

         -S     Generates an assembler language file (.s) for each
                source file. The resulting .s files can be
                assembled to produce object .o files or an
                executable file (a.out).

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -q32,-q64
                Selects either 32-bit or 64-bit compilation mode.
                Use the -q32 and -q64 options, along with the
                -qarch and -qtune compiler options, to optimize the
                output of the compiler to the architecture on which
                that output will be used. The default is -q32.

         -qalign=<option>
                Specifies what aggregate alignment rules the
                compiler uses for file compilation, where the
                alignment options are:

                bit_packed
                     The compiler uses the bit_packed alignment
                     rules.
                full
                     The compiler uses the RISC System/6000
                     alignment rules. This is the same as power.
                mac68k
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.
                natural
                     The compiler maps structure members to their
                     natural boundaries.
                packed
                     The compiler uses the packed alignment rules.
                power
                     The compiler uses the RISC System/6000
                     alignment rules.
                twobyte
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.  The mac68k option is the
                     same as twobyte.

                The default is -qalign=full.

         -qalloca
                Substitutes inline code for calls to function
                alloca, as if #pragma alloca directives were in the
                source code.

         -qbitfields={signed|unsigned}
                Specifies whether bit fields will be signed or
                unsigned.  The default is -qbitfields=unsigned.

         -qchars={signed|unsigned}
                Specifies whether the data type char will be signed
                or unsigned.  The default is -qchars=unsigned.

         -qenablevmx | -qnoenablevmx
                Enables generation of VMX (Vector Multimedia
                Extension) instructions.  The default is
                -qnoenablevmx.

         -qenum=<option>
                Specifies the amount of storage occupied by
                enumerations, where <option> is:

                small
                     Specifies that enumerations occupy the
                     smallest amount of space (1, 2, 4, or 8 bytes)
                     that can accurately represent the range of
                     values in the enumeration.  Signage is
                     unsigned, unless the range of values includes
                     negative values.
                int
                     Specifies that enumerations occupy 4 bytes and
                     are represented by int.
                intlong
                     Specifies that enumerations occupy 8 bytes of
                     storage if the range of values in the
                     enumeration exceeds the limit for int.
                     Otherwise, the enumerations occupy 4 bytes of
                     storage and are represented by int.
                1
                     Specifies that enumerations occupy 1 byte.
                     Type is signed or unsigned char.
                2
                     Specifies that enumerations occupy 2 bytes.
                     Type is signed or unsigned short.
                4
                     Specifies that enumerations occupy 4 bytes.
                     Type is signed or unsigned int.
                8
                     Specifies that enumerations occupy 8 bytes.
                     Type is signed or unsigned long long in 32-bit
                     mode, and signed or unsigned long in 64-bit
                     mode.

         -qfuncsect | -qnofuncsect
                Places instructions for each function in a separate
                object file control section or csect.  The default
                is -qfuncsect.

         -qmakedep[=gcc]
                Creates an output file that contains targets
                suitable for inclusion in a description file for
                the make command that describes the dependencies of
                the main source file in the compilation.
                Specifying 'gcc' changes the format of the
                generated dependency file. Specifying -qmakedep
                without 'gcc' is equivalent to specifying -M.

         -qpic[={small|large}]
                Instructs the compiler to generate position-
                independent code suitable for use in shared
                libraries.

                small
                     Instructs the compiler to assume that the size
                     of the global offset table is no larger than
                     64 Kb.
                large
                     Allows the global offset table to be larger
                     than 64 Kb in size, allowing more addresses to
                     be stored in the table.

                The -qpic option is implied if either of the -G or
                -qmkshrobj compiler options is specified.  The
                default is -qpic=small.

         -qppline | -qnoppline
                Enables generation of #line directive in the
                preprocessed output.  If the -P option is enabled,
                the default is -qnoppline. Otherwise, the default
                is -qppline.

         -qreserved_reg=<registers_list>
                Indicates that the specified register(s) cannot be
                used during the compilation, except as a stack
                pointer, frame pointer or in a different fixed
                role. <registers_list> is a colon-separated list of
                registers. You should use this option in modules
                that are required to work with other modules that
                use global register variables or hand-written
                assembler code.

         -qro | -qnoro
                Specifies the storage type for string literals and
                puts string literals in read-only storage.  The
                default with cc and its derivatives is -qnoro,
                otherwise the default is -qro.

         -qroconst | -qnoroconst
                Specifies the storage location for constant values.
                Puts constant values in read-only storage.  The
                default with xlc and c89 compiler invocations is
                -qroconst, and the default with cc is -qnoroconst.

         -qroptr | -qnoroptr
                Specifies the storage location for constant
                pointers. This options requires AIX V5.2 or
                greater.  The default is -qnoroptr.

         -qsaveopt | -qnosaveopt
                Saves command line options in the corresponding
                object files.  The default is -qnosaveopt.

         -qstatsym | -qnostatsym
                Adds user-defined, non-external names that have a
                persistent storage class (such as initialized and
                uninitialized static variables) to the name list.
                The default is -qnostatsym.

         -qthreaded | -qnothreaded
                Ensures that all optimizations will be thread-safe
                for executing in a multi-threaded environment.  The
                default is -qthreaded when compiling invocation
                commands ending in "_r", and -qnothreaded
                otherwise.

         -qupconv | -qnoupconv
                Preserves the unsigned specification when
                performing integral promotions.  The default is
                -qupconv when -qlanglvl=extc89, and -qnoupconv
                otherwise.

         -qweaksymbol | -qnoweaksymbol
                Instructs the compiler to generate weak symbols.
                The default is -qnoweaksymbol on AIX 5.1, and
                -qweaksymbol on AIX 5.2 and higher.

         -qxcall | -qnoxcall
                Generates code to treat static functions within a
                compilation unit as if they were external
                functions.  The default is -qnoxcall.

  Optimization Options
         -O[<level>]
                Optimizes code at a choice of levels during
                compilation. This is equivalent to
                -qoptimize[=<level>]. <level> can be:

                0
                     Performs only quick local optimizations such
                     as constant folding and elimination of local
                     common subexpressions.
                2
                     Performs optimizations that the compiler
                     developers considered the best combination for
                     compilation speed and runtime performance. The
                     optimizations may change from product release
                     to release.
                3
                     Performs some memory and compile-time
                     intensive optimizations in addition to those
                     executed with -O2.  The -O3 specific
                     optimizations have the potential to alter the
                     semantics of a program.  The compiler guards
                     against these optimizations at -O2 and the
                     option -qstrict is provided at -O3 to turn off
                     these aggressive optimizations. Specifying -O3
                     will set -qhot=level=0.
                4
                     This option is the same as -O3, but also:
                     - Sets the -qarch and -qtune options to the
                     architecture of the compiling machine.
                     - Sets the -qcache option most appropriate to
                     the characteristics of the compiling machine.
                     - Sets the -qipa option.
                     - Sets the -qhot option to level=1.
                5
                     Equivalent to -O4 -qipa=level=2.

                The default is -O0. Specifying -O with no <level>
                is equivalent to specifying -O2.

         -Q[<suboption>]
                Specifies which specific functions the compiler
                should attempt to inline.

                This option can take the form:

                     -Q
                          Attempts to inline all appropriate
                          functions with 20 executable source
                          statements or fewer, subject to the
                          setting of any of the suboptions to the
                          -Q option. If -Q is specified last, all
                          functions are inlined.
                     -Q!
                          Does not inline any functions. If -Q! is
                          specified last, no functions are inlined.
                     -Q-<names_list>
                          Does not inline functions listed in
                          <names_list>, where <names_list> is a
                          colon-separated list. All other
                          appropriate functions are inlined. The
                          option implies -Q.
                     -Q+<names_list>
                          Attempts to inline the functions listed
                          in <names_list> and any other appropriate
                          functions. <names_list> is a colon-
                          separated list.  The option implies -Q.
                     -Q=<threshold>
                          Sets a size limit on the functions to be
                          inlined. The number of executable
                          statements must be less than or equal to
                          <threshold> for the function to be
                          inlined. <threshold> must be a positive
                          integer. The default value is 20.
                          Specifying a threshold value of 0 causes
                          no functions to be inlined except those
                          functions marked with the __inline,
                          _Inline, or _inline keywords.

                The default is to treat inline specifications as a
                hint to the compiler.

         -qaggrcopy={overlap|nooverlap}
                Enables destructive copy operations for structures
                and unions.  The default is -qaggrcopy=overlap when
                compiling to the EXTENDED and CLASSIC language
                levels, and -qaggrcopy=nooverlap otherwise.

         -qalias=<options_list>
                Specifies the aliasing assertions to be applied to
                your compilation unit. <options_list> is a colon-
                separated list of the following options:

                addrtaken | noaddrtaken
                     Variables are disjoint from pointers unless
                     their address is taken.
                allptrs | noallptrs
                     If noallptrs is specified, pointers are never
                     aliased.
                ansi | noansi
                     If ansi is specified, type-based aliasing is
                     used during optimization, which restricts the
                     lvalues that can be safely used to access a
                     data object. The default is ansi for the xlc
                     and c89 command and noansi for the cc
                     invocation commands.  This option has no
                     effect unless you also specify the -O option.
                typeptr | notypeptr
                     If notypeptr is specified, pointers to
                     different types are never aliased.

                The default is
                -qalias=noaddrtaken:noallptrs:typeptr:ansi.

         -qansialias | -qnoansialias
                This option is obsolete. Use -qalias=ansi in your
                new applications. See the -qalias=ansi suboption.
                The default is -qansialias with xlc, c99, and c89,
                and -qnoansialias with cc.

         -qarch=<option>
                Specifies the general processor architecture for
                which the code (instructions) should be generated.
                In general, the -qarch option allows you to target
                a specific architecture for the compilation. For
                any given -qarch setting, the compiler defaults to
                a specific, matching -qtune setting, which can
                provide additional performance improvements.  The
                suboptions are:

                auto
                     Generates instructions that will run on the
                     hardware platform on which the program is
                     compiled.
                com
                     In 32-bit mode, generates instructions that
                     will run on all the POWER and PowerPC hardware
                     platforms.  In 64-bit mode, these instructions
                     will run on 64-bit PowerPC processors but not
                     on 32-bit PowerPC processors.  This is the
                     default unless -q64, -O4, or -O5 are
                     specified.
                pwr
                     Generates instructions that will run on the
                     POWER, POWER2, and 601 hardware platforms.
                pwr2
                     Generates instructions that will run on the
                     POWER2 hardware platform.
                pwr3
                     Generates instructions that will run on a
                     POWER3, POWER4, POWER5, and POWERPC970 chip.
                pwr4
                     Generates instructions that will run on a
                     POWER4, POWER5, and POWERPC970 chip.
                pwr5
                     Generates object code containing instructions
                     that will run on the POWER5 hardware platform.
                pwr5x
                     Generates instructions that will run on any
                     POWER5+ hardware platform.
                ppc
                     In 32-bit mode, produces object code
                     containing instructions that will run on any
                     of the 32-bit PowerPC hardware platforms. This
                     suboption will cause the compiler to produce
                     single-precision instructions to be used with
                     single-precision data.  Specifying -qarch=ppc
                     together with -q64 quietly upgrades the -qarch
                     setting to -qarch=ppc64.
                ppcgr
                     In 32-bit mode, produces object code for
                     PowerPC processors that support optional
                     graphics instructions. Note that specifying
                     -q64 with -qarch=ppcgr will quietly upgrade
                     the -qarch setting to -qarch=ppc64gr.
                ppc64
                     Generates instructions that will run on any of
                     the 64-bit PowerPC hardware platform.
                ppc64v
                     Generates instructions for the 64-bit PowerPC
                     processor with VMX.
                ppc970
                     Generates instructions that will run on the
                     PPC970 hardware platform.
                ppc64gr
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics instructions.
                ppc64grsq
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics and square root instructions.
                pwr2s
                     Generates instructions that will run on POWER2
                     Chip desktop implementations.
                p2sc
                     Generates instructions that will run on a
                     POWER2 Super Chip.
                601
                     Generates instructions that will run on a 601
                     chip.
                602
                     Generates instructions that will run on a 602
                     chip.
                603
                     Generates instructions that will run on a 603
                     chip.
                604
                     Generates instructions that will run on a 604
                     chip.
                403
                     Generates instructions that will run on a 403
                     chip.
                rs64a
                     Generates instructions that will run on a
                     rs64I chip.
                rs64b
                     Generates instructions that will run on a
                     RS64II chip.
                rs64c
                     Generates instructions that will run on a
                     RS64III chip.

         -qassert=<suboption> | -qnoassert
                This option is obsolete. Use -qalias in your new
                applications. This option specifies the aliasing
                assertion to be applied to your compilation unit.
                The suboptions are:

                typeptr
                     Pointers to different types are never aliased.
                allptrs
                     Pointers are never aliased.
                addrtaken
                     Variables are disjoint from pointers unless
                     their address are taken.

                The default is -qnoassert.

         -qcache=<suboptions_list>
                Describes the cache configuration for a specific
                target execution machine, where <suboptions_list>
                is a colon-separated list of one or more of the
                following suboptions:

                assoc=<number>
                     Specifies the set associativity of the cache,
                     where <number> is one of the following:
                          0    Direct-mapped cache
                          1    Fully associative cache
                          (number > 1)   n-way set associative
                          cache
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. This
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty, in CPU
                     cycles, resulting from a cache miss.
                level=<level>
                     Specifies the level of cache affected, where
                     level is one of the following:
                          1     Basic cache
                          2     Level-2 cache or, if there is no
                                level-2 cache, the table lookaside
                                buffer (TLB)
                          3     TLB
                          If a machine has more than one level of
                          cache, use a separate -qcache option.
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<cache_type>
                     The settings apply to the specified type of
                     cache, where <cache_type> is one of the
                     following:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The -qtune setting determines the optimal default
                -qcache settings for most typical compilations.

         -qcompact | -qnocompact
                Reduces code size where possible, at the expense of
                execution speed. Code size is reduced by inhibiting
                optimizations that replicate or expand code inline.
                This option takes effect only if -O2 or higher is
                also used.  The default is -qnocompact.

         -qdataimported[=<names_list>]
                Specifies which data items are imported. If no
                names are specified, all data items are assumed to
                be imported.  <names_list> is a colon-separated
                list of data items.

         -qdatalocal[=<names_list>]
                Specifying -qdatalocal=<names_list> marks the named
                variables as local, where <names_list> is a colon-
                separated list of identifiers. Specifying
                -qdatalocal with no variables instructs the
                compiler to assume that all variables are local.

         -qdirectstorage | -qnodirectstorage
                Informs the compiler that write-through-enabled or
                cache-inhibited storage may be referenced.  The
                default is -qnodirectstorage.

         -qfdpr | -qnofdpr
                Collects information about programs for use with
                the AIX fdpr (Feedback Directed Program
                Restructuring) performance-tuning utility.  The
                default is -qnofdpr.

         -qhot[=<suboption>] | -qnohot
                Specifies whether or not to perform high-order
                transformations during optimization. The suboptions
                are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value.  Otherwise, the
                     compiler will pad any arrays where it infers
                     that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. -qhot=level=1 will
                     be equivalent to -qhot and the compiler
                     options that imply -qhot also imply
                     -qhot=level=1 unless -qhot=level=0 is
                     explicitly specified. See the Compiler
                     Reference for more information.
                simd | nosimd
                     The compiler converts certain operations that
                     are performed in a loop on successive elements
                     of an array into a call to a VMX (Vector
                     Multimedia Extension) instruction. This
                     suboption has effect only when the effective
                     architecture supports VMX instructions and you
                     specify -qenablevmx.
                vector | novector
                     When specified with -qnostrict and -qignerrno,
                     or an optimization level of -O3 or higher, the
                     compiler converts certain operations that are
                     performed in a loop on successive elements of
                     an array (for example, square root, reciprocal
                     square root) into a call to a Mathematical
                     Acceleration Subsystem (MASS) library vector
                     routine. This call will calculate several
                     results at one time, which is faster than
                     calculating each result sequentially.

                The default is -qnohot.

         -qignerrno | -qnoignerrno
                Allows the compiler to perform optimizations that
                assume errno is not modified by system calls.  The
                default is -qnoignerrno.

         -qinline[<suboption>] | -qnoinline
                Specifies whether to attempt to inline functions
                instead of generating calls to a function. This
                option can take the following forms:

                -qinline
                     The compiler attempts to inline all
                     appropriate functions with 20 executable
                     source statements or fewer, subject to any
                     other settings of the suboptions to the
                     -qinline option.
                -qinline=threshold=<num>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <num> for the
                     function to be inlined. <num> must be a
                     positive integer.
                -qinline+<names_list>
                     Attempts to inline the functions listed in
                     <names_list> and any other appropriate
                     functions, where <names_list> is a colon-
                     separated list.
                -qinline-<names_list>
                     Specifies that functions listed in
                     <names_list> do not get inlined, where
                     <names_list> is a colon-separated list.
                -qnoinline
                     Does not inline any functions.

                The default is to treat inline specifications as a
                hint to the compiler, and the result depends on
                other options that you select:  If you specify the
                -g option (to generate debug information), inlining
                may be affected.

         -qipa[=<suboptions_list>] | -qnoipa
                Turns on or customizes a class of optimizations
                known as interprocedural analysis (IPA).  Regular
                expressions are supported when specifying procedure
                names for these suboptions:  cloneproc,
                nocloneproc, exits, inline, noinline, isolated,
                lowfreq, pure, safe, unknown. <suboptions_list> is
                a colon-separated list of one or more of the
                following suboptions:

                clonearch=<architecture_list> | noclonearch
                     Allows you to specify a group of architectures
                     in case you want to compile your application
                     for multiple architectures with a single
                     binary file. <architecture_list> is a comma-
                     separated list of one or more of the following
                     architectures: pwr4, pwr5, and ppc970. When
                     -qcompact is in effect, -qarch=clonearch is
                     disabled. This must be specified during link
                     time.  The default is -qipa=noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of functions that you wish to clone (or not
                     clone). Please note that this suboption has no
                     effect unless -qipa=clonearch=<arch> is
                     specified.
                exits=<procedure_names_list>
                     Specifies names of functions which represent
                     program exits.  <procedure_names_list> is a
                     comma-separated list of procedures.
                infrequentlabel=<names_list>
                     Specifies a comma-separated list of user-
                     defined labels that are likely to be called
                     infrequently during a program run.
                inline[=<suboption>]
                     Specifying 'inline' with no suboption asserts
                     that all appropriate procedures will be
                     inlined. <suboption> can be one of the
                     following:
                     auto | noauto
                          Specifies whether or not to automatically
                          inline procedures.
                     <procedure_names_list>
                          Specifies a comma-separated list of
                          procedures to attempt to inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This only takes
                          effect when inline=auto is on.
                     <options_list>
                          The same as specifying
                          -qinline=<options_list>. <options_list>
                          is a comma-separated list of any
                          suboptions that belong to the -qinline
                          compiler option.
                noinline=<procedures_list>
                     Specifies a comma-separated list of procedures
                     which are not to be inlined.
                isolated=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that do
                     not directly refer to any global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization performed, where <level> can be
                     equal to:
                     0
                          Performs minimal interprocedural analysis
                          and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full interprocedural data flow and alias
                          analysis.
                     The default is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, if an object listing has been
                     requested using the -qlist option. The default
                     name is "a.lst". Specifying 'long' or 'short'
                     can be used to request more or less
                     information in the listing file to determine
                     which listing sections will be included. The
                     default is 'short'.
                lowfreq=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are likely to be called infrequently
                     during the course of a typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the default assumption for
                     procedures not compiled with -qipa.
                     unknown
                          Greatly restricts the amount of
                          interprocedural optimization for calls to
                          unknown functions.
                     safe
                          Functions which do not indirectly call a
                          visible (not missing) function either
                          through direct call or function pointer.
                     isolated
                          Functions which do not directly reference
                          global variables accessible to visible
                          functions.
                     pure
                          Functions which are safe and isolated and
                          which do not indirectly alter storage
                          accessible to functions.
                object | noobject
                     This is a compile-time option. It specifies
                     whether to include standard object code in the
                     object files. Specifying 'noobject' can
                     substantially reduce overall compile time by
                     not generating object code during the first
                     IPA phase.
                partition={small|medium|large}
                     Specifies the size of program sections that
                     are analyzed together. Larger partitions may
                     produce better analysis but require more
                     storage.
                pdfname[=<filename>] | nopdfname
                     Specifies the name of the profile data file
                     containing the PDF profiling information.  If
                     you do not specify <filename>, the default
                     file name is ._pdf.
                pure=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that are
                     "isolated", "safe", and do not modify any data
                     objects that are visible to the caller.
                safe=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that do not call
                     any other part of the program.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that may
                     update global variables and dummy arguments
                     and call other parts of the program compiled
                     with -qipa.
                <filename>
                     Specifies the name of a file that contains
                     suboption information in a special format.

                The default is -qnoipa.

         -qisolated_call=<function_names_list>
                Specifies functions in the source file that have no
                side effects, where <function_names> is a colon-
                separated list of function names.

         -qlargepage | -qnolargepage
                Exploits large page heaps that are available on
                Power 4 and Power 5 systems running AIX v5.1D or
                later.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C library function are in fact the library
                functions.  The default is -qnolibansi.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 | -qnopdf1
                Produces an object that is instrumented to collect
                runtime execution information. This is phase 1 of
                the profile-directed feedback optimization process.
                The default is -qnopdf1.

         -qpdf2 | -qnopdf2
                Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.  The default is
                -qnopdf2.

         -qprefetch | -qnoprefetch
                Enables generation of prefetching instructions such
                as dcbt and dcbz in compiled code.  The default is
                -qprefetch.

         -qprocimported[=<names_list>] | -qnoprocimported
                If no <names_list> is specified, it asserts that
                all functions are imported. Otherwise, only the
                named functions are marked as imported.
                <names_list> is a colon-separated list of function
                identifiers.

         -qproclocal[=<names_list>] | -qnoproclocal
                If no <names_list> is specified, it asserts that
                all functions are local. Otherwise, only the named
                functions are marked as local. <names_list> is a
                colon-separated list of function identifiers.

         -qprocunknown[=<names_list>] | -qnoprocunknown
                If no <names_list> is specified, it asserts that
                all functions are unknown. Otherwise, only the
                named functions are marked as unknown. <names_list>
                is a colon-separated list of function identifiers.

         -qshowpdf | -qnoshowpdf
                Used with -qpdf1 and a minimum optimization level
                of -O to add additional call and block count
                profiling information to an executable.  The
                default is -qnoshowpdf.

         -qsmallstack | -qnosmallstack
                Reduces the size of the stack frame.  This option
                is only valid when used together with IPA (-qipa,
                -O4, -O5 compiler options).  The default is
                -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Enables parallelization of program code.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization and
                     optimization. If noauto is specified,
                     automatic parallelization of program code is
                     disabled; only program code explicitly
                     parallelized with IBM SMP or OpenMP directives
                     is optimized.
                explicit | noexplicit
                     Enables explicit parallelization of loops.
                nested_par | nonested_par
                     Enables parallelization of nested parallel
                     constructs.
                omp | noomp
                     Enables strict OpenMP compliance. Only OpenMP
                     parallelization pragmas are recognized.
                opt | noopt
                     Enables automatic parallelization but disables
                     optimization of parallelized program code. If
                     noopt is specified, optimization of
                     parallelized program code is disabled.
                rec_locks | norec_locks
                     Specifies whether to use recursive locks.
                schedule=<type>
                     Specifies what kinds of scheduling algorithms
                     and chunking are used for loops to which no
                     other scheduling algorithm has been explicitly
                     assigned in the source code. <type> can be:
                     dynamic[=<num>]
                     guided[=<num>]
                     static[=<num>]
                     affinity[=<num>]
                     runtime

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, explicit, noomp, norec_locks, nonested_par,
                schedule=runtime.

         -qspill=<size>
                Specifies the size of the register allocation spill
                area in bytes.  The default is -qspill=512.

         -qstrict | -qnostrict
                Turns off aggressive optimizations which have the
                potential to alter the semantics of your program.
                -qstrict sets -qfloat=nofltint:norsqrt. -qnostrict
                sets -qfloat=rsqrt. This option is only valid with
                -O2 or higher optimization levels. The default is
                -qnostrict at -O3 or higher, and -qstrict
                otherwise.

         -qstrict_induction | -qnostrict_induction
                Turns off loop induction variable optimizations
                that have the potential to alter the semantics of
                your program.  The default is -qnostrict_induction
                at -O2 or higher and -qstrict_induction otherwise.

         -qtocdata | -qnotocdata
                Marks data as local.  The default is -qnotocdata.

         -qtocmerge | -qnotocmerge
                Reads from the file specified in -bImportfile
                linker option and merges the address information to
                access ranges of external addresses using a single
                table of contents entry.  The default is
                -qnotocmerge.

         -qtune=<suboption>
                Specifies the architecture system for which the
                executable program is optimized.  The suboptions
                are:

                auto
                     Generates object code optimized for the
                     hardware platform on which the program is
                     compiled.
                403
                     Generates object code optimized for all the
                     PowerPC 403 processors.
                601
                     Generates object code optimized for all the
                     PowerPC 601 processors.
                602
                     Generates object code optimized for all the
                     PowerPC 602 processors.
                603
                     Generates object code optimized for all the
                     PowerPC 603 processors.
                604
                     Generates object code optimized for all the
                     PowerPC 604 processors.
                p2sc
                     Generates object code optimized for all the
                     PowerPC P2SC processors.
                ppc
                     Generates object code optimized for 32-bit
                     POWERPC hardware platform.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                pwr
                     Generates object code optimized for the POWER
                     hardware platforms.
                pwr2
                     Generates object code optimized for the POWER2
                     hardware platform.
                pwr2s
                     Generates object code optimized for the POWER2
                     hardware platform, avoiding certain
                     quadruple-precision instructions that would
                     slow program performance.
                pwr3
                     Generates object code optimized for the POWER3
                     processor.
                pwr4
                     Generates object code optimized for the POWER4
                     processor.
                pwr5
                     Generates object code optimized for the POWER5
                     hardware platforms.
                rs64I
                     Generates object code optimized for the rs64a
                     processor.
                rs64b
                     Generates object code optimized for the RS64II
                     processor.
                rs64c
                     Generates object code optimized for the
                     RS64III processor.

                The default setting is determined by the setting of
                -qarch.

         -qunroll[={yes|no|auto}] | -qnounroll
                Unrolls inner loops in the program. This can help
                improve program performance.  The options are:

                yes
                     Is a suggestion to the compiler to unroll
                     loops.
                no
                     Instructs the compiler not to unroll loops.
                auto
                     Leaves the decision to unroll loops to the
                     compiler.

                The default is -qunroll=auto.  If -qunroll is
                specified with no suboptions, the compiler assumes
                -qunroll=yes.

         -qunwind | -qnounwind
                Informs the compiler that the stack can be unwound
                while a routine in the compilation is active.
                Specifying -qnounwind can improve the optimization
                of non-volatile register saves and restores.  The
                default is -qunwind.

         -qvecnvol | -qnovecnvol
                Specifies whether to use volatile or non-volatile
                vector registers. Volatile vector registers are
                registers whose value is not preserved across
                function calls or in the context of save, jump or
                switch system library functions. If -qnoenablevmx
                is in effect, this option is ignored.  The default
                is -qnovecnvol.

  Error Checking and Debugging Options
         -g     Generates information for debugging tools such as
                the IBM Debugger for AIX, Version 3.1.

         -p     Sets up the object files produced by the compiler
                for profiling.

         -pg    Sets up the object files for profiling, but
                provides more information than is provided by the
                -p option.

         -qcheck[=<suboptions_list>] | -qnocheck
                Generates code that performs certain types of
                runtime checking. If a violation is encountered, a
                runtime exception is raised by sending a SIGTRAP
                signal to the process. <suboptions_list> is a
                colon-separated list of one or more of the
                following:

                bounds | nobounds
                     Performs runtime checking of addresses when
                     subscripting within an object of known size.
                divzero | nodivzero
                     Performs runtime checking of integer division.
                     A trap will occur if an attempt is made to
                     divide by zero.
                nullptr | nonullptr
                     Performs runtime checking of addresses
                     contained in pointer variables used to
                     reference storage.
                all
                     Switches on all the above suboptions.

                The default is -qnocheck.

         -qdbxextra | -qnodbxextra
                Specifies that all typedef declarations, struct,
                union, and enum type definitions are included for
                debugging.  Use this option with the -g option to
                produce additional debugging information for use
                with a debugger.  The default is -qnodbxextra.

         -qdpcl | -qnodpcl
                Generates symbols that can be used by tools based
                on the Dynamic Probe Class Library (DPCL) to see
                the structure of an executable file.  The default
                is -qnodpcl.

         -qextchk | -qnoextchk
                Generates bind-time type-checking information and
                checks for compile-time consistency.  The default
                is -qnoextchk.

         -qfullpath | -qnofullpath
                Specifies the path information stored for files
                when you use the -g compiler option.  The default
                is -qnofullpath.

         -qgenproto[=parmnames] | -qnogenproto
                Produces ANSI prototypes from K&R function
                definitions.  Specifying -qgenproto without
                '=parmnames' will cause prototypes to be generated
                without parameter names.  The default is
                -qnogenproto.

         -qheapdebug | -qnoheapdebug
                Enables debug versions of memory management
                functions.  The default is -qnoheapdebug.

         -qinitauto=<hex_value> | -qnoinitauto
                Initializes automatic variables to the two-digit
                hexadecimal byte value <hex_value>. This generates
                extra code and should only be used for error
                determination.  The default is -qnoinitauto.

         -qkeepparm | -qnokeepparm
                Ensures that function parameters are stored on the
                stack even if the application is optimized.  As a
                result, parameters remain in the expected memory
                location, providing access to the values of these
                incoming parameters to tools such as debuggers. The
                default is -qnokeepparm.

         -qlinedebug | -qnolinedebug
                Generates abbreviated line number and source file
                name information for the debugger.  The default is
                -qnolinedebug.

         -qmaxerr=<num>[:<sev>] | -qnomaxerr
                Instructs the compiler to halt compilation when the
                specified number of errors of the specified
                severity (by default, the value of -qhalt) or
                greater is reached.  <num> must be an integer. The
                severity levels, <sev>, are:

                i = informational
                w = warning
                e = error
                s = severe error

                The default is -qnomaxerr.

         -qproto | -qnoproto
                Assumes that all functions are prototyped.  Asserts
                that procedure call points agree with their
                declarations even if the procedure has not been
                prototyped. This allows the caller to pass
                floating-point arguments in floating-point
                registers instead of general-purpose registers.
                The default is -qnoproto.

         -qspnans | -qnospnans
                This option is obsolete. Use -qfloat=nans in your
                new applications. Generates extra instructions to
                detect signalling NaN on conversion from single
                precision to double precision. The -qnospnans
                option specifies that this conversion need not be
                detected. The default is -qnospnans.

         -qsymtab={unref|static}
                Determines what types of information appear in the
                symbol table.  The suboptions are:

                unref
                     Specifies that all typedef declarations,
                     struct, union, and enum type definitions are
                     included for processing by the debugger.
                static
                     Adds user-defined, non-external names that
                     have a persistent storage class (such as
                     initialized and uninitialized static
                     variables) to the name list.

                The default is to not add static variables to the
                symbol table.

         -qtbtable=<option>
                Generates a traceback table that contains
                information about each function, including the type
                of function as well as stack frame and register
                information. The traceback table is placed in the
                text segment at the end of its code.  The options
                are:

                none
                     No traceback table is generated.
                full
                     A full traceback table is generated.  This is
                     the default with -qnoopt or -g specified.
                small
                     A traceback table is generated with no name or
                     parameter information.  This is the default
                     with optimization if -g is not specified.

         -qwarn64 | -qnowarn64
                Enables checking for possible data conversion
                problems between 32-bit and 64-bit compiler modes.
                The default is -qnowarn64.

  Listing and Message Options
         -V     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a space-separated list.

         -v     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a comma-separated list.

         -w     Suppresses warnings and lower-level messages.
                Specifying this option is equivalent to specifying
                -qflag=e:e.

         -qattr[=full] | -qnoattr
                Produces a compiler listing that includes an
                attribute listing for all identifiers. If -qattr is
                specified, the listing contains only those
                identifiers that are used. If -qattr=full is
                specified, the listing contains all names. If
                -qnoattr is specified, no listing is produced.  The
                default is -qnoattr.

         -qdump_class_hierarchy
                for each class object, this option dumps a
                representation of its hierarchy and virtual
                function table layout to a file. The file name is
                created by appending ".class" to the source file
                name.

         -qflag=<listing_severity>:<terminal_severity>
                Defines the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> is the
                minimum level for the listing file, and
                <terminal_severity> is the minimum level for the
                terminal.  The message severity levels are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qflag=i:i.

         -qformat=<options_list> | -qnoformat
                Warns of possible problems with string input and
                output format specifications. Functions diagnosed
                are printf, scanf, strftime, strfmon family
                functions and functions marked with format
                attributes. <options_list> is a comma-separated
                list of one or more of the following suboptions:

                all | noall
                     Turns on all format diagnostic messages.
                exarg | noexarg
                     Warns if excess arguments appear in printf and
                     scanf style function calls.
                nlt | nonlt
                     Warns if a format string is not a string
                     literal, unless the format function takes its
                     format arguments as a va_list.
                sec | nosec
                     Warns of possible security problems in use of
                     format functions.
                y2k | noy2k
                     Warns of strftime formats that produce a 2-
                     digit year.
                zln | nozln
                     Warns of zero-length formats.

                The default is -qnoformat, which is equivalent to
                -qformat=noall. If -qformat is specified without
                any suboptions, the default is -qformat=all.

         -qhalt=<sev>
                Stops the compiler after the first phase if the
                severity level of errors detected equals or exceeds
                the specified level, <sev>.  The severity levels in
                increasing order of severity are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qhalt=s.

         -qinfo[=[<suboption>][<groups_list>]] | -qnoinfo
                Produces informational messages. <groups_list> is a
                colon-separated list. If a <groups_list> is
                specified along with a <suboption>, a colon must
                separate them. The suboptions are:

                all | noall
                     Turns on all diagnostic messages for all
                     groups.  Specifying 'noall' turns off all
                     diagnostic messages for specific portions of
                     your program.
                private
                     Lists shared variables that are made private
                     to a parallel loop.
                reduction
                     Lists variables that are recognized as
                     reduction variables inside a parallel loop.

                Also:
                <groups_list>
                     Turns on or off specific groups of messages,
                     where <groups_list> is a colon-separated list
                     of one or more of the following:

                     c99 | noc99
                          C code that might behave differently
                          between C89 and C99 language levels
                     cmp | nocmp
                          Possible redundancies in unsigned
                          comparisons
                     cnd | nocnd
                          Possible redundancies or problems in
                          conditional expressions
                     cns | nocns
                          Operations involving constants
                     cnv | nocnv
                          Conversions
                     dcl | nodcl
                          Consistency of declarations
                     eff | noeff
                          Statements and pragmas with no effect
                     enu | noenu
                          Consistency of enum variables
                     ext | noext
                          Unused external definitions
                     gen | nogen
                          General diagnostic messages
                     gnr | nognr
                          Generation of temporary variables
                     got | nogot
                          Use of goto statements
                     ini | noini
                          Possible problems with initialization
                     inl | noinl
                          Functions not inlined
                     lan | nolan
                          Language level effects
                     obs | noobs
                          Obsolete features
                     ord | noord
                          Unspecified order of evaluation
                     par | nopar
                          Unused parameters
                     por | nopor
                          Non-portable language constructs
                     ppc | noppc
                          Possible problems with using the
                          preprocessor
                     ppt | noppt
                          Trace of preprocessor actions
                     pro | nopro
                          Missing function prototypes
                     rea | norea
                          Code that cannot be reached
                     ret | noret
                          Consistency of return statements
                     trd | notrd
                          Possible truncation or loss of data or
                          precision
                     tru | notru
                          Variable names truncated by the compiler
                     trx | notrx
                          Rounding of hexadecimal floating-point
                          constants
                     uni | nouni
                          Uninitialized variables
                     upg | noupg
                          Upgrade issues from one release to the
                          next release
                     use | nouse
                          Unused auto and static variables
                     zea | nozea
                          Zero-extent arrays

                The default is -qnoinfo.
                If -qinfo is specified with no suboptions, the
                default is -qinfo=all.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                The default is -qnolist.

         -qlistopt | -qnolistopt
                Produces a compiler listing that displays all the
                options that were in effect when the compiler was
                invoked.  The default is -qnolistopt.

         -qphsinfo | -qnophsinfo
                Reports the time taken in each compilation phase.
                Phase information is sent to standard output.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qprint | -qnoprint
                Enables or suppresses listings. Specifying
                -qnoprint overrides all listing-producing options,
                regardless of where they are specified, to suppress
                listings.  The default is -qprint.

         -qreport | -qnoreport
                Instructs the compiler to produce transformation
                reports that show how program loops are
                parallelized and/or optimized. The transformation
                reports are included as part of the compiler
                listing.  This option requires either -qhot, -qsmp,
                or -qipa=clonearch in order to have effect.  The
                default is -qnoreport.

         -qshowinc[=<types_list>] | -qnoshowinc
                Used with -qsource to selectively show user header
                files (includes using " ") or system header files
                (includes using < >) in the program source listing.
                <types_list> is a colon-separated list of one or
                more of the following types:

                usr | nousr
                     Specifies whether to show user include files
                sys | nosys
                     Specifies whether to show system include files
                all
                     Shows both user and system include files

                The default is -qnoshowinc.

         -qsource | -qnosource
                Produces a compiler listing and includes source
                code.  The default is -qnosource.

         -qsrcmsg | -qnosrcmsg
                Adds the corresponding source code lines to the
                diagnostic messages in the stderr file.  The
                default is -qnosrcmsg.

         -qsuppress[=<msg_list>] | -qnosuppress
                Prevents the specified compiler or driver
                informational or warning messages from being
                displayed or added to the listings, where
                <msg_list> is a colon-separated list of message
                numbers that will not be displayed.  The default is
                -qnosuppress.

         -qtabsize=<size>
                Changes the length of tabs as perceived by the
                compiler, where <size> is the number of character
                spaces representing a tab in the source program.
                The default is -qtabsize=8.

         -qversion
                Displays information on the compiler version. It
                will output (to STDOUT) the official compiler
                product name and the compiler version found on the
                system. You can specify -qversion outside of a
                compilation (xlc -qversion) or as part of a
                compilation, but compilation will not occur.

         -qwarnfourcharconsts | -qnowarnfourcharconsts
                Issues diagnostic messages when the compiler finds
                four-character constants in the program source.
                The default is -qnowarnfourcharconsts.

         -qxref[=full] | -qnoxref
                Specifies whether to produce a compiler listing
                that includes a cross-reference listing of all
                identifiers. Specifying -qxref will report only
                identifiers that are used, -qxref=full reports all
                identifiers in the program, and -qnoxref does not
                report any identifiers in the program. The
                -qnoprint option overrides this option.  The
                default is -qnoxref.

  Compatibility Options
  Linking Options
         -b{dynamic|shared|static}
                Controls how shared objects are processed by the
                linkage editor.  The suboptions are:

                dynamic, shared
                     Causes the linker to process subsequent shared
                     objects in dynamic mode. This is the default.
                     In dynamic mode, shared objects are not
                     statically included in the output file.
                     Instead, the shared objects are listed in the
                     loader section of the output file.
                static
                     Causes the linker to process subsequent shared
                     objects in static mode. In static mode, shared
                     objects are statically linked in the output
                     file.

         -bmaxdata=<num>
                Sets the maximum size of the area shared by the
                static data (both initialized and uninitialized)
                and the heap to <num> bytes. This value is used by
                the system loader to set the soft ulimit. The
                default is -bmaxdata=0.

         -brtl  Enables runtime linking for the output file. Do not
                specify the -brtl compiler option if you are
                invoking the compiler with xlc_r4 or if the
                -qheapdebug compiler option is specified.

         -e <name>
                Sets the entry name for a shared executable.  This
                option is only used together with -qmkshrobj.

         -f<filename>
                Names a file to store a list of object files for
                the compiler to pass to the linker. The <filename>
                file should contain only the names of object files.
                There should be one object file per line.

         -G     Tells the linkage editor to create a shared object
                enabled for runtime linking.

         -L<dir>
                Searches the path directory for library files
                specified by the -l<key> option.  The default is to
                search only the standard directories.

         -l<key>
                Searches the file lib<key>.so and then lib<key>.a
                for dynamic linking, or only lib<key>.a for static
                linking. The default is to search only some of the
                compiler runtime libraries.

         -r     Produces a relocatable object. This permits the
                output file to be produced even though it contains
                unresolved symbols.

         -Z<prefix>
                This linker option specifies a prefix for the
                library search path. This is useful when developing
                a new version of a library.

         -qinlglue | -qnoinlglue
                Generates fast external linkage by inlining the
                pointer glue code necessary to make a call to an
                external function or a call through a function
                pointer.  The default is -qnoinlglue.

         -qmkshrobj
                Creates a shared object from the generated object
                files.  See the XL C Compiler Reference for more
                information.

  Compiler Customization Options
         -B[<prefix>]
                Determines substitute path names for programs used
                during compilation, such as the compiler,
                assembler, linkage editor, and preprocessor, where
                <prefix> can be any program name recognized by the
                -t compiler option. The optional <prefix> defines
                part of a path name to the new programs. The -t
                parameter, <program>, specifies the program to
                which the <prefix> is to be appended.  When
                specifying <prefix>, there must be a slash (/)
                after the folder name.

         -F[<config_file>][:<stanza>]
                Names an alternative configuration file (.cfg) for
                the compiler.  <config_file> is the name of a
                compiler configuration file.  <stanza> is the name
                of the command used to invoke the compiler. This
                directs the compiler to use the entries under
                <stanza> in the <config_file> to set up the
                compiler environment. At least one of the arguments
                must be supplied.

         -t<programs_list>
                Applies the prefix from the -B option to the
                specified programs in <programs_list>.
                <programs_list> is a chain (ie: -tbcI) of one or
                more of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -W<program>,<options_list>
                Gives the specified option(s) to the compiler
                program, <program>. <options_list> is a comma-
                separated list of one or more options. <program>
                can be one of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -qasm_as[='<asm_path> [<flags_list>]'] | -qnoasm_as
                Specifies the path and flags used to invoke the
                assembler in order to handle assembler code in an
                asm statement. <asm_path> is the full path to the
                assembler to be used, and <flags_list> is a series
                of one or more flags (and their arguments),
                separated by spaces. Please note that single quotes
                (or double quotes) are required around the string
                of arguments if any spaces exist.

         -qexpfile=<filename>
                Saves the exported symbols in the specified file.
                This option is used only together with the
                -qmkshrobj compiler option.  For more information,
                see -qmkshrobj.

         -qmaxmem=<num>
                Limits the amount of memory used by certain
                memory-intensive optimizations to <num> kilobytes.
                When <num> is -1, the optimizer will use as much
                memory as needed.  By default -qmaxmem=8192 when
                -O2 level optimization is in effect and -qmaxmem=-1
                when -O3 level or greater optimization is in
                effect.

         -qpath=<program>:<path>
                Constructs alternate program names for compiler
                components. The program and directory path
                specified are used in place of the regular program.
                <program> can be one of the following:

                a = assembler
                b = compiler backend
                c = compiler frontend
                I = interprocedural analysis - compile phase
                L = interprocedural analysis - link phase
                l = linkage editor
                p = compiler preprocessor

         -qtls[=<model>] | -qnotls
                Specifies the thread-local storage model to be used
                by the application, where <model> can be:

                global-dynamic
                initial-exec
                local-exec
                local-dynamic

                If the -qnopic compiler option is in effect, the
                default is initial_exec.  If the -qpic compiler
                option is in effect, the default is global_dynamic.

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies the compile-time rounding mode of
                constant floating-point expressions, where
                <rounding_mode> is one of the following:

                m = round toward minus infinity
                n = round to the nearest representable number
                p = round toward plus infinity
                z = round toward zero.

                The default is -yn.

         -qfloat=<suboptions_list>
                Specifies various floating-point suboptions. This
                provides different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following:

                emulate | noemulate
                     Emulates the floating-point instructions
                     omitted by the PowerPC 403(TM) processor.
                     Function calls are emitted in place of PowerPC
                     floating-point instructions.  Use this option
                     only in a single-threaded stand-alone
                     environment, targeting the PowerPC 403
                     processor.  Do not use -qfloat=emulate with
                     any of the following invocation commands:
                      * -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                      * -qlongdouble, -qldbl128
                      * xlc128
                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using faster inline code that
                     does not check for overflows. This suboption
                     must only be used with an optimization option.
                     -qfloat=nofltint checks floating-point-to-
                     integer conversions for out-of-range values.
                fold | nofold
                     Specifies that constant floating-point
                     expressions are to be evaluated at compile
                     time rather than at run time.
                hsflt | nohsflt
                     The hsflt option speeds up calculations by
                     truncating instead of rounding computed values
                     to single precision before storing and on
                     conversions from floating-point to integer.
                     The nohsflt suboption specifies that single-
                     precision expressions are rounded after
                     expression evaluation and that floating-
                     point-to-integer conversions are to be checked
                     for out-of-range values.
                hssngl | nohssngl
                     The hssngl option specifies that single-
                     precision expressions are rounded only when
                     the results are stored into float memory
                     locations. The nohssngl option specifies that
                     single-precision expressions are rounded after
                     expression evaluation. Using hssngl can
                     improve runtime performance and is safer than
                     using -qfloat=hsflt.
                maf | nomaf
                     Makes floating-point calculations faster and
                     more accurate by using floating-point
                     multiply-add instructions where appropriate.
                nans | nonans
                     Generates extra instructions to detect
                     signalling NaN when converting from single-
                     precision to double-precision at run time. The
                     option nonans specifies that this conversion
                     need not be detected.
                relax | norelax
                     Relaxes the strict IEEE-conformance slightly
                     for greater speed, typically by removing some
                     trivial, floating-point arithmetic operations,
                     such as adds and subtracts involving a zero on
                     the right.
                rndsngl | norndsngl
                     Specifies that the result of each single-
                     precision (float) operation is to be rounded
                     to single precision. -qfloat=norndsngl
                     specifies that rounding to single-precision
                     happens only after full expressions have been
                     evaluated.
                rrm | norrm
                     Prevents floating-point optimizations that are
                     incompatible with runtime rounding to plus and
                     minus infinity modes.
                rsqrt | norsqrt
                     Specifies whether a division by the result of
                     a square root can be replaced with a multiply
                     by the reciprocal of the square root.
                     -qfloat=rsqrt has no effect unless -qignerrno
                     and -qarch=pwr2 are also specified.
                spnans | nospnans
                     Detects signalling NaN on conversion from
                     single-precision to double-precision.

                The default suboptions are: nospnans, norsqrt (at
                -O2 optimization), rsqrt (at -O3 optimization),
                norrm, norndsngl, norelax, nonans, maf, nohssngl,
                nohsflt, fold, nofltint (at -O2 optimization),
                fltint (at -O3 or greater optimization), and
                noemulate.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Generates instructions to detect and trap runtime
                floating-point exceptions.  <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                overflow
                     Generates code to detect and trap floating-
                     point overflow.
                underflow
                     Generates code to detect and trap floating-
                     point underflow.
                zerodivide
                     Generates code to detect and trap floating-
                     point division by zero.
                invalid
                     Generates code to detect and trap floating-
                     point invalid operation exceptions.
                inexact
                     Generates code to detect and trap floating-
                     point inexact exceptions.
                enable
                     Enables the specified exceptions in the
                     prologue of the main program.
                imprecise
                     Generates code for imprecise detection of the
                     specified exceptions. If an exception occurs,
                     it is detected, but the exact location of the
                     exception is not determined.
                nanq | nonanq
                     Generates code to detect and trap NaNQ (Not a
                     Number Quiet) exceptions handled or generated
                     by floating-point operations.


         -qfold | -qnofold
                This option is obsolete. Use -qfloat=fold in your
                new applications. Specifies that constant
                floating-point expressions are to be evaluated at
                compile time.  The default is -qfold.

         -qhsflt | -qnohsflt
                This option is obsolete. Use -qfloat=hsflt in your
                new applications. Speeds up calculations by
                removing range-checking on single-precision float
                results, and on conversions from floating-point to
                integer. -qnohsflt specifies that single-precision
                expressions are rounded after expression
                evaluation, and that floating-point-to-integer
                conversions are to be checked for out-of-range
                values.  The default is -qnohsflt.

         -qhssngl | -qnohssngl
                This option is obsolete. Use -qfloat=hssngl in your
                new applications. Specifies that single-precision
                expressions are rounded only when the results are
                stored into float memory locations. -qnohssngl
                specifies that single-precision expressions are
                rounded after expression evaluation.  The default
                is -qnohssngl.

         -qldbl128 | -qnoldbl128
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qlongdouble.  The default is -qnoldbl128.

         -qlongdouble | -qnolongdouble
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qldbl128.  The default is -qnolongdouble.

         -qlonglit | -qnolonglit
                Makes unsuffixed literals into the long type in
                64-bit mode.  The default is -qnolonglit.

         -qlonglong | -qnolonglong
                Allows long long integers.  When compiling with xlc
                or cc the default is -qlonglong. When compiling
                with c89, the default -qnolonglong.

         -qmaf | -qnomaf
                This option affects the precision of floating-point
                intermediate results. This option is obsolete. Use
                -qfloat=maf in your new applications. -qmaf
                specifies whether floating-point multiply-add
                instructions are to be generated. The default is
                -qmaf.

         -qrrm | -qnorrm
                This option is obsolete. Use -qfloat=rrm in your
                new applications. Prevents floating-point
                optimizations that are not compatible with runtime
                rounding to plus and minus infinity modes. The
                default is -qnorrm.

  ENVIRONMENT VARIABLES
         OBJECT_MODE
                Changes the compilation mode behavior, unless
                overridden by configuration file or command-line
                options.

                32
                     32-bit compiler mode.
                64
                     64-bit compiler mode.
                32_64
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.
                (not set)
                     32-bit compiler mode.
                (anything else)
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.

         PATH   Specifies the directory search path for the
                executable files of the compiler.

         MANPATH
                Specifies the directory search path for finding
                manual pages.

         OBJECT_MODE
                Specifies the default compilation mode to 32-bit or
                64-bit.

         LANG   Specifies the national language for message and
                help files.

         NLSPATH
                Specifies the path of the message and help files.

         PDFDIR Specifies the directory in which the profile data
                file is created.

         TMPDIR Specifies the directory in which temporary files
                are created. The default is /tmp.

         XLNOCLONEARCH
                Instructs the program to only execute the generic
                code (code that is not versioned for a particular
                architecture).

         XLSMPOPTS
                Sets options for programs using loop
                parallelization.
                e.g. XLSMPOPTS=PARTHDS=4:SCHEDULE=DYNAMIC=5

  SEE ALSO
         vacndi(1), gxlc(1), showpdf(1), mergepdf(1), resetpdf(1)
         cleanpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/caix/library/
         www.ibm.com/software/awdtools/caix/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL C Enterprise Edition V8.0 for AIX(R)

         5724-M11

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.




























configure:4416: $? = 249
configure:4423: xlc -v >&5
exec: export(export,XL_CONFIG=/etc/vac.cfg:xlc,NULL) 
exec: /usr/bin/pg(/usr/bin/pg,/usr/vac/exe/default_msg/vac.txt,NULL) 



  xlc(1)                 IBM (October 2005)                  xlc(1)



  NAME
         xlc, cc, c89, c99 and related commands - invoke the IBM XL
         C compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

         The invocation commands are:
         xlc, cc, c89, c99, xlc128, cc128, c89_128, c99_128,
         optionally followed by _r, _r4, or _r7.

  DESCRIPTION
         xlc and related commands compile C source files.  They
         also process assembler source files and object files. The
         compiler calls the link editor to produce a single
         executable or shared library, unless you specify the
         compiler options that prevent object files from being
         linked.

         The input file may have any of the following suffixes:
          .c = C source file
          .i = preprocessed C source file
          .a = archive file
          .o = object file for ld command
          .s = assembler source file
          .S = assembler source file that needs preprocessing

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -C     Preserves comments in preprocessed output if used
                with -E or -P. With the -E option, comments are
                written to standard output; with the -P option,
                comments are written to an output file.

         -D<name>[=[<def>]]
                Defines <name> as in the #define directive. <def>
                is an optional definition or value assigned to
                <name>. Specifying "-D<name>=" (with no <def>) is
                equivalent to "#define <name>"; specifying "-
                D<name>" is equivalent to "#define <name> 1".

         -I<dir>
                Specifies an additional search path for include
                filenames that do not specify an absolute path.

         -U<name>
                Undefines the identifier <name> defined by the
                compiler or by the -D<name> option.

         -qaltivec | -qnoaltivec
                Enables compiler support for vector data types.
                Instructs the compiler to support vector data types
                and operators and is accepted when the architecture
                specified by -qarch option supports VMX
                instructions and -qenablevmx is in effect.  The
                default is -qnoaltivec.

         -qasm[=gcc] | -qnoasm[=gcc]
                Controls the interpretation of, and subsequent
                generation of code for, asm statements.  If 'gcc'
                is specified, the compiler will interpret asm
                statements using gcc syntax.

                The default is -qasm=gcc.

         -qcpluscmt | -qnocpluscmt
                Permits the usage of "//" to introduce a comment
                that lasts until the end of the current source
                line, as in C++.  The default is -qcpluscmt when
                you invoke the compiler with xlc, xlc_r, cc, or
                cc_r, or when -qlanglvl is set to stdc99 or extc99.
                Otherwise, the default setting is -qnocpluscmt.

         -qdbcs | -qnodbcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qmbcs.  The default is -qnodbcs.

         -qdigraph | -qnodigraph
                Allows usage of digraph key combinations or
                keywords to represent characters not found on some
                keyboards.
                The default is -qdigraph when -qlanglvl is extc89,
                extended, extc99 or stdc99. Otherwise the default
                is -qnodigraph.

         -qdollar | -qnodollar
                Allows the '$' symbol to be used in the names of
                identifiers. When -qdollar is in effect, the dollar
                symbol '$' in an identifier is treated as a base
                character. If the options -qnodollar and
                -qlanglvl=ucs are both in effect, the dollar symbol
                is treated as an extended character.  The default
                is -qnodollar.

         -qidirfirst | -qnoidirfirst
                Specifies the search order for files included with
                the #include "<filename>" directive.  Use
                -qidirfirst with the -I option.  If -qidirfirst is
                specified, the directories specified by the
                -I<directory> option are searched before the
                directory in which the current file resides.  The
                default is -qnoidirfirst.

         -qignprag=<option>
                Instructs the compiler to ignore certain pragma
                statements.  The options are:

                disjoint
                     Ignores all #pragma disjoint directives in the
                     source file.
                isolated
                     Ignores all #pragma isolated_call directives
                     in the source file.
                all
                     Ignores all #pragma isolated_call directives
                     and #pragma disjoint directives in the source
                     file.
                omp
                     Ignores all OpenMP parallel processing
                     directives in the source file.
                ibm
                     Ignores IBM parallel processing directives.

         -qkeyword=<keyword> | -qnokeyword=<keyword>
                Controls whether the specified name is treated as a
                keyword or as an identifier whenever it appears in
                a program source.  By default all the built-in
                keywords defined in the C language standards are
                reserved as keywords. However, you can use
                -qnokeyword=<keyword> to disable built-in keywords,
                and use -qkeyword=<keyword> to reinstate those
                keywords.

         -qlanglvl=<suboptions_list>
                Selects the language level and language options for
                the compilation. <suboptions_list> is a colon-
                separated list of suboptions.  The suboptions are:

                classic
                     Allows the compilation of non-stdc89 programs,
                     and conforms closely to the K&R level
                     preprocessor.
                extended
                     Provides compatibility with the RT compiler
                     and classic. This language level is based on
                     C89.
                saa
                     Compilation conforms to the current SAA(R) C
                     CPI language definition. This is currently SAA
                     C Level 2.
                saal2
                     Compilation conforms to the SAA C Level 2 CPI
                     language definition, with some exceptions.
                stdc89
                     Compilation conforms to the ANSI C89 standard,
                     also known as ISO C90.
                stdc99
                     Compilation conforms to the ISO C99 standard.
                extc89
                     Compilation conforms to the ANSI C89 standard,
                     and accepts implementation-specific language
                     extensions.
                extc99
                     Compilation conforms to the ISO C99 standard,
                     and accepts implementation-specific language
                     extensions.
                ucs | noucs
                     This option controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in program
                     source code.  Under language levels stdc99 and
                     extc99, the default is -qlanglvl=ucs.


                The default depends on the invocation command used:

                COMMAND         DEFAULT
                xlc             extc89
                cc              extended
                c89             stdc89
                c99             stdc99

         -qmacpstr | -qnomacpstr
                Converts Pascal string literals into null-
                terminated strings where the first byte contains
                the length of the string.  The default is
                -qnomacpstr.

         -qmbcs | -qnombcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qdbcs.  The default is -qnombcs.

         -qpascal | -qnopascal
                Specifies whether to recognize and accept the
                keyword 'pascal' in type specifiers and function
                declarations.  The default is -qnopascal.

         -qsourcetype=<type>
                Determines whether to treat all recognized source
                files as if they are of the source type specified
                by <type> (regardless of filename suffix), or
                whether to use the filename suffix to determine the
                programming language. The options are:

                default
                     The compiler assumes that the programming
                     language of a source file will be implied by
                     its filename suffix.
                c
                     The compiler compiles all source files
                     following this option as if they are C
                     language source files.
                c++
                     The compiler compiles all source files
                     following this option as if they are C++
                     language source files.
                assembler
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files.
                assembler-with-cpp
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files that need preprocessing.

                The default is -qsourcetype=default.

         -qstdinc | -qnostdinc
                Specifies which directories are used for files
                included by the #include <file_name> and #include
                "file_name" directives. The -qnostdinc option
                excludes the standard include directories from the
                search path.  The default is -qstdinc.

         -qsyntaxonly
                Performs syntax checking without generating an
                object file.

         -qtrigraph | -qnotrigraph
                Allows trigraph key combinations to represent
                characters not found on some keyboards.
                The default is qtrigraph, however if
                -qlanglvl=classic is in effect or implied, the
                trigraphs are not recognized by default.

         -qutf | -qnoutf
                Enables recognition of UTF literal syntax.  The
                default is -qnoutf.

  Output Control Options
         -#     Traces the compilation and generates information on
                the progress of the compilation without invoking
                the preprocessor, compiler, or linkage editor.

         -c     Instructs the compiler to pass source files to the
                compiler only. Compiled source files are not sent
                to the linkage editor.

         -E     Instructs the compiler to preprocess the source
                files and send preprocessed source to standard
                output.

         -M     Creates an output file that contains information to
                be included in a "make" description file. This is
                equivalent to specifying -qmakedep without a
                suboption.

         -MF<file>
                Specifies the target for the output generated by
                the -qmakedep or -M options, where <file> is the
                target output filepath. Note that "-MF <file>"
                (with a space before the argument) is also
                acceptable. This option only has effect when
                specified with -qmakedep or -M.

         -ma    Substitutes inline code for calls to function
                alloca.

         -o <filespec>
                Specifies an output location for the object,
                assembler, or executable files created by the
                compiler. When the -o option is used during
                compiler invocation, <filespec> can be the name of
                either a file or a directory.  The default name is
                a.out.

         -P     Preprocesses the C source files named in the
                compiler invocation and creates an output
                preprocessed source file, <filename.i> for each
                input source file.  The default is to compile and
                link-edit C source files to produce an executable
                file.

         -S     Generates an assembler language file (.s) for each
                source file. The resulting .s files can be
                assembled to produce object .o files or an
                executable file (a.out).

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -q32,-q64
                Selects either 32-bit or 64-bit compilation mode.
                Use the -q32 and -q64 options, along with the
                -qarch and -qtune compiler options, to optimize the
                output of the compiler to the architecture on which
                that output will be used. The default is -q32.

         -qalign=<option>
                Specifies what aggregate alignment rules the
                compiler uses for file compilation, where the
                alignment options are:

                bit_packed
                     The compiler uses the bit_packed alignment
                     rules.
                full
                     The compiler uses the RISC System/6000
                     alignment rules. This is the same as power.
                mac68k
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.
                natural
                     The compiler maps structure members to their
                     natural boundaries.
                packed
                     The compiler uses the packed alignment rules.
                power
                     The compiler uses the RISC System/6000
                     alignment rules.
                twobyte
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.  The mac68k option is the
                     same as twobyte.

                The default is -qalign=full.

         -qalloca
                Substitutes inline code for calls to function
                alloca, as if #pragma alloca directives were in the
                source code.

         -qbitfields={signed|unsigned}
                Specifies whether bit fields will be signed or
                unsigned.  The default is -qbitfields=unsigned.

         -qchars={signed|unsigned}
                Specifies whether the data type char will be signed
                or unsigned.  The default is -qchars=unsigned.

         -qenablevmx | -qnoenablevmx
                Enables generation of VMX (Vector Multimedia
                Extension) instructions.  The default is
                -qnoenablevmx.

         -qenum=<option>
                Specifies the amount of storage occupied by
                enumerations, where <option> is:

                small
                     Specifies that enumerations occupy the
                     smallest amount of space (1, 2, 4, or 8 bytes)
                     that can accurately represent the range of
                     values in the enumeration.  Signage is
                     unsigned, unless the range of values includes
                     negative values.
                int
                     Specifies that enumerations occupy 4 bytes and
                     are represented by int.
                intlong
                     Specifies that enumerations occupy 8 bytes of
                     storage if the range of values in the
                     enumeration exceeds the limit for int.
                     Otherwise, the enumerations occupy 4 bytes of
                     storage and are represented by int.
                1
                     Specifies that enumerations occupy 1 byte.
                     Type is signed or unsigned char.
                2
                     Specifies that enumerations occupy 2 bytes.
                     Type is signed or unsigned short.
                4
                     Specifies that enumerations occupy 4 bytes.
                     Type is signed or unsigned int.
                8
                     Specifies that enumerations occupy 8 bytes.
                     Type is signed or unsigned long long in 32-bit
                     mode, and signed or unsigned long in 64-bit
                     mode.

         -qfuncsect | -qnofuncsect
                Places instructions for each function in a separate
                object file control section or csect.  The default
                is -qfuncsect.

         -qmakedep[=gcc]
                Creates an output file that contains targets
                suitable for inclusion in a description file for
                the make command that describes the dependencies of
                the main source file in the compilation.
                Specifying 'gcc' changes the format of the
                generated dependency file. Specifying -qmakedep
                without 'gcc' is equivalent to specifying -M.

         -qpic[={small|large}]
                Instructs the compiler to generate position-
                independent code suitable for use in shared
                libraries.

                small
                     Instructs the compiler to assume that the size
                     of the global offset table is no larger than
                     64 Kb.
                large
                     Allows the global offset table to be larger
                     than 64 Kb in size, allowing more addresses to
                     be stored in the table.

                The -qpic option is implied if either of the -G or
                -qmkshrobj compiler options is specified.  The
                default is -qpic=small.

         -qppline | -qnoppline
                Enables generation of #line directive in the
                preprocessed output.  If the -P option is enabled,
                the default is -qnoppline. Otherwise, the default
                is -qppline.

         -qreserved_reg=<registers_list>
                Indicates that the specified register(s) cannot be
                used during the compilation, except as a stack
                pointer, frame pointer or in a different fixed
                role. <registers_list> is a colon-separated list of
                registers. You should use this option in modules
                that are required to work with other modules that
                use global register variables or hand-written
                assembler code.

         -qro | -qnoro
                Specifies the storage type for string literals and
                puts string literals in read-only storage.  The
                default with cc and its derivatives is -qnoro,
                otherwise the default is -qro.

         -qroconst | -qnoroconst
                Specifies the storage location for constant values.
                Puts constant values in read-only storage.  The
                default with xlc and c89 compiler invocations is
                -qroconst, and the default with cc is -qnoroconst.

         -qroptr | -qnoroptr
                Specifies the storage location for constant
                pointers. This options requires AIX V5.2 or
                greater.  The default is -qnoroptr.

         -qsaveopt | -qnosaveopt
                Saves command line options in the corresponding
                object files.  The default is -qnosaveopt.

         -qstatsym | -qnostatsym
                Adds user-defined, non-external names that have a
                persistent storage class (such as initialized and
                uninitialized static variables) to the name list.
                The default is -qnostatsym.

         -qthreaded | -qnothreaded
                Ensures that all optimizations will be thread-safe
                for executing in a multi-threaded environment.  The
                default is -qthreaded when compiling invocation
                commands ending in "_r", and -qnothreaded
                otherwise.

         -qupconv | -qnoupconv
                Preserves the unsigned specification when
                performing integral promotions.  The default is
                -qupconv when -qlanglvl=extc89, and -qnoupconv
                otherwise.

         -qweaksymbol | -qnoweaksymbol
                Instructs the compiler to generate weak symbols.
                The default is -qnoweaksymbol on AIX 5.1, and
                -qweaksymbol on AIX 5.2 and higher.

         -qxcall | -qnoxcall
                Generates code to treat static functions within a
                compilation unit as if they were external
                functions.  The default is -qnoxcall.

  Optimization Options
         -O[<level>]
                Optimizes code at a choice of levels during
                compilation. This is equivalent to
                -qoptimize[=<level>]. <level> can be:

                0
                     Performs only quick local optimizations such
                     as constant folding and elimination of local
                     common subexpressions.
                2
                     Performs optimizations that the compiler
                     developers considered the best combination for
                     compilation speed and runtime performance. The
                     optimizations may change from product release
                     to release.
                3
                     Performs some memory and compile-time
                     intensive optimizations in addition to those
                     executed with -O2.  The -O3 specific
                     optimizations have the potential to alter the
                     semantics of a program.  The compiler guards
                     against these optimizations at -O2 and the
                     option -qstrict is provided at -O3 to turn off
                     these aggressive optimizations. Specifying -O3
                     will set -qhot=level=0.
                4
                     This option is the same as -O3, but also:
                     - Sets the -qarch and -qtune options to the
                     architecture of the compiling machine.
                     - Sets the -qcache option most appropriate to
                     the characteristics of the compiling machine.
                     - Sets the -qipa option.
                     - Sets the -qhot option to level=1.
                5
                     Equivalent to -O4 -qipa=level=2.

                The default is -O0. Specifying -O with no <level>
                is equivalent to specifying -O2.

         -Q[<suboption>]
                Specifies which specific functions the compiler
                should attempt to inline.

                This option can take the form:

                     -Q
                          Attempts to inline all appropriate
                          functions with 20 executable source
                          statements or fewer, subject to the
                          setting of any of the suboptions to the
                          -Q option. If -Q is specified last, all
                          functions are inlined.
                     -Q!
                          Does not inline any functions. If -Q! is
                          specified last, no functions are inlined.
                     -Q-<names_list>
                          Does not inline functions listed in
                          <names_list>, where <names_list> is a
                          colon-separated list. All other
                          appropriate functions are inlined. The
                          option implies -Q.
                     -Q+<names_list>
                          Attempts to inline the functions listed
                          in <names_list> and any other appropriate
                          functions. <names_list> is a colon-
                          separated list.  The option implies -Q.
                     -Q=<threshold>
                          Sets a size limit on the functions to be
                          inlined. The number of executable
                          statements must be less than or equal to
                          <threshold> for the function to be
                          inlined. <threshold> must be a positive
                          integer. The default value is 20.
                          Specifying a threshold value of 0 causes
                          no functions to be inlined except those
                          functions marked with the __inline,
                          _Inline, or _inline keywords.

                The default is to treat inline specifications as a
                hint to the compiler.

         -qaggrcopy={overlap|nooverlap}
                Enables destructive copy operations for structures
                and unions.  The default is -qaggrcopy=overlap when
                compiling to the EXTENDED and CLASSIC language
                levels, and -qaggrcopy=nooverlap otherwise.

         -qalias=<options_list>
                Specifies the aliasing assertions to be applied to
                your compilation unit. <options_list> is a colon-
                separated list of the following options:

                addrtaken | noaddrtaken
                     Variables are disjoint from pointers unless
                     their address is taken.
                allptrs | noallptrs
                     If noallptrs is specified, pointers are never
                     aliased.
                ansi | noansi
                     If ansi is specified, type-based aliasing is
                     used during optimization, which restricts the
                     lvalues that can be safely used to access a
                     data object. The default is ansi for the xlc
                     and c89 command and noansi for the cc
                     invocation commands.  This option has no
                     effect unless you also specify the -O option.
                typeptr | notypeptr
                     If notypeptr is specified, pointers to
                     different types are never aliased.

                The default is
                -qalias=noaddrtaken:noallptrs:typeptr:ansi.

         -qansialias | -qnoansialias
                This option is obsolete. Use -qalias=ansi in your
                new applications. See the -qalias=ansi suboption.
                The default is -qansialias with xlc, c99, and c89,
                and -qnoansialias with cc.

         -qarch=<option>
                Specifies the general processor architecture for
                which the code (instructions) should be generated.
                In general, the -qarch option allows you to target
                a specific architecture for the compilation. For
                any given -qarch setting, the compiler defaults to
                a specific, matching -qtune setting, which can
                provide additional performance improvements.  The
                suboptions are:

                auto
                     Generates instructions that will run on the
                     hardware platform on which the program is
                     compiled.
                com
                     In 32-bit mode, generates instructions that
                     will run on all the POWER and PowerPC hardware
                     platforms.  In 64-bit mode, these instructions
                     will run on 64-bit PowerPC processors but not
                     on 32-bit PowerPC processors.  This is the
                     default unless -q64, -O4, or -O5 are
                     specified.
                pwr
                     Generates instructions that will run on the
                     POWER, POWER2, and 601 hardware platforms.
                pwr2
                     Generates instructions that will run on the
                     POWER2 hardware platform.
                pwr3
                     Generates instructions that will run on a
                     POWER3, POWER4, POWER5, and POWERPC970 chip.
                pwr4
                     Generates instructions that will run on a
                     POWER4, POWER5, and POWERPC970 chip.
                pwr5
                     Generates object code containing instructions
                     that will run on the POWER5 hardware platform.
                pwr5x
                     Generates instructions that will run on any
                     POWER5+ hardware platform.
                ppc
                     In 32-bit mode, produces object code
                     containing instructions that will run on any
                     of the 32-bit PowerPC hardware platforms. This
                     suboption will cause the compiler to produce
                     single-precision instructions to be used with
                     single-precision data.  Specifying -qarch=ppc
                     together with -q64 quietly upgrades the -qarch
                     setting to -qarch=ppc64.
                ppcgr
                     In 32-bit mode, produces object code for
                     PowerPC processors that support optional
                     graphics instructions. Note that specifying
                     -q64 with -qarch=ppcgr will quietly upgrade
                     the -qarch setting to -qarch=ppc64gr.
                ppc64
                     Generates instructions that will run on any of
                     the 64-bit PowerPC hardware platform.
                ppc64v
                     Generates instructions for the 64-bit PowerPC
                     processor with VMX.
                ppc970
                     Generates instructions that will run on the
                     PPC970 hardware platform.
                ppc64gr
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics instructions.
                ppc64grsq
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics and square root instructions.
                pwr2s
                     Generates instructions that will run on POWER2
                     Chip desktop implementations.
                p2sc
                     Generates instructions that will run on a
                     POWER2 Super Chip.
                601
                     Generates instructions that will run on a 601
                     chip.
                602
                     Generates instructions that will run on a 602
                     chip.
                603
                     Generates instructions that will run on a 603
                     chip.
                604
                     Generates instructions that will run on a 604
                     chip.
                403
                     Generates instructions that will run on a 403
                     chip.
                rs64a
                     Generates instructions that will run on a
                     rs64I chip.
                rs64b
                     Generates instructions that will run on a
                     RS64II chip.
                rs64c
                     Generates instructions that will run on a
                     RS64III chip.

         -qassert=<suboption> | -qnoassert
                This option is obsolete. Use -qalias in your new
                applications. This option specifies the aliasing
                assertion to be applied to your compilation unit.
                The suboptions are:

                typeptr
                     Pointers to different types are never aliased.
                allptrs
                     Pointers are never aliased.
                addrtaken
                     Variables are disjoint from pointers unless
                     their address are taken.

                The default is -qnoassert.

         -qcache=<suboptions_list>
                Describes the cache configuration for a specific
                target execution machine, where <suboptions_list>
                is a colon-separated list of one or more of the
                following suboptions:

                assoc=<number>
                     Specifies the set associativity of the cache,
                     where <number> is one of the following:
                          0    Direct-mapped cache
                          1    Fully associative cache
                          (number > 1)   n-way set associative
                          cache
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. This
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty, in CPU
                     cycles, resulting from a cache miss.
                level=<level>
                     Specifies the level of cache affected, where
                     level is one of the following:
                          1     Basic cache
                          2     Level-2 cache or, if there is no
                                level-2 cache, the table lookaside
                                buffer (TLB)
                          3     TLB
                          If a machine has more than one level of
                          cache, use a separate -qcache option.
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<cache_type>
                     The settings apply to the specified type of
                     cache, where <cache_type> is one of the
                     following:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The -qtune setting determines the optimal default
                -qcache settings for most typical compilations.

         -qcompact | -qnocompact
                Reduces code size where possible, at the expense of
                execution speed. Code size is reduced by inhibiting
                optimizations that replicate or expand code inline.
                This option takes effect only if -O2 or higher is
                also used.  The default is -qnocompact.

         -qdataimported[=<names_list>]
                Specifies which data items are imported. If no
                names are specified, all data items are assumed to
                be imported.  <names_list> is a colon-separated
                list of data items.

         -qdatalocal[=<names_list>]
                Specifying -qdatalocal=<names_list> marks the named
                variables as local, where <names_list> is a colon-
                separated list of identifiers. Specifying
                -qdatalocal with no variables instructs the
                compiler to assume that all variables are local.

         -qdirectstorage | -qnodirectstorage
                Informs the compiler that write-through-enabled or
                cache-inhibited storage may be referenced.  The
                default is -qnodirectstorage.

         -qfdpr | -qnofdpr
                Collects information about programs for use with
                the AIX fdpr (Feedback Directed Program
                Restructuring) performance-tuning utility.  The
                default is -qnofdpr.

         -qhot[=<suboption>] | -qnohot
                Specifies whether or not to perform high-order
                transformations during optimization. The suboptions
                are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value.  Otherwise, the
                     compiler will pad any arrays where it infers
                     that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. -qhot=level=1 will
                     be equivalent to -qhot and the compiler
                     options that imply -qhot also imply
                     -qhot=level=1 unless -qhot=level=0 is
                     explicitly specified. See the Compiler
                     Reference for more information.
                simd | nosimd
                     The compiler converts certain operations that
                     are performed in a loop on successive elements
                     of an array into a call to a VMX (Vector
                     Multimedia Extension) instruction. This
                     suboption has effect only when the effective
                     architecture supports VMX instructions and you
                     specify -qenablevmx.
                vector | novector
                     When specified with -qnostrict and -qignerrno,
                     or an optimization level of -O3 or higher, the
                     compiler converts certain operations that are
                     performed in a loop on successive elements of
                     an array (for example, square root, reciprocal
                     square root) into a call to a Mathematical
                     Acceleration Subsystem (MASS) library vector
                     routine. This call will calculate several
                     results at one time, which is faster than
                     calculating each result sequentially.

                The default is -qnohot.

         -qignerrno | -qnoignerrno
                Allows the compiler to perform optimizations that
                assume errno is not modified by system calls.  The
                default is -qnoignerrno.

         -qinline[<suboption>] | -qnoinline
                Specifies whether to attempt to inline functions
                instead of generating calls to a function. This
                option can take the following forms:

                -qinline
                     The compiler attempts to inline all
                     appropriate functions with 20 executable
                     source statements or fewer, subject to any
                     other settings of the suboptions to the
                     -qinline option.
                -qinline=threshold=<num>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <num> for the
                     function to be inlined. <num> must be a
                     positive integer.
                -qinline+<names_list>
                     Attempts to inline the functions listed in
                     <names_list> and any other appropriate
                     functions, where <names_list> is a colon-
                     separated list.
                -qinline-<names_list>
                     Specifies that functions listed in
                     <names_list> do not get inlined, where
                     <names_list> is a colon-separated list.
                -qnoinline
                     Does not inline any functions.

                The default is to treat inline specifications as a
                hint to the compiler, and the result depends on
                other options that you select:  If you specify the
                -g option (to generate debug information), inlining
                may be affected.

         -qipa[=<suboptions_list>] | -qnoipa
                Turns on or customizes a class of optimizations
                known as interprocedural analysis (IPA).  Regular
                expressions are supported when specifying procedure
                names for these suboptions:  cloneproc,
                nocloneproc, exits, inline, noinline, isolated,
                lowfreq, pure, safe, unknown. <suboptions_list> is
                a colon-separated list of one or more of the
                following suboptions:

                clonearch=<architecture_list> | noclonearch
                     Allows you to specify a group of architectures
                     in case you want to compile your application
                     for multiple architectures with a single
                     binary file. <architecture_list> is a comma-
                     separated list of one or more of the following
                     architectures: pwr4, pwr5, and ppc970. When
                     -qcompact is in effect, -qarch=clonearch is
                     disabled. This must be specified during link
                     time.  The default is -qipa=noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of functions that you wish to clone (or not
                     clone). Please note that this suboption has no
                     effect unless -qipa=clonearch=<arch> is
                     specified.
                exits=<procedure_names_list>
                     Specifies names of functions which represent
                     program exits.  <procedure_names_list> is a
                     comma-separated list of procedures.
                infrequentlabel=<names_list>
                     Specifies a comma-separated list of user-
                     defined labels that are likely to be called
                     infrequently during a program run.
                inline[=<suboption>]
                     Specifying 'inline' with no suboption asserts
                     that all appropriate procedures will be
                     inlined. <suboption> can be one of the
                     following:
                     auto | noauto
                          Specifies whether or not to automatically
                          inline procedures.
                     <procedure_names_list>
                          Specifies a comma-separated list of
                          procedures to attempt to inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This only takes
                          effect when inline=auto is on.
                     <options_list>
                          The same as specifying
                          -qinline=<options_list>. <options_list>
                          is a comma-separated list of any
                          suboptions that belong to the -qinline
                          compiler option.
                noinline=<procedures_list>
                     Specifies a comma-separated list of procedures
                     which are not to be inlined.
                isolated=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that do
                     not directly refer to any global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization performed, where <level> can be
                     equal to:
                     0
                          Performs minimal interprocedural analysis
                          and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full interprocedural data flow and alias
                          analysis.
                     The default is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, if an object listing has been
                     requested using the -qlist option. The default
                     name is "a.lst". Specifying 'long' or 'short'
                     can be used to request more or less
                     information in the listing file to determine
                     which listing sections will be included. The
                     default is 'short'.
                lowfreq=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are likely to be called infrequently
                     during the course of a typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the default assumption for
                     procedures not compiled with -qipa.
                     unknown
                          Greatly restricts the amount of
                          interprocedural optimization for calls to
                          unknown functions.
                     safe
                          Functions which do not indirectly call a
                          visible (not missing) function either
                          through direct call or function pointer.
                     isolated
                          Functions which do not directly reference
                          global variables accessible to visible
                          functions.
                     pure
                          Functions which are safe and isolated and
                          which do not indirectly alter storage
                          accessible to functions.
                object | noobject
                     This is a compile-time option. It specifies
                     whether to include standard object code in the
                     object files. Specifying 'noobject' can
                     substantially reduce overall compile time by
                     not generating object code during the first
                     IPA phase.
                partition={small|medium|large}
                     Specifies the size of program sections that
                     are analyzed together. Larger partitions may
                     produce better analysis but require more
                     storage.
                pdfname[=<filename>] | nopdfname
                     Specifies the name of the profile data file
                     containing the PDF profiling information.  If
                     you do not specify <filename>, the default
                     file name is ._pdf.
                pure=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that are
                     "isolated", "safe", and do not modify any data
                     objects that are visible to the caller.
                safe=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that do not call
                     any other part of the program.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that may
                     update global variables and dummy arguments
                     and call other parts of the program compiled
                     with -qipa.
                <filename>
                     Specifies the name of a file that contains
                     suboption information in a special format.

                The default is -qnoipa.

         -qisolated_call=<function_names_list>
                Specifies functions in the source file that have no
                side effects, where <function_names> is a colon-
                separated list of function names.

         -qlargepage | -qnolargepage
                Exploits large page heaps that are available on
                Power 4 and Power 5 systems running AIX v5.1D or
                later.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C library function are in fact the library
                functions.  The default is -qnolibansi.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 | -qnopdf1
                Produces an object that is instrumented to collect
                runtime execution information. This is phase 1 of
                the profile-directed feedback optimization process.
                The default is -qnopdf1.

         -qpdf2 | -qnopdf2
                Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.  The default is
                -qnopdf2.

         -qprefetch | -qnoprefetch
                Enables generation of prefetching instructions such
                as dcbt and dcbz in compiled code.  The default is
                -qprefetch.

         -qprocimported[=<names_list>] | -qnoprocimported
                If no <names_list> is specified, it asserts that
                all functions are imported. Otherwise, only the
                named functions are marked as imported.
                <names_list> is a colon-separated list of function
                identifiers.

         -qproclocal[=<names_list>] | -qnoproclocal
                If no <names_list> is specified, it asserts that
                all functions are local. Otherwise, only the named
                functions are marked as local. <names_list> is a
                colon-separated list of function identifiers.

         -qprocunknown[=<names_list>] | -qnoprocunknown
                If no <names_list> is specified, it asserts that
                all functions are unknown. Otherwise, only the
                named functions are marked as unknown. <names_list>
                is a colon-separated list of function identifiers.

         -qshowpdf | -qnoshowpdf
                Used with -qpdf1 and a minimum optimization level
                of -O to add additional call and block count
                profiling information to an executable.  The
                default is -qnoshowpdf.

         -qsmallstack | -qnosmallstack
                Reduces the size of the stack frame.  This option
                is only valid when used together with IPA (-qipa,
                -O4, -O5 compiler options).  The default is
                -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Enables parallelization of program code.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization and
                     optimization. If noauto is specified,
                     automatic parallelization of program code is
                     disabled; only program code explicitly
                     parallelized with IBM SMP or OpenMP directives
                     is optimized.
                explicit | noexplicit
                     Enables explicit parallelization of loops.
                nested_par | nonested_par
                     Enables parallelization of nested parallel
                     constructs.
                omp | noomp
                     Enables strict OpenMP compliance. Only OpenMP
                     parallelization pragmas are recognized.
                opt | noopt
                     Enables automatic parallelization but disables
                     optimization of parallelized program code. If
                     noopt is specified, optimization of
                     parallelized program code is disabled.
                rec_locks | norec_locks
                     Specifies whether to use recursive locks.
                schedule=<type>
                     Specifies what kinds of scheduling algorithms
                     and chunking are used for loops to which no
                     other scheduling algorithm has been explicitly
                     assigned in the source code. <type> can be:
                     dynamic[=<num>]
                     guided[=<num>]
                     static[=<num>]
                     affinity[=<num>]
                     runtime

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, explicit, noomp, norec_locks, nonested_par,
                schedule=runtime.

         -qspill=<size>
                Specifies the size of the register allocation spill
                area in bytes.  The default is -qspill=512.

         -qstrict | -qnostrict
                Turns off aggressive optimizations which have the
                potential to alter the semantics of your program.
                -qstrict sets -qfloat=nofltint:norsqrt. -qnostrict
                sets -qfloat=rsqrt. This option is only valid with
                -O2 or higher optimization levels. The default is
                -qnostrict at -O3 or higher, and -qstrict
                otherwise.

         -qstrict_induction | -qnostrict_induction
                Turns off loop induction variable optimizations
                that have the potential to alter the semantics of
                your program.  The default is -qnostrict_induction
                at -O2 or higher and -qstrict_induction otherwise.

         -qtocdata | -qnotocdata
                Marks data as local.  The default is -qnotocdata.

         -qtocmerge | -qnotocmerge
                Reads from the file specified in -bImportfile
                linker option and merges the address information to
                access ranges of external addresses using a single
                table of contents entry.  The default is
                -qnotocmerge.

         -qtune=<suboption>
                Specifies the architecture system for which the
                executable program is optimized.  The suboptions
                are:

                auto
                     Generates object code optimized for the
                     hardware platform on which the program is
                     compiled.
                403
                     Generates object code optimized for all the
                     PowerPC 403 processors.
                601
                     Generates object code optimized for all the
                     PowerPC 601 processors.
                602
                     Generates object code optimized for all the
                     PowerPC 602 processors.
                603
                     Generates object code optimized for all the
                     PowerPC 603 processors.
                604
                     Generates object code optimized for all the
                     PowerPC 604 processors.
                p2sc
                     Generates object code optimized for all the
                     PowerPC P2SC processors.
                ppc
                     Generates object code optimized for 32-bit
                     POWERPC hardware platform.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                pwr
                     Generates object code optimized for the POWER
                     hardware platforms.
                pwr2
                     Generates object code optimized for the POWER2
                     hardware platform.
                pwr2s
                     Generates object code optimized for the POWER2
                     hardware platform, avoiding certain
                     quadruple-precision instructions that would
                     slow program performance.
                pwr3
                     Generates object code optimized for the POWER3
                     processor.
                pwr4
                     Generates object code optimized for the POWER4
                     processor.
                pwr5
                     Generates object code optimized for the POWER5
                     hardware platforms.
                rs64I
                     Generates object code optimized for the rs64a
                     processor.
                rs64b
                     Generates object code optimized for the RS64II
                     processor.
                rs64c
                     Generates object code optimized for the
                     RS64III processor.

                The default setting is determined by the setting of
                -qarch.

         -qunroll[={yes|no|auto}] | -qnounroll
                Unrolls inner loops in the program. This can help
                improve program performance.  The options are:

                yes
                     Is a suggestion to the compiler to unroll
                     loops.
                no
                     Instructs the compiler not to unroll loops.
                auto
                     Leaves the decision to unroll loops to the
                     compiler.

                The default is -qunroll=auto.  If -qunroll is
                specified with no suboptions, the compiler assumes
                -qunroll=yes.

         -qunwind | -qnounwind
                Informs the compiler that the stack can be unwound
                while a routine in the compilation is active.
                Specifying -qnounwind can improve the optimization
                of non-volatile register saves and restores.  The
                default is -qunwind.

         -qvecnvol | -qnovecnvol
                Specifies whether to use volatile or non-volatile
                vector registers. Volatile vector registers are
                registers whose value is not preserved across
                function calls or in the context of save, jump or
                switch system library functions. If -qnoenablevmx
                is in effect, this option is ignored.  The default
                is -qnovecnvol.

  Error Checking and Debugging Options
         -g     Generates information for debugging tools such as
                the IBM Debugger for AIX, Version 3.1.

         -p     Sets up the object files produced by the compiler
                for profiling.

         -pg    Sets up the object files for profiling, but
                provides more information than is provided by the
                -p option.

         -qcheck[=<suboptions_list>] | -qnocheck
                Generates code that performs certain types of
                runtime checking. If a violation is encountered, a
                runtime exception is raised by sending a SIGTRAP
                signal to the process. <suboptions_list> is a
                colon-separated list of one or more of the
                following:

                bounds | nobounds
                     Performs runtime checking of addresses when
                     subscripting within an object of known size.
                divzero | nodivzero
                     Performs runtime checking of integer division.
                     A trap will occur if an attempt is made to
                     divide by zero.
                nullptr | nonullptr
                     Performs runtime checking of addresses
                     contained in pointer variables used to
                     reference storage.
                all
                     Switches on all the above suboptions.

                The default is -qnocheck.

         -qdbxextra | -qnodbxextra
                Specifies that all typedef declarations, struct,
                union, and enum type definitions are included for
                debugging.  Use this option with the -g option to
                produce additional debugging information for use
                with a debugger.  The default is -qnodbxextra.

         -qdpcl | -qnodpcl
                Generates symbols that can be used by tools based
                on the Dynamic Probe Class Library (DPCL) to see
                the structure of an executable file.  The default
                is -qnodpcl.

         -qextchk | -qnoextchk
                Generates bind-time type-checking information and
                checks for compile-time consistency.  The default
                is -qnoextchk.

         -qfullpath | -qnofullpath
                Specifies the path information stored for files
                when you use the -g compiler option.  The default
                is -qnofullpath.

         -qgenproto[=parmnames] | -qnogenproto
                Produces ANSI prototypes from K&R function
                definitions.  Specifying -qgenproto without
                '=parmnames' will cause prototypes to be generated
                without parameter names.  The default is
                -qnogenproto.

         -qheapdebug | -qnoheapdebug
                Enables debug versions of memory management
                functions.  The default is -qnoheapdebug.

         -qinitauto=<hex_value> | -qnoinitauto
                Initializes automatic variables to the two-digit
                hexadecimal byte value <hex_value>. This generates
                extra code and should only be used for error
                determination.  The default is -qnoinitauto.

         -qkeepparm | -qnokeepparm
                Ensures that function parameters are stored on the
                stack even if the application is optimized.  As a
                result, parameters remain in the expected memory
                location, providing access to the values of these
                incoming parameters to tools such as debuggers. The
                default is -qnokeepparm.

         -qlinedebug | -qnolinedebug
                Generates abbreviated line number and source file
                name information for the debugger.  The default is
                -qnolinedebug.

         -qmaxerr=<num>[:<sev>] | -qnomaxerr
                Instructs the compiler to halt compilation when the
                specified number of errors of the specified
                severity (by default, the value of -qhalt) or
                greater is reached.  <num> must be an integer. The
                severity levels, <sev>, are:

                i = informational
                w = warning
                e = error
                s = severe error

                The default is -qnomaxerr.

         -qproto | -qnoproto
                Assumes that all functions are prototyped.  Asserts
                that procedure call points agree with their
                declarations even if the procedure has not been
                prototyped. This allows the caller to pass
                floating-point arguments in floating-point
                registers instead of general-purpose registers.
                The default is -qnoproto.

         -qspnans | -qnospnans
                This option is obsolete. Use -qfloat=nans in your
                new applications. Generates extra instructions to
                detect signalling NaN on conversion from single
                precision to double precision. The -qnospnans
                option specifies that this conversion need not be
                detected. The default is -qnospnans.

         -qsymtab={unref|static}
                Determines what types of information appear in the
                symbol table.  The suboptions are:

                unref
                     Specifies that all typedef declarations,
                     struct, union, and enum type definitions are
                     included for processing by the debugger.
                static
                     Adds user-defined, non-external names that
                     have a persistent storage class (such as
                     initialized and uninitialized static
                     variables) to the name list.

                The default is to not add static variables to the
                symbol table.

         -qtbtable=<option>
                Generates a traceback table that contains
                information about each function, including the type
                of function as well as stack frame and register
                information. The traceback table is placed in the
                text segment at the end of its code.  The options
                are:

                none
                     No traceback table is generated.
                full
                     A full traceback table is generated.  This is
                     the default with -qnoopt or -g specified.
                small
                     A traceback table is generated with no name or
                     parameter information.  This is the default
                     with optimization if -g is not specified.

         -qwarn64 | -qnowarn64
                Enables checking for possible data conversion
                problems between 32-bit and 64-bit compiler modes.
                The default is -qnowarn64.

  Listing and Message Options
         -V     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a space-separated list.

         -v     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a comma-separated list.

         -w     Suppresses warnings and lower-level messages.
                Specifying this option is equivalent to specifying
                -qflag=e:e.

         -qattr[=full] | -qnoattr
                Produces a compiler listing that includes an
                attribute listing for all identifiers. If -qattr is
                specified, the listing contains only those
                identifiers that are used. If -qattr=full is
                specified, the listing contains all names. If
                -qnoattr is specified, no listing is produced.  The
                default is -qnoattr.

         -qdump_class_hierarchy
                for each class object, this option dumps a
                representation of its hierarchy and virtual
                function table layout to a file. The file name is
                created by appending ".class" to the source file
                name.

         -qflag=<listing_severity>:<terminal_severity>
                Defines the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> is the
                minimum level for the listing file, and
                <terminal_severity> is the minimum level for the
                terminal.  The message severity levels are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qflag=i:i.

         -qformat=<options_list> | -qnoformat
                Warns of possible problems with string input and
                output format specifications. Functions diagnosed
                are printf, scanf, strftime, strfmon family
                functions and functions marked with format
                attributes. <options_list> is a comma-separated
                list of one or more of the following suboptions:

                all | noall
                     Turns on all format diagnostic messages.
                exarg | noexarg
                     Warns if excess arguments appear in printf and
                     scanf style function calls.
                nlt | nonlt
                     Warns if a format string is not a string
                     literal, unless the format function takes its
                     format arguments as a va_list.
                sec | nosec
                     Warns of possible security problems in use of
                     format functions.
                y2k | noy2k
                     Warns of strftime formats that produce a 2-
                     digit year.
                zln | nozln
                     Warns of zero-length formats.

                The default is -qnoformat, which is equivalent to
                -qformat=noall. If -qformat is specified without
                any suboptions, the default is -qformat=all.

         -qhalt=<sev>
                Stops the compiler after the first phase if the
                severity level of errors detected equals or exceeds
                the specified level, <sev>.  The severity levels in
                increasing order of severity are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qhalt=s.

         -qinfo[=[<suboption>][<groups_list>]] | -qnoinfo
                Produces informational messages. <groups_list> is a
                colon-separated list. If a <groups_list> is
                specified along with a <suboption>, a colon must
                separate them. The suboptions are:

                all | noall
                     Turns on all diagnostic messages for all
                     groups.  Specifying 'noall' turns off all
                     diagnostic messages for specific portions of
                     your program.
                private
                     Lists shared variables that are made private
                     to a parallel loop.
                reduction
                     Lists variables that are recognized as
                     reduction variables inside a parallel loop.

                Also:
                <groups_list>
                     Turns on or off specific groups of messages,
                     where <groups_list> is a colon-separated list
                     of one or more of the following:

                     c99 | noc99
                          C code that might behave differently
                          between C89 and C99 language levels
                     cmp | nocmp
                          Possible redundancies in unsigned
                          comparisons
                     cnd | nocnd
                          Possible redundancies or problems in
                          conditional expressions
                     cns | nocns
                          Operations involving constants
                     cnv | nocnv
                          Conversions
                     dcl | nodcl
                          Consistency of declarations
                     eff | noeff
                          Statements and pragmas with no effect
                     enu | noenu
                          Consistency of enum variables
                     ext | noext
                          Unused external definitions
                     gen | nogen
                          General diagnostic messages
                     gnr | nognr
                          Generation of temporary variables
                     got | nogot
                          Use of goto statements
                     ini | noini
                          Possible problems with initialization
                     inl | noinl
                          Functions not inlined
                     lan | nolan
                          Language level effects
                     obs | noobs
                          Obsolete features
                     ord | noord
                          Unspecified order of evaluation
                     par | nopar
                          Unused parameters
                     por | nopor
                          Non-portable language constructs
                     ppc | noppc
                          Possible problems with using the
                          preprocessor
                     ppt | noppt
                          Trace of preprocessor actions
                     pro | nopro
                          Missing function prototypes
                     rea | norea
                          Code that cannot be reached
                     ret | noret
                          Consistency of return statements
                     trd | notrd
                          Possible truncation or loss of data or
                          precision
                     tru | notru
                          Variable names truncated by the compiler
                     trx | notrx
                          Rounding of hexadecimal floating-point
                          constants
                     uni | nouni
                          Uninitialized variables
                     upg | noupg
                          Upgrade issues from one release to the
                          next release
                     use | nouse
                          Unused auto and static variables
                     zea | nozea
                          Zero-extent arrays

                The default is -qnoinfo.
                If -qinfo is specified with no suboptions, the
                default is -qinfo=all.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                The default is -qnolist.

         -qlistopt | -qnolistopt
                Produces a compiler listing that displays all the
                options that were in effect when the compiler was
                invoked.  The default is -qnolistopt.

         -qphsinfo | -qnophsinfo
                Reports the time taken in each compilation phase.
                Phase information is sent to standard output.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qprint | -qnoprint
                Enables or suppresses listings. Specifying
                -qnoprint overrides all listing-producing options,
                regardless of where they are specified, to suppress
                listings.  The default is -qprint.

         -qreport | -qnoreport
                Instructs the compiler to produce transformation
                reports that show how program loops are
                parallelized and/or optimized. The transformation
                reports are included as part of the compiler
                listing.  This option requires either -qhot, -qsmp,
                or -qipa=clonearch in order to have effect.  The
                default is -qnoreport.

         -qshowinc[=<types_list>] | -qnoshowinc
                Used with -qsource to selectively show user header
                files (includes using " ") or system header files
                (includes using < >) in the program source listing.
                <types_list> is a colon-separated list of one or
                more of the following types:

                usr | nousr
                     Specifies whether to show user include files
                sys | nosys
                     Specifies whether to show system include files
                all
                     Shows both user and system include files

                The default is -qnoshowinc.

         -qsource | -qnosource
                Produces a compiler listing and includes source
                code.  The default is -qnosource.

         -qsrcmsg | -qnosrcmsg
                Adds the corresponding source code lines to the
                diagnostic messages in the stderr file.  The
                default is -qnosrcmsg.

         -qsuppress[=<msg_list>] | -qnosuppress
                Prevents the specified compiler or driver
                informational or warning messages from being
                displayed or added to the listings, where
                <msg_list> is a colon-separated list of message
                numbers that will not be displayed.  The default is
                -qnosuppress.

         -qtabsize=<size>
                Changes the length of tabs as perceived by the
                compiler, where <size> is the number of character
                spaces representing a tab in the source program.
                The default is -qtabsize=8.

         -qversion
                Displays information on the compiler version. It
                will output (to STDOUT) the official compiler
                product name and the compiler version found on the
                system. You can specify -qversion outside of a
                compilation (xlc -qversion) or as part of a
                compilation, but compilation will not occur.

         -qwarnfourcharconsts | -qnowarnfourcharconsts
                Issues diagnostic messages when the compiler finds
                four-character constants in the program source.
                The default is -qnowarnfourcharconsts.

         -qxref[=full] | -qnoxref
                Specifies whether to produce a compiler listing
                that includes a cross-reference listing of all
                identifiers. Specifying -qxref will report only
                identifiers that are used, -qxref=full reports all
                identifiers in the program, and -qnoxref does not
                report any identifiers in the program. The
                -qnoprint option overrides this option.  The
                default is -qnoxref.

  Compatibility Options
  Linking Options
         -b{dynamic|shared|static}
                Controls how shared objects are processed by the
                linkage editor.  The suboptions are:

                dynamic, shared
                     Causes the linker to process subsequent shared
                     objects in dynamic mode. This is the default.
                     In dynamic mode, shared objects are not
                     statically included in the output file.
                     Instead, the shared objects are listed in the
                     loader section of the output file.
                static
                     Causes the linker to process subsequent shared
                     objects in static mode. In static mode, shared
                     objects are statically linked in the output
                     file.

         -bmaxdata=<num>
                Sets the maximum size of the area shared by the
                static data (both initialized and uninitialized)
                and the heap to <num> bytes. This value is used by
                the system loader to set the soft ulimit. The
                default is -bmaxdata=0.

         -brtl  Enables runtime linking for the output file. Do not
                specify the -brtl compiler option if you are
                invoking the compiler with xlc_r4 or if the
                -qheapdebug compiler option is specified.

         -e <name>
                Sets the entry name for a shared executable.  This
                option is only used together with -qmkshrobj.

         -f<filename>
                Names a file to store a list of object files for
                the compiler to pass to the linker. The <filename>
                file should contain only the names of object files.
                There should be one object file per line.

         -G     Tells the linkage editor to create a shared object
                enabled for runtime linking.

         -L<dir>
                Searches the path directory for library files
                specified by the -l<key> option.  The default is to
                search only the standard directories.

         -l<key>
                Searches the file lib<key>.so and then lib<key>.a
                for dynamic linking, or only lib<key>.a for static
                linking. The default is to search only some of the
                compiler runtime libraries.

         -r     Produces a relocatable object. This permits the
                output file to be produced even though it contains
                unresolved symbols.

         -Z<prefix>
                This linker option specifies a prefix for the
                library search path. This is useful when developing
                a new version of a library.

         -qinlglue | -qnoinlglue
                Generates fast external linkage by inlining the
                pointer glue code necessary to make a call to an
                external function or a call through a function
                pointer.  The default is -qnoinlglue.

         -qmkshrobj
                Creates a shared object from the generated object
                files.  See the XL C Compiler Reference for more
                information.

  Compiler Customization Options
         -B[<prefix>]
                Determines substitute path names for programs used
                during compilation, such as the compiler,
                assembler, linkage editor, and preprocessor, where
                <prefix> can be any program name recognized by the
                -t compiler option. The optional <prefix> defines
                part of a path name to the new programs. The -t
                parameter, <program>, specifies the program to
                which the <prefix> is to be appended.  When
                specifying <prefix>, there must be a slash (/)
                after the folder name.

         -F[<config_file>][:<stanza>]
                Names an alternative configuration file (.cfg) for
                the compiler.  <config_file> is the name of a
                compiler configuration file.  <stanza> is the name
                of the command used to invoke the compiler. This
                directs the compiler to use the entries under
                <stanza> in the <config_file> to set up the
                compiler environment. At least one of the arguments
                must be supplied.

         -t<programs_list>
                Applies the prefix from the -B option to the
                specified programs in <programs_list>.
                <programs_list> is a chain (ie: -tbcI) of one or
                more of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -W<program>,<options_list>
                Gives the specified option(s) to the compiler
                program, <program>. <options_list> is a comma-
                separated list of one or more options. <program>
                can be one of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -qasm_as[='<asm_path> [<flags_list>]'] | -qnoasm_as
                Specifies the path and flags used to invoke the
                assembler in order to handle assembler code in an
                asm statement. <asm_path> is the full path to the
                assembler to be used, and <flags_list> is a series
                of one or more flags (and their arguments),
                separated by spaces. Please note that single quotes
                (or double quotes) are required around the string
                of arguments if any spaces exist.

         -qexpfile=<filename>
                Saves the exported symbols in the specified file.
                This option is used only together with the
                -qmkshrobj compiler option.  For more information,
                see -qmkshrobj.

         -qmaxmem=<num>
                Limits the amount of memory used by certain
                memory-intensive optimizations to <num> kilobytes.
                When <num> is -1, the optimizer will use as much
                memory as needed.  By default -qmaxmem=8192 when
                -O2 level optimization is in effect and -qmaxmem=-1
                when -O3 level or greater optimization is in
                effect.

         -qpath=<program>:<path>
                Constructs alternate program names for compiler
                components. The program and directory path
                specified are used in place of the regular program.
                <program> can be one of the following:

                a = assembler
                b = compiler backend
                c = compiler frontend
                I = interprocedural analysis - compile phase
                L = interprocedural analysis - link phase
                l = linkage editor
                p = compiler preprocessor

         -qtls[=<model>] | -qnotls
                Specifies the thread-local storage model to be used
                by the application, where <model> can be:

                global-dynamic
                initial-exec
                local-exec
                local-dynamic

                If the -qnopic compiler option is in effect, the
                default is initial_exec.  If the -qpic compiler
                option is in effect, the default is global_dynamic.

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies the compile-time rounding mode of
                constant floating-point expressions, where
                <rounding_mode> is one of the following:

                m = round toward minus infinity
                n = round to the nearest representable number
                p = round toward plus infinity
                z = round toward zero.

                The default is -yn.

         -qfloat=<suboptions_list>
                Specifies various floating-point suboptions. This
                provides different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following:

                emulate | noemulate
                     Emulates the floating-point instructions
                     omitted by the PowerPC 403(TM) processor.
                     Function calls are emitted in place of PowerPC
                     floating-point instructions.  Use this option
                     only in a single-threaded stand-alone
                     environment, targeting the PowerPC 403
                     processor.  Do not use -qfloat=emulate with
                     any of the following invocation commands:
                      * -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                      * -qlongdouble, -qldbl128
                      * xlc128
                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using faster inline code that
                     does not check for overflows. This suboption
                     must only be used with an optimization option.
                     -qfloat=nofltint checks floating-point-to-
                     integer conversions for out-of-range values.
                fold | nofold
                     Specifies that constant floating-point
                     expressions are to be evaluated at compile
                     time rather than at run time.
                hsflt | nohsflt
                     The hsflt option speeds up calculations by
                     truncating instead of rounding computed values
                     to single precision before storing and on
                     conversions from floating-point to integer.
                     The nohsflt suboption specifies that single-
                     precision expressions are rounded after
                     expression evaluation and that floating-
                     point-to-integer conversions are to be checked
                     for out-of-range values.
                hssngl | nohssngl
                     The hssngl option specifies that single-
                     precision expressions are rounded only when
                     the results are stored into float memory
                     locations. The nohssngl option specifies that
                     single-precision expressions are rounded after
                     expression evaluation. Using hssngl can
                     improve runtime performance and is safer than
                     using -qfloat=hsflt.
                maf | nomaf
                     Makes floating-point calculations faster and
                     more accurate by using floating-point
                     multiply-add instructions where appropriate.
                nans | nonans
                     Generates extra instructions to detect
                     signalling NaN when converting from single-
                     precision to double-precision at run time. The
                     option nonans specifies that this conversion
                     need not be detected.
                relax | norelax
                     Relaxes the strict IEEE-conformance slightly
                     for greater speed, typically by removing some
                     trivial, floating-point arithmetic operations,
                     such as adds and subtracts involving a zero on
                     the right.
                rndsngl | norndsngl
                     Specifies that the result of each single-
                     precision (float) operation is to be rounded
                     to single precision. -qfloat=norndsngl
                     specifies that rounding to single-precision
                     happens only after full expressions have been
                     evaluated.
                rrm | norrm
                     Prevents floating-point optimizations that are
                     incompatible with runtime rounding to plus and
                     minus infinity modes.
                rsqrt | norsqrt
                     Specifies whether a division by the result of
                     a square root can be replaced with a multiply
                     by the reciprocal of the square root.
                     -qfloat=rsqrt has no effect unless -qignerrno
                     and -qarch=pwr2 are also specified.
                spnans | nospnans
                     Detects signalling NaN on conversion from
                     single-precision to double-precision.

                The default suboptions are: nospnans, norsqrt (at
                -O2 optimization), rsqrt (at -O3 optimization),
                norrm, norndsngl, norelax, nonans, maf, nohssngl,
                nohsflt, fold, nofltint (at -O2 optimization),
                fltint (at -O3 or greater optimization), and
                noemulate.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Generates instructions to detect and trap runtime
                floating-point exceptions.  <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                overflow
                     Generates code to detect and trap floating-
                     point overflow.
                underflow
                     Generates code to detect and trap floating-
                     point underflow.
                zerodivide
                     Generates code to detect and trap floating-
                     point division by zero.
                invalid
                     Generates code to detect and trap floating-
                     point invalid operation exceptions.
                inexact
                     Generates code to detect and trap floating-
                     point inexact exceptions.
                enable
                     Enables the specified exceptions in the
                     prologue of the main program.
                imprecise
                     Generates code for imprecise detection of the
                     specified exceptions. If an exception occurs,
                     it is detected, but the exact location of the
                     exception is not determined.
                nanq | nonanq
                     Generates code to detect and trap NaNQ (Not a
                     Number Quiet) exceptions handled or generated
                     by floating-point operations.


         -qfold | -qnofold
                This option is obsolete. Use -qfloat=fold in your
                new applications. Specifies that constant
                floating-point expressions are to be evaluated at
                compile time.  The default is -qfold.

         -qhsflt | -qnohsflt
                This option is obsolete. Use -qfloat=hsflt in your
                new applications. Speeds up calculations by
                removing range-checking on single-precision float
                results, and on conversions from floating-point to
                integer. -qnohsflt specifies that single-precision
                expressions are rounded after expression
                evaluation, and that floating-point-to-integer
                conversions are to be checked for out-of-range
                values.  The default is -qnohsflt.

         -qhssngl | -qnohssngl
                This option is obsolete. Use -qfloat=hssngl in your
                new applications. Specifies that single-precision
                expressions are rounded only when the results are
                stored into float memory locations. -qnohssngl
                specifies that single-precision expressions are
                rounded after expression evaluation.  The default
                is -qnohssngl.

         -qldbl128 | -qnoldbl128
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qlongdouble.  The default is -qnoldbl128.

         -qlongdouble | -qnolongdouble
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qldbl128.  The default is -qnolongdouble.

         -qlonglit | -qnolonglit
                Makes unsuffixed literals into the long type in
                64-bit mode.  The default is -qnolonglit.

         -qlonglong | -qnolonglong
                Allows long long integers.  When compiling with xlc
                or cc the default is -qlonglong. When compiling
                with c89, the default -qnolonglong.

         -qmaf | -qnomaf
                This option affects the precision of floating-point
                intermediate results. This option is obsolete. Use
                -qfloat=maf in your new applications. -qmaf
                specifies whether floating-point multiply-add
                instructions are to be generated. The default is
                -qmaf.

         -qrrm | -qnorrm
                This option is obsolete. Use -qfloat=rrm in your
                new applications. Prevents floating-point
                optimizations that are not compatible with runtime
                rounding to plus and minus infinity modes. The
                default is -qnorrm.

  ENVIRONMENT VARIABLES
         OBJECT_MODE
                Changes the compilation mode behavior, unless
                overridden by configuration file or command-line
                options.

                32
                     32-bit compiler mode.
                64
                     64-bit compiler mode.
                32_64
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.
                (not set)
                     32-bit compiler mode.
                (anything else)
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.

         PATH   Specifies the directory search path for the
                executable files of the compiler.

         MANPATH
                Specifies the directory search path for finding
                manual pages.

         OBJECT_MODE
                Specifies the default compilation mode to 32-bit or
                64-bit.

         LANG   Specifies the national language for message and
                help files.

         NLSPATH
                Specifies the path of the message and help files.

         PDFDIR Specifies the directory in which the profile data
                file is created.

         TMPDIR Specifies the directory in which temporary files
                are created. The default is /tmp.

         XLNOCLONEARCH
                Instructs the program to only execute the generic
                code (code that is not versioned for a particular
                architecture).

         XLSMPOPTS
                Sets options for programs using loop
                parallelization.
                e.g. XLSMPOPTS=PARTHDS=4:SCHEDULE=DYNAMIC=5

  SEE ALSO
         vacndi(1), gxlc(1), showpdf(1), mergepdf(1), resetpdf(1)
         cleanpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/caix/library/
         www.ibm.com/software/awdtools/caix/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL C Enterprise Edition V8.0 for AIX(R)

         5724-M11

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.




























unlink: /tmp/xlcW0eZ35aa
unlink: /tmp/xlcW1eZ35ab
unlink: /tmp/xlcW2eZ35ac
configure:4427: $? = 249
configure:4434: xlc -V >&5
export XL_CONFIG=/etc/vac.cfg:xlc 
/usr/bin/pg /usr/vac/exe/default_msg/vac.txt 



  xlc(1)                 IBM (October 2005)                  xlc(1)



  NAME
         xlc, cc, c89, c99 and related commands - invoke the IBM XL
         C compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

         The invocation commands are:
         xlc, cc, c89, c99, xlc128, cc128, c89_128, c99_128,
         optionally followed by _r, _r4, or _r7.

  DESCRIPTION
         xlc and related commands compile C source files.  They
         also process assembler source files and object files. The
         compiler calls the link editor to produce a single
         executable or shared library, unless you specify the
         compiler options that prevent object files from being
         linked.

         The input file may have any of the following suffixes:
          .c = C source file
          .i = preprocessed C source file
          .a = archive file
          .o = object file for ld command
          .s = assembler source file
          .S = assembler source file that needs preprocessing

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -C     Preserves comments in preprocessed output if used
                with -E or -P. With the -E option, comments are
                written to standard output; with the -P option,
                comments are written to an output file.

         -D<name>[=[<def>]]
                Defines <name> as in the #define directive. <def>
                is an optional definition or value assigned to
                <name>. Specifying "-D<name>=" (with no <def>) is
                equivalent to "#define <name>"; specifying "-
                D<name>" is equivalent to "#define <name> 1".

         -I<dir>
                Specifies an additional search path for include
                filenames that do not specify an absolute path.

         -U<name>
                Undefines the identifier <name> defined by the
                compiler or by the -D<name> option.

         -qaltivec | -qnoaltivec
                Enables compiler support for vector data types.
                Instructs the compiler to support vector data types
                and operators and is accepted when the architecture
                specified by -qarch option supports VMX
                instructions and -qenablevmx is in effect.  The
                default is -qnoaltivec.

         -qasm[=gcc] | -qnoasm[=gcc]
                Controls the interpretation of, and subsequent
                generation of code for, asm statements.  If 'gcc'
                is specified, the compiler will interpret asm
                statements using gcc syntax.

                The default is -qasm=gcc.

         -qcpluscmt | -qnocpluscmt
                Permits the usage of "//" to introduce a comment
                that lasts until the end of the current source
                line, as in C++.  The default is -qcpluscmt when
                you invoke the compiler with xlc, xlc_r, cc, or
                cc_r, or when -qlanglvl is set to stdc99 or extc99.
                Otherwise, the default setting is -qnocpluscmt.

         -qdbcs | -qnodbcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qmbcs.  The default is -qnodbcs.

         -qdigraph | -qnodigraph
                Allows usage of digraph key combinations or
                keywords to represent characters not found on some
                keyboards.
                The default is -qdigraph when -qlanglvl is extc89,
                extended, extc99 or stdc99. Otherwise the default
                is -qnodigraph.

         -qdollar | -qnodollar
                Allows the '$' symbol to be used in the names of
                identifiers. When -qdollar is in effect, the dollar
                symbol '$' in an identifier is treated as a base
                character. If the options -qnodollar and
                -qlanglvl=ucs are both in effect, the dollar symbol
                is treated as an extended character.  The default
                is -qnodollar.

         -qidirfirst | -qnoidirfirst
                Specifies the search order for files included with
                the #include "<filename>" directive.  Use
                -qidirfirst with the -I option.  If -qidirfirst is
                specified, the directories specified by the
                -I<directory> option are searched before the
                directory in which the current file resides.  The
                default is -qnoidirfirst.

         -qignprag=<option>
                Instructs the compiler to ignore certain pragma
                statements.  The options are:

                disjoint
                     Ignores all #pragma disjoint directives in the
                     source file.
                isolated
                     Ignores all #pragma isolated_call directives
                     in the source file.
                all
                     Ignores all #pragma isolated_call directives
                     and #pragma disjoint directives in the source
                     file.
                omp
                     Ignores all OpenMP parallel processing
                     directives in the source file.
                ibm
                     Ignores IBM parallel processing directives.

         -qkeyword=<keyword> | -qnokeyword=<keyword>
                Controls whether the specified name is treated as a
                keyword or as an identifier whenever it appears in
                a program source.  By default all the built-in
                keywords defined in the C language standards are
                reserved as keywords. However, you can use
                -qnokeyword=<keyword> to disable built-in keywords,
                and use -qkeyword=<keyword> to reinstate those
                keywords.

         -qlanglvl=<suboptions_list>
                Selects the language level and language options for
                the compilation. <suboptions_list> is a colon-
                separated list of suboptions.  The suboptions are:

                classic
                     Allows the compilation of non-stdc89 programs,
                     and conforms closely to the K&R level
                     preprocessor.
                extended
                     Provides compatibility with the RT compiler
                     and classic. This language level is based on
                     C89.
                saa
                     Compilation conforms to the current SAA(R) C
                     CPI language definition. This is currently SAA
                     C Level 2.
                saal2
                     Compilation conforms to the SAA C Level 2 CPI
                     language definition, with some exceptions.
                stdc89
                     Compilation conforms to the ANSI C89 standard,
                     also known as ISO C90.
                stdc99
                     Compilation conforms to the ISO C99 standard.
                extc89
                     Compilation conforms to the ANSI C89 standard,
                     and accepts implementation-specific language
                     extensions.
                extc99
                     Compilation conforms to the ISO C99 standard,
                     and accepts implementation-specific language
                     extensions.
                ucs | noucs
                     This option controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in program
                     source code.  Under language levels stdc99 and
                     extc99, the default is -qlanglvl=ucs.


                The default depends on the invocation command used:

                COMMAND         DEFAULT
                xlc             extc89
                cc              extended
                c89             stdc89
                c99             stdc99

         -qmacpstr | -qnomacpstr
                Converts Pascal string literals into null-
                terminated strings where the first byte contains
                the length of the string.  The default is
                -qnomacpstr.

         -qmbcs | -qnombcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qdbcs.  The default is -qnombcs.

         -qpascal | -qnopascal
                Specifies whether to recognize and accept the
                keyword 'pascal' in type specifiers and function
                declarations.  The default is -qnopascal.

         -qsourcetype=<type>
                Determines whether to treat all recognized source
                files as if they are of the source type specified
                by <type> (regardless of filename suffix), or
                whether to use the filename suffix to determine the
                programming language. The options are:

                default
                     The compiler assumes that the programming
                     language of a source file will be implied by
                     its filename suffix.
                c
                     The compiler compiles all source files
                     following this option as if they are C
                     language source files.
                c++
                     The compiler compiles all source files
                     following this option as if they are C++
                     language source files.
                assembler
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files.
                assembler-with-cpp
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files that need preprocessing.

                The default is -qsourcetype=default.

         -qstdinc | -qnostdinc
                Specifies which directories are used for files
                included by the #include <file_name> and #include
                "file_name" directives. The -qnostdinc option
                excludes the standard include directories from the
                search path.  The default is -qstdinc.

         -qsyntaxonly
                Performs syntax checking without generating an
                object file.

         -qtrigraph | -qnotrigraph
                Allows trigraph key combinations to represent
                characters not found on some keyboards.
                The default is qtrigraph, however if
                -qlanglvl=classic is in effect or implied, the
                trigraphs are not recognized by default.

         -qutf | -qnoutf
                Enables recognition of UTF literal syntax.  The
                default is -qnoutf.

  Output Control Options
         -#     Traces the compilation and generates information on
                the progress of the compilation without invoking
                the preprocessor, compiler, or linkage editor.

         -c     Instructs the compiler to pass source files to the
                compiler only. Compiled source files are not sent
                to the linkage editor.

         -E     Instructs the compiler to preprocess the source
                files and send preprocessed source to standard
                output.

         -M     Creates an output file that contains information to
                be included in a "make" description file. This is
                equivalent to specifying -qmakedep without a
                suboption.

         -MF<file>
                Specifies the target for the output generated by
                the -qmakedep or -M options, where <file> is the
                target output filepath. Note that "-MF <file>"
                (with a space before the argument) is also
                acceptable. This option only has effect when
                specified with -qmakedep or -M.

         -ma    Substitutes inline code for calls to function
                alloca.

         -o <filespec>
                Specifies an output location for the object,
                assembler, or executable files created by the
                compiler. When the -o option is used during
                compiler invocation, <filespec> can be the name of
                either a file or a directory.  The default name is
                a.out.

         -P     Preprocesses the C source files named in the
                compiler invocation and creates an output
                preprocessed source file, <filename.i> for each
                input source file.  The default is to compile and
                link-edit C source files to produce an executable
                file.

         -S     Generates an assembler language file (.s) for each
                source file. The resulting .s files can be
                assembled to produce object .o files or an
                executable file (a.out).

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -q32,-q64
                Selects either 32-bit or 64-bit compilation mode.
                Use the -q32 and -q64 options, along with the
                -qarch and -qtune compiler options, to optimize the
                output of the compiler to the architecture on which
                that output will be used. The default is -q32.

         -qalign=<option>
                Specifies what aggregate alignment rules the
                compiler uses for file compilation, where the
                alignment options are:

                bit_packed
                     The compiler uses the bit_packed alignment
                     rules.
                full
                     The compiler uses the RISC System/6000
                     alignment rules. This is the same as power.
                mac68k
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.
                natural
                     The compiler maps structure members to their
                     natural boundaries.
                packed
                     The compiler uses the packed alignment rules.
                power
                     The compiler uses the RISC System/6000
                     alignment rules.
                twobyte
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.  The mac68k option is the
                     same as twobyte.

                The default is -qalign=full.

         -qalloca
                Substitutes inline code for calls to function
                alloca, as if #pragma alloca directives were in the
                source code.

         -qbitfields={signed|unsigned}
                Specifies whether bit fields will be signed or
                unsigned.  The default is -qbitfields=unsigned.

         -qchars={signed|unsigned}
                Specifies whether the data type char will be signed
                or unsigned.  The default is -qchars=unsigned.

         -qenablevmx | -qnoenablevmx
                Enables generation of VMX (Vector Multimedia
                Extension) instructions.  The default is
                -qnoenablevmx.

         -qenum=<option>
                Specifies the amount of storage occupied by
                enumerations, where <option> is:

                small
                     Specifies that enumerations occupy the
                     smallest amount of space (1, 2, 4, or 8 bytes)
                     that can accurately represent the range of
                     values in the enumeration.  Signage is
                     unsigned, unless the range of values includes
                     negative values.
                int
                     Specifies that enumerations occupy 4 bytes and
                     are represented by int.
                intlong
                     Specifies that enumerations occupy 8 bytes of
                     storage if the range of values in the
                     enumeration exceeds the limit for int.
                     Otherwise, the enumerations occupy 4 bytes of
                     storage and are represented by int.
                1
                     Specifies that enumerations occupy 1 byte.
                     Type is signed or unsigned char.
                2
                     Specifies that enumerations occupy 2 bytes.
                     Type is signed or unsigned short.
                4
                     Specifies that enumerations occupy 4 bytes.
                     Type is signed or unsigned int.
                8
                     Specifies that enumerations occupy 8 bytes.
                     Type is signed or unsigned long long in 32-bit
                     mode, and signed or unsigned long in 64-bit
                     mode.

         -qfuncsect | -qnofuncsect
                Places instructions for each function in a separate
                object file control section or csect.  The default
                is -qfuncsect.

         -qmakedep[=gcc]
                Creates an output file that contains targets
                suitable for inclusion in a description file for
                the make command that describes the dependencies of
                the main source file in the compilation.
                Specifying 'gcc' changes the format of the
                generated dependency file. Specifying -qmakedep
                without 'gcc' is equivalent to specifying -M.

         -qpic[={small|large}]
                Instructs the compiler to generate position-
                independent code suitable for use in shared
                libraries.

                small
                     Instructs the compiler to assume that the size
                     of the global offset table is no larger than
                     64 Kb.
                large
                     Allows the global offset table to be larger
                     than 64 Kb in size, allowing more addresses to
                     be stored in the table.

                The -qpic option is implied if either of the -G or
                -qmkshrobj compiler options is specified.  The
                default is -qpic=small.

         -qppline | -qnoppline
                Enables generation of #line directive in the
                preprocessed output.  If the -P option is enabled,
                the default is -qnoppline. Otherwise, the default
                is -qppline.

         -qreserved_reg=<registers_list>
                Indicates that the specified register(s) cannot be
                used during the compilation, except as a stack
                pointer, frame pointer or in a different fixed
                role. <registers_list> is a colon-separated list of
                registers. You should use this option in modules
                that are required to work with other modules that
                use global register variables or hand-written
                assembler code.

         -qro | -qnoro
                Specifies the storage type for string literals and
                puts string literals in read-only storage.  The
                default with cc and its derivatives is -qnoro,
                otherwise the default is -qro.

         -qroconst | -qnoroconst
                Specifies the storage location for constant values.
                Puts constant values in read-only storage.  The
                default with xlc and c89 compiler invocations is
                -qroconst, and the default with cc is -qnoroconst.

         -qroptr | -qnoroptr
                Specifies the storage location for constant
                pointers. This options requires AIX V5.2 or
                greater.  The default is -qnoroptr.

         -qsaveopt | -qnosaveopt
                Saves command line options in the corresponding
                object files.  The default is -qnosaveopt.

         -qstatsym | -qnostatsym
                Adds user-defined, non-external names that have a
                persistent storage class (such as initialized and
                uninitialized static variables) to the name list.
                The default is -qnostatsym.

         -qthreaded | -qnothreaded
                Ensures that all optimizations will be thread-safe
                for executing in a multi-threaded environment.  The
                default is -qthreaded when compiling invocation
                commands ending in "_r", and -qnothreaded
                otherwise.

         -qupconv | -qnoupconv
                Preserves the unsigned specification when
                performing integral promotions.  The default is
                -qupconv when -qlanglvl=extc89, and -qnoupconv
                otherwise.

         -qweaksymbol | -qnoweaksymbol
                Instructs the compiler to generate weak symbols.
                The default is -qnoweaksymbol on AIX 5.1, and
                -qweaksymbol on AIX 5.2 and higher.

         -qxcall | -qnoxcall
                Generates code to treat static functions within a
                compilation unit as if they were external
                functions.  The default is -qnoxcall.

  Optimization Options
         -O[<level>]
                Optimizes code at a choice of levels during
                compilation. This is equivalent to
                -qoptimize[=<level>]. <level> can be:

                0
                     Performs only quick local optimizations such
                     as constant folding and elimination of local
                     common subexpressions.
                2
                     Performs optimizations that the compiler
                     developers considered the best combination for
                     compilation speed and runtime performance. The
                     optimizations may change from product release
                     to release.
                3
                     Performs some memory and compile-time
                     intensive optimizations in addition to those
                     executed with -O2.  The -O3 specific
                     optimizations have the potential to alter the
                     semantics of a program.  The compiler guards
                     against these optimizations at -O2 and the
                     option -qstrict is provided at -O3 to turn off
                     these aggressive optimizations. Specifying -O3
                     will set -qhot=level=0.
                4
                     This option is the same as -O3, but also:
                     - Sets the -qarch and -qtune options to the
                     architecture of the compiling machine.
                     - Sets the -qcache option most appropriate to
                     the characteristics of the compiling machine.
                     - Sets the -qipa option.
                     - Sets the -qhot option to level=1.
                5
                     Equivalent to -O4 -qipa=level=2.

                The default is -O0. Specifying -O with no <level>
                is equivalent to specifying -O2.

         -Q[<suboption>]
                Specifies which specific functions the compiler
                should attempt to inline.

                This option can take the form:

                     -Q
                          Attempts to inline all appropriate
                          functions with 20 executable source
                          statements or fewer, subject to the
                          setting of any of the suboptions to the
                          -Q option. If -Q is specified last, all
                          functions are inlined.
                     -Q!
                          Does not inline any functions. If -Q! is
                          specified last, no functions are inlined.
                     -Q-<names_list>
                          Does not inline functions listed in
                          <names_list>, where <names_list> is a
                          colon-separated list. All other
                          appropriate functions are inlined. The
                          option implies -Q.
                     -Q+<names_list>
                          Attempts to inline the functions listed
                          in <names_list> and any other appropriate
                          functions. <names_list> is a colon-
                          separated list.  The option implies -Q.
                     -Q=<threshold>
                          Sets a size limit on the functions to be
                          inlined. The number of executable
                          statements must be less than or equal to
                          <threshold> for the function to be
                          inlined. <threshold> must be a positive
                          integer. The default value is 20.
                          Specifying a threshold value of 0 causes
                          no functions to be inlined except those
                          functions marked with the __inline,
                          _Inline, or _inline keywords.

                The default is to treat inline specifications as a
                hint to the compiler.

         -qaggrcopy={overlap|nooverlap}
                Enables destructive copy operations for structures
                and unions.  The default is -qaggrcopy=overlap when
                compiling to the EXTENDED and CLASSIC language
                levels, and -qaggrcopy=nooverlap otherwise.

         -qalias=<options_list>
                Specifies the aliasing assertions to be applied to
                your compilation unit. <options_list> is a colon-
                separated list of the following options:

                addrtaken | noaddrtaken
                     Variables are disjoint from pointers unless
                     their address is taken.
                allptrs | noallptrs
                     If noallptrs is specified, pointers are never
                     aliased.
                ansi | noansi
                     If ansi is specified, type-based aliasing is
                     used during optimization, which restricts the
                     lvalues that can be safely used to access a
                     data object. The default is ansi for the xlc
                     and c89 command and noansi for the cc
                     invocation commands.  This option has no
                     effect unless you also specify the -O option.
                typeptr | notypeptr
                     If notypeptr is specified, pointers to
                     different types are never aliased.

                The default is
                -qalias=noaddrtaken:noallptrs:typeptr:ansi.

         -qansialias | -qnoansialias
                This option is obsolete. Use -qalias=ansi in your
                new applications. See the -qalias=ansi suboption.
                The default is -qansialias with xlc, c99, and c89,
                and -qnoansialias with cc.

         -qarch=<option>
                Specifies the general processor architecture for
                which the code (instructions) should be generated.
                In general, the -qarch option allows you to target
                a specific architecture for the compilation. For
                any given -qarch setting, the compiler defaults to
                a specific, matching -qtune setting, which can
                provide additional performance improvements.  The
                suboptions are:

                auto
                     Generates instructions that will run on the
                     hardware platform on which the program is
                     compiled.
                com
                     In 32-bit mode, generates instructions that
                     will run on all the POWER and PowerPC hardware
                     platforms.  In 64-bit mode, these instructions
                     will run on 64-bit PowerPC processors but not
                     on 32-bit PowerPC processors.  This is the
                     default unless -q64, -O4, or -O5 are
                     specified.
                pwr
                     Generates instructions that will run on the
                     POWER, POWER2, and 601 hardware platforms.
                pwr2
                     Generates instructions that will run on the
                     POWER2 hardware platform.
                pwr3
                     Generates instructions that will run on a
                     POWER3, POWER4, POWER5, and POWERPC970 chip.
                pwr4
                     Generates instructions that will run on a
                     POWER4, POWER5, and POWERPC970 chip.
                pwr5
                     Generates object code containing instructions
                     that will run on the POWER5 hardware platform.
                pwr5x
                     Generates instructions that will run on any
                     POWER5+ hardware platform.
                ppc
                     In 32-bit mode, produces object code
                     containing instructions that will run on any
                     of the 32-bit PowerPC hardware platforms. This
                     suboption will cause the compiler to produce
                     single-precision instructions to be used with
                     single-precision data.  Specifying -qarch=ppc
                     together with -q64 quietly upgrades the -qarch
                     setting to -qarch=ppc64.
                ppcgr
                     In 32-bit mode, produces object code for
                     PowerPC processors that support optional
                     graphics instructions. Note that specifying
                     -q64 with -qarch=ppcgr will quietly upgrade
                     the -qarch setting to -qarch=ppc64gr.
                ppc64
                     Generates instructions that will run on any of
                     the 64-bit PowerPC hardware platform.
                ppc64v
                     Generates instructions for the 64-bit PowerPC
                     processor with VMX.
                ppc970
                     Generates instructions that will run on the
                     PPC970 hardware platform.
                ppc64gr
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics instructions.
                ppc64grsq
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics and square root instructions.
                pwr2s
                     Generates instructions that will run on POWER2
                     Chip desktop implementations.
                p2sc
                     Generates instructions that will run on a
                     POWER2 Super Chip.
                601
                     Generates instructions that will run on a 601
                     chip.
                602
                     Generates instructions that will run on a 602
                     chip.
                603
                     Generates instructions that will run on a 603
                     chip.
                604
                     Generates instructions that will run on a 604
                     chip.
                403
                     Generates instructions that will run on a 403
                     chip.
                rs64a
                     Generates instructions that will run on a
                     rs64I chip.
                rs64b
                     Generates instructions that will run on a
                     RS64II chip.
                rs64c
                     Generates instructions that will run on a
                     RS64III chip.

         -qassert=<suboption> | -qnoassert
                This option is obsolete. Use -qalias in your new
                applications. This option specifies the aliasing
                assertion to be applied to your compilation unit.
                The suboptions are:

                typeptr
                     Pointers to different types are never aliased.
                allptrs
                     Pointers are never aliased.
                addrtaken
                     Variables are disjoint from pointers unless
                     their address are taken.

                The default is -qnoassert.

         -qcache=<suboptions_list>
                Describes the cache configuration for a specific
                target execution machine, where <suboptions_list>
                is a colon-separated list of one or more of the
                following suboptions:

                assoc=<number>
                     Specifies the set associativity of the cache,
                     where <number> is one of the following:
                          0    Direct-mapped cache
                          1    Fully associative cache
                          (number > 1)   n-way set associative
                          cache
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. This
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty, in CPU
                     cycles, resulting from a cache miss.
                level=<level>
                     Specifies the level of cache affected, where
                     level is one of the following:
                          1     Basic cache
                          2     Level-2 cache or, if there is no
                                level-2 cache, the table lookaside
                                buffer (TLB)
                          3     TLB
                          If a machine has more than one level of
                          cache, use a separate -qcache option.
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<cache_type>
                     The settings apply to the specified type of
                     cache, where <cache_type> is one of the
                     following:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The -qtune setting determines the optimal default
                -qcache settings for most typical compilations.

         -qcompact | -qnocompact
                Reduces code size where possible, at the expense of
                execution speed. Code size is reduced by inhibiting
                optimizations that replicate or expand code inline.
                This option takes effect only if -O2 or higher is
                also used.  The default is -qnocompact.

         -qdataimported[=<names_list>]
                Specifies which data items are imported. If no
                names are specified, all data items are assumed to
                be imported.  <names_list> is a colon-separated
                list of data items.

         -qdatalocal[=<names_list>]
                Specifying -qdatalocal=<names_list> marks the named
                variables as local, where <names_list> is a colon-
                separated list of identifiers. Specifying
                -qdatalocal with no variables instructs the
                compiler to assume that all variables are local.

         -qdirectstorage | -qnodirectstorage
                Informs the compiler that write-through-enabled or
                cache-inhibited storage may be referenced.  The
                default is -qnodirectstorage.

         -qfdpr | -qnofdpr
                Collects information about programs for use with
                the AIX fdpr (Feedback Directed Program
                Restructuring) performance-tuning utility.  The
                default is -qnofdpr.

         -qhot[=<suboption>] | -qnohot
                Specifies whether or not to perform high-order
                transformations during optimization. The suboptions
                are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value.  Otherwise, the
                     compiler will pad any arrays where it infers
                     that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. -qhot=level=1 will
                     be equivalent to -qhot and the compiler
                     options that imply -qhot also imply
                     -qhot=level=1 unless -qhot=level=0 is
                     explicitly specified. See the Compiler
                     Reference for more information.
                simd | nosimd
                     The compiler converts certain operations that
                     are performed in a loop on successive elements
                     of an array into a call to a VMX (Vector
                     Multimedia Extension) instruction. This
                     suboption has effect only when the effective
                     architecture supports VMX instructions and you
                     specify -qenablevmx.
                vector | novector
                     When specified with -qnostrict and -qignerrno,
                     or an optimization level of -O3 or higher, the
                     compiler converts certain operations that are
                     performed in a loop on successive elements of
                     an array (for example, square root, reciprocal
                     square root) into a call to a Mathematical
                     Acceleration Subsystem (MASS) library vector
                     routine. This call will calculate several
                     results at one time, which is faster than
                     calculating each result sequentially.

                The default is -qnohot.

         -qignerrno | -qnoignerrno
                Allows the compiler to perform optimizations that
                assume errno is not modified by system calls.  The
                default is -qnoignerrno.

         -qinline[<suboption>] | -qnoinline
                Specifies whether to attempt to inline functions
                instead of generating calls to a function. This
                option can take the following forms:

                -qinline
                     The compiler attempts to inline all
                     appropriate functions with 20 executable
                     source statements or fewer, subject to any
                     other settings of the suboptions to the
                     -qinline option.
                -qinline=threshold=<num>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <num> for the
                     function to be inlined. <num> must be a
                     positive integer.
                -qinline+<names_list>
                     Attempts to inline the functions listed in
                     <names_list> and any other appropriate
                     functions, where <names_list> is a colon-
                     separated list.
                -qinline-<names_list>
                     Specifies that functions listed in
                     <names_list> do not get inlined, where
                     <names_list> is a colon-separated list.
                -qnoinline
                     Does not inline any functions.

                The default is to treat inline specifications as a
                hint to the compiler, and the result depends on
                other options that you select:  If you specify the
                -g option (to generate debug information), inlining
                may be affected.

         -qipa[=<suboptions_list>] | -qnoipa
                Turns on or customizes a class of optimizations
                known as interprocedural analysis (IPA).  Regular
                expressions are supported when specifying procedure
                names for these suboptions:  cloneproc,
                nocloneproc, exits, inline, noinline, isolated,
                lowfreq, pure, safe, unknown. <suboptions_list> is
                a colon-separated list of one or more of the
                following suboptions:

                clonearch=<architecture_list> | noclonearch
                     Allows you to specify a group of architectures
                     in case you want to compile your application
                     for multiple architectures with a single
                     binary file. <architecture_list> is a comma-
                     separated list of one or more of the following
                     architectures: pwr4, pwr5, and ppc970. When
                     -qcompact is in effect, -qarch=clonearch is
                     disabled. This must be specified during link
                     time.  The default is -qipa=noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of functions that you wish to clone (or not
                     clone). Please note that this suboption has no
                     effect unless -qipa=clonearch=<arch> is
                     specified.
                exits=<procedure_names_list>
                     Specifies names of functions which represent
                     program exits.  <procedure_names_list> is a
                     comma-separated list of procedures.
                infrequentlabel=<names_list>
                     Specifies a comma-separated list of user-
                     defined labels that are likely to be called
                     infrequently during a program run.
                inline[=<suboption>]
                     Specifying 'inline' with no suboption asserts
                     that all appropriate procedures will be
                     inlined. <suboption> can be one of the
                     following:
                     auto | noauto
                          Specifies whether or not to automatically
                          inline procedures.
                     <procedure_names_list>
                          Specifies a comma-separated list of
                          procedures to attempt to inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This only takes
                          effect when inline=auto is on.
                     <options_list>
                          The same as specifying
                          -qinline=<options_list>. <options_list>
                          is a comma-separated list of any
                          suboptions that belong to the -qinline
                          compiler option.
                noinline=<procedures_list>
                     Specifies a comma-separated list of procedures
                     which are not to be inlined.
                isolated=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that do
                     not directly refer to any global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization performed, where <level> can be
                     equal to:
                     0
                          Performs minimal interprocedural analysis
                          and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full interprocedural data flow and alias
                          analysis.
                     The default is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, if an object listing has been
                     requested using the -qlist option. The default
                     name is "a.lst". Specifying 'long' or 'short'
                     can be used to request more or less
                     information in the listing file to determine
                     which listing sections will be included. The
                     default is 'short'.
                lowfreq=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are likely to be called infrequently
                     during the course of a typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the default assumption for
                     procedures not compiled with -qipa.
                     unknown
                          Greatly restricts the amount of
                          interprocedural optimization for calls to
                          unknown functions.
                     safe
                          Functions which do not indirectly call a
                          visible (not missing) function either
                          through direct call or function pointer.
                     isolated
                          Functions which do not directly reference
                          global variables accessible to visible
                          functions.
                     pure
                          Functions which are safe and isolated and
                          which do not indirectly alter storage
                          accessible to functions.
                object | noobject
                     This is a compile-time option. It specifies
                     whether to include standard object code in the
                     object files. Specifying 'noobject' can
                     substantially reduce overall compile time by
                     not generating object code during the first
                     IPA phase.
                partition={small|medium|large}
                     Specifies the size of program sections that
                     are analyzed together. Larger partitions may
                     produce better analysis but require more
                     storage.
                pdfname[=<filename>] | nopdfname
                     Specifies the name of the profile data file
                     containing the PDF profiling information.  If
                     you do not specify <filename>, the default
                     file name is ._pdf.
                pure=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that are
                     "isolated", "safe", and do not modify any data
                     objects that are visible to the caller.
                safe=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that do not call
                     any other part of the program.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that may
                     update global variables and dummy arguments
                     and call other parts of the program compiled
                     with -qipa.
                <filename>
                     Specifies the name of a file that contains
                     suboption information in a special format.

                The default is -qnoipa.

         -qisolated_call=<function_names_list>
                Specifies functions in the source file that have no
                side effects, where <function_names> is a colon-
                separated list of function names.

         -qlargepage | -qnolargepage
                Exploits large page heaps that are available on
                Power 4 and Power 5 systems running AIX v5.1D or
                later.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C library function are in fact the library
                functions.  The default is -qnolibansi.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 | -qnopdf1
                Produces an object that is instrumented to collect
                runtime execution information. This is phase 1 of
                the profile-directed feedback optimization process.
                The default is -qnopdf1.

         -qpdf2 | -qnopdf2
                Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.  The default is
                -qnopdf2.

         -qprefetch | -qnoprefetch
                Enables generation of prefetching instructions such
                as dcbt and dcbz in compiled code.  The default is
                -qprefetch.

         -qprocimported[=<names_list>] | -qnoprocimported
                If no <names_list> is specified, it asserts that
                all functions are imported. Otherwise, only the
                named functions are marked as imported.
                <names_list> is a colon-separated list of function
                identifiers.

         -qproclocal[=<names_list>] | -qnoproclocal
                If no <names_list> is specified, it asserts that
                all functions are local. Otherwise, only the named
                functions are marked as local. <names_list> is a
                colon-separated list of function identifiers.

         -qprocunknown[=<names_list>] | -qnoprocunknown
                If no <names_list> is specified, it asserts that
                all functions are unknown. Otherwise, only the
                named functions are marked as unknown. <names_list>
                is a colon-separated list of function identifiers.

         -qshowpdf | -qnoshowpdf
                Used with -qpdf1 and a minimum optimization level
                of -O to add additional call and block count
                profiling information to an executable.  The
                default is -qnoshowpdf.

         -qsmallstack | -qnosmallstack
                Reduces the size of the stack frame.  This option
                is only valid when used together with IPA (-qipa,
                -O4, -O5 compiler options).  The default is
                -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Enables parallelization of program code.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization and
                     optimization. If noauto is specified,
                     automatic parallelization of program code is
                     disabled; only program code explicitly
                     parallelized with IBM SMP or OpenMP directives
                     is optimized.
                explicit | noexplicit
                     Enables explicit parallelization of loops.
                nested_par | nonested_par
                     Enables parallelization of nested parallel
                     constructs.
                omp | noomp
                     Enables strict OpenMP compliance. Only OpenMP
                     parallelization pragmas are recognized.
                opt | noopt
                     Enables automatic parallelization but disables
                     optimization of parallelized program code. If
                     noopt is specified, optimization of
                     parallelized program code is disabled.
                rec_locks | norec_locks
                     Specifies whether to use recursive locks.
                schedule=<type>
                     Specifies what kinds of scheduling algorithms
                     and chunking are used for loops to which no
                     other scheduling algorithm has been explicitly
                     assigned in the source code. <type> can be:
                     dynamic[=<num>]
                     guided[=<num>]
                     static[=<num>]
                     affinity[=<num>]
                     runtime

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, explicit, noomp, norec_locks, nonested_par,
                schedule=runtime.

         -qspill=<size>
                Specifies the size of the register allocation spill
                area in bytes.  The default is -qspill=512.

         -qstrict | -qnostrict
                Turns off aggressive optimizations which have the
                potential to alter the semantics of your program.
                -qstrict sets -qfloat=nofltint:norsqrt. -qnostrict
                sets -qfloat=rsqrt. This option is only valid with
                -O2 or higher optimization levels. The default is
                -qnostrict at -O3 or higher, and -qstrict
                otherwise.

         -qstrict_induction | -qnostrict_induction
                Turns off loop induction variable optimizations
                that have the potential to alter the semantics of
                your program.  The default is -qnostrict_induction
                at -O2 or higher and -qstrict_induction otherwise.

         -qtocdata | -qnotocdata
                Marks data as local.  The default is -qnotocdata.

         -qtocmerge | -qnotocmerge
                Reads from the file specified in -bImportfile
                linker option and merges the address information to
                access ranges of external addresses using a single
                table of contents entry.  The default is
                -qnotocmerge.

         -qtune=<suboption>
                Specifies the architecture system for which the
                executable program is optimized.  The suboptions
                are:

                auto
                     Generates object code optimized for the
                     hardware platform on which the program is
                     compiled.
                403
                     Generates object code optimized for all the
                     PowerPC 403 processors.
                601
                     Generates object code optimized for all the
                     PowerPC 601 processors.
                602
                     Generates object code optimized for all the
                     PowerPC 602 processors.
                603
                     Generates object code optimized for all the
                     PowerPC 603 processors.
                604
                     Generates object code optimized for all the
                     PowerPC 604 processors.
                p2sc
                     Generates object code optimized for all the
                     PowerPC P2SC processors.
                ppc
                     Generates object code optimized for 32-bit
                     POWERPC hardware platform.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                pwr
                     Generates object code optimized for the POWER
                     hardware platforms.
                pwr2
                     Generates object code optimized for the POWER2
                     hardware platform.
                pwr2s
                     Generates object code optimized for the POWER2
                     hardware platform, avoiding certain
                     quadruple-precision instructions that would
                     slow program performance.
                pwr3
                     Generates object code optimized for the POWER3
                     processor.
                pwr4
                     Generates object code optimized for the POWER4
                     processor.
                pwr5
                     Generates object code optimized for the POWER5
                     hardware platforms.
                rs64I
                     Generates object code optimized for the rs64a
                     processor.
                rs64b
                     Generates object code optimized for the RS64II
                     processor.
                rs64c
                     Generates object code optimized for the
                     RS64III processor.

                The default setting is determined by the setting of
                -qarch.

         -qunroll[={yes|no|auto}] | -qnounroll
                Unrolls inner loops in the program. This can help
                improve program performance.  The options are:

                yes
                     Is a suggestion to the compiler to unroll
                     loops.
                no
                     Instructs the compiler not to unroll loops.
                auto
                     Leaves the decision to unroll loops to the
                     compiler.

                The default is -qunroll=auto.  If -qunroll is
                specified with no suboptions, the compiler assumes
                -qunroll=yes.

         -qunwind | -qnounwind
                Informs the compiler that the stack can be unwound
                while a routine in the compilation is active.
                Specifying -qnounwind can improve the optimization
                of non-volatile register saves and restores.  The
                default is -qunwind.

         -qvecnvol | -qnovecnvol
                Specifies whether to use volatile or non-volatile
                vector registers. Volatile vector registers are
                registers whose value is not preserved across
                function calls or in the context of save, jump or
                switch system library functions. If -qnoenablevmx
                is in effect, this option is ignored.  The default
                is -qnovecnvol.

  Error Checking and Debugging Options
         -g     Generates information for debugging tools such as
                the IBM Debugger for AIX, Version 3.1.

         -p     Sets up the object files produced by the compiler
                for profiling.

         -pg    Sets up the object files for profiling, but
                provides more information than is provided by the
                -p option.

         -qcheck[=<suboptions_list>] | -qnocheck
                Generates code that performs certain types of
                runtime checking. If a violation is encountered, a
                runtime exception is raised by sending a SIGTRAP
                signal to the process. <suboptions_list> is a
                colon-separated list of one or more of the
                following:

                bounds | nobounds
                     Performs runtime checking of addresses when
                     subscripting within an object of known size.
                divzero | nodivzero
                     Performs runtime checking of integer division.
                     A trap will occur if an attempt is made to
                     divide by zero.
                nullptr | nonullptr
                     Performs runtime checking of addresses
                     contained in pointer variables used to
                     reference storage.
                all
                     Switches on all the above suboptions.

                The default is -qnocheck.

         -qdbxextra | -qnodbxextra
                Specifies that all typedef declarations, struct,
                union, and enum type definitions are included for
                debugging.  Use this option with the -g option to
                produce additional debugging information for use
                with a debugger.  The default is -qnodbxextra.

         -qdpcl | -qnodpcl
                Generates symbols that can be used by tools based
                on the Dynamic Probe Class Library (DPCL) to see
                the structure of an executable file.  The default
                is -qnodpcl.

         -qextchk | -qnoextchk
                Generates bind-time type-checking information and
                checks for compile-time consistency.  The default
                is -qnoextchk.

         -qfullpath | -qnofullpath
                Specifies the path information stored for files
                when you use the -g compiler option.  The default
                is -qnofullpath.

         -qgenproto[=parmnames] | -qnogenproto
                Produces ANSI prototypes from K&R function
                definitions.  Specifying -qgenproto without
                '=parmnames' will cause prototypes to be generated
                without parameter names.  The default is
                -qnogenproto.

         -qheapdebug | -qnoheapdebug
                Enables debug versions of memory management
                functions.  The default is -qnoheapdebug.

         -qinitauto=<hex_value> | -qnoinitauto
                Initializes automatic variables to the two-digit
                hexadecimal byte value <hex_value>. This generates
                extra code and should only be used for error
                determination.  The default is -qnoinitauto.

         -qkeepparm | -qnokeepparm
                Ensures that function parameters are stored on the
                stack even if the application is optimized.  As a
                result, parameters remain in the expected memory
                location, providing access to the values of these
                incoming parameters to tools such as debuggers. The
                default is -qnokeepparm.

         -qlinedebug | -qnolinedebug
                Generates abbreviated line number and source file
                name information for the debugger.  The default is
                -qnolinedebug.

         -qmaxerr=<num>[:<sev>] | -qnomaxerr
                Instructs the compiler to halt compilation when the
                specified number of errors of the specified
                severity (by default, the value of -qhalt) or
                greater is reached.  <num> must be an integer. The
                severity levels, <sev>, are:

                i = informational
                w = warning
                e = error
                s = severe error

                The default is -qnomaxerr.

         -qproto | -qnoproto
                Assumes that all functions are prototyped.  Asserts
                that procedure call points agree with their
                declarations even if the procedure has not been
                prototyped. This allows the caller to pass
                floating-point arguments in floating-point
                registers instead of general-purpose registers.
                The default is -qnoproto.

         -qspnans | -qnospnans
                This option is obsolete. Use -qfloat=nans in your
                new applications. Generates extra instructions to
                detect signalling NaN on conversion from single
                precision to double precision. The -qnospnans
                option specifies that this conversion need not be
                detected. The default is -qnospnans.

         -qsymtab={unref|static}
                Determines what types of information appear in the
                symbol table.  The suboptions are:

                unref
                     Specifies that all typedef declarations,
                     struct, union, and enum type definitions are
                     included for processing by the debugger.
                static
                     Adds user-defined, non-external names that
                     have a persistent storage class (such as
                     initialized and uninitialized static
                     variables) to the name list.

                The default is to not add static variables to the
                symbol table.

         -qtbtable=<option>
                Generates a traceback table that contains
                information about each function, including the type
                of function as well as stack frame and register
                information. The traceback table is placed in the
                text segment at the end of its code.  The options
                are:

                none
                     No traceback table is generated.
                full
                     A full traceback table is generated.  This is
                     the default with -qnoopt or -g specified.
                small
                     A traceback table is generated with no name or
                     parameter information.  This is the default
                     with optimization if -g is not specified.

         -qwarn64 | -qnowarn64
                Enables checking for possible data conversion
                problems between 32-bit and 64-bit compiler modes.
                The default is -qnowarn64.

  Listing and Message Options
         -V     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a space-separated list.

         -v     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a comma-separated list.

         -w     Suppresses warnings and lower-level messages.
                Specifying this option is equivalent to specifying
                -qflag=e:e.

         -qattr[=full] | -qnoattr
                Produces a compiler listing that includes an
                attribute listing for all identifiers. If -qattr is
                specified, the listing contains only those
                identifiers that are used. If -qattr=full is
                specified, the listing contains all names. If
                -qnoattr is specified, no listing is produced.  The
                default is -qnoattr.

         -qdump_class_hierarchy
                for each class object, this option dumps a
                representation of its hierarchy and virtual
                function table layout to a file. The file name is
                created by appending ".class" to the source file
                name.

         -qflag=<listing_severity>:<terminal_severity>
                Defines the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> is the
                minimum level for the listing file, and
                <terminal_severity> is the minimum level for the
                terminal.  The message severity levels are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qflag=i:i.

         -qformat=<options_list> | -qnoformat
                Warns of possible problems with string input and
                output format specifications. Functions diagnosed
                are printf, scanf, strftime, strfmon family
                functions and functions marked with format
                attributes. <options_list> is a comma-separated
                list of one or more of the following suboptions:

                all | noall
                     Turns on all format diagnostic messages.
                exarg | noexarg
                     Warns if excess arguments appear in printf and
                     scanf style function calls.
                nlt | nonlt
                     Warns if a format string is not a string
                     literal, unless the format function takes its
                     format arguments as a va_list.
                sec | nosec
                     Warns of possible security problems in use of
                     format functions.
                y2k | noy2k
                     Warns of strftime formats that produce a 2-
                     digit year.
                zln | nozln
                     Warns of zero-length formats.

                The default is -qnoformat, which is equivalent to
                -qformat=noall. If -qformat is specified without
                any suboptions, the default is -qformat=all.

         -qhalt=<sev>
                Stops the compiler after the first phase if the
                severity level of errors detected equals or exceeds
                the specified level, <sev>.  The severity levels in
                increasing order of severity are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qhalt=s.

         -qinfo[=[<suboption>][<groups_list>]] | -qnoinfo
                Produces informational messages. <groups_list> is a
                colon-separated list. If a <groups_list> is
                specified along with a <suboption>, a colon must
                separate them. The suboptions are:

                all | noall
                     Turns on all diagnostic messages for all
                     groups.  Specifying 'noall' turns off all
                     diagnostic messages for specific portions of
                     your program.
                private
                     Lists shared variables that are made private
                     to a parallel loop.
                reduction
                     Lists variables that are recognized as
                     reduction variables inside a parallel loop.

                Also:
                <groups_list>
                     Turns on or off specific groups of messages,
                     where <groups_list> is a colon-separated list
                     of one or more of the following:

                     c99 | noc99
                          C code that might behave differently
                          between C89 and C99 language levels
                     cmp | nocmp
                          Possible redundancies in unsigned
                          comparisons
                     cnd | nocnd
                          Possible redundancies or problems in
                          conditional expressions
                     cns | nocns
                          Operations involving constants
                     cnv | nocnv
                          Conversions
                     dcl | nodcl
                          Consistency of declarations
                     eff | noeff
                          Statements and pragmas with no effect
                     enu | noenu
                          Consistency of enum variables
                     ext | noext
                          Unused external definitions
                     gen | nogen
                          General diagnostic messages
                     gnr | nognr
                          Generation of temporary variables
                     got | nogot
                          Use of goto statements
                     ini | noini
                          Possible problems with initialization
                     inl | noinl
                          Functions not inlined
                     lan | nolan
                          Language level effects
                     obs | noobs
                          Obsolete features
                     ord | noord
                          Unspecified order of evaluation
                     par | nopar
                          Unused parameters
                     por | nopor
                          Non-portable language constructs
                     ppc | noppc
                          Possible problems with using the
                          preprocessor
                     ppt | noppt
                          Trace of preprocessor actions
                     pro | nopro
                          Missing function prototypes
                     rea | norea
                          Code that cannot be reached
                     ret | noret
                          Consistency of return statements
                     trd | notrd
                          Possible truncation or loss of data or
                          precision
                     tru | notru
                          Variable names truncated by the compiler
                     trx | notrx
                          Rounding of hexadecimal floating-point
                          constants
                     uni | nouni
                          Uninitialized variables
                     upg | noupg
                          Upgrade issues from one release to the
                          next release
                     use | nouse
                          Unused auto and static variables
                     zea | nozea
                          Zero-extent arrays

                The default is -qnoinfo.
                If -qinfo is specified with no suboptions, the
                default is -qinfo=all.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                The default is -qnolist.

         -qlistopt | -qnolistopt
                Produces a compiler listing that displays all the
                options that were in effect when the compiler was
                invoked.  The default is -qnolistopt.

         -qphsinfo | -qnophsinfo
                Reports the time taken in each compilation phase.
                Phase information is sent to standard output.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qprint | -qnoprint
                Enables or suppresses listings. Specifying
                -qnoprint overrides all listing-producing options,
                regardless of where they are specified, to suppress
                listings.  The default is -qprint.

         -qreport | -qnoreport
                Instructs the compiler to produce transformation
                reports that show how program loops are
                parallelized and/or optimized. The transformation
                reports are included as part of the compiler
                listing.  This option requires either -qhot, -qsmp,
                or -qipa=clonearch in order to have effect.  The
                default is -qnoreport.

         -qshowinc[=<types_list>] | -qnoshowinc
                Used with -qsource to selectively show user header
                files (includes using " ") or system header files
                (includes using < >) in the program source listing.
                <types_list> is a colon-separated list of one or
                more of the following types:

                usr | nousr
                     Specifies whether to show user include files
                sys | nosys
                     Specifies whether to show system include files
                all
                     Shows both user and system include files

                The default is -qnoshowinc.

         -qsource | -qnosource
                Produces a compiler listing and includes source
                code.  The default is -qnosource.

         -qsrcmsg | -qnosrcmsg
                Adds the corresponding source code lines to the
                diagnostic messages in the stderr file.  The
                default is -qnosrcmsg.

         -qsuppress[=<msg_list>] | -qnosuppress
                Prevents the specified compiler or driver
                informational or warning messages from being
                displayed or added to the listings, where
                <msg_list> is a colon-separated list of message
                numbers that will not be displayed.  The default is
                -qnosuppress.

         -qtabsize=<size>
                Changes the length of tabs as perceived by the
                compiler, where <size> is the number of character
                spaces representing a tab in the source program.
                The default is -qtabsize=8.

         -qversion
                Displays information on the compiler version. It
                will output (to STDOUT) the official compiler
                product name and the compiler version found on the
                system. You can specify -qversion outside of a
                compilation (xlc -qversion) or as part of a
                compilation, but compilation will not occur.

         -qwarnfourcharconsts | -qnowarnfourcharconsts
                Issues diagnostic messages when the compiler finds
                four-character constants in the program source.
                The default is -qnowarnfourcharconsts.

         -qxref[=full] | -qnoxref
                Specifies whether to produce a compiler listing
                that includes a cross-reference listing of all
                identifiers. Specifying -qxref will report only
                identifiers that are used, -qxref=full reports all
                identifiers in the program, and -qnoxref does not
                report any identifiers in the program. The
                -qnoprint option overrides this option.  The
                default is -qnoxref.

  Compatibility Options
  Linking Options
         -b{dynamic|shared|static}
                Controls how shared objects are processed by the
                linkage editor.  The suboptions are:

                dynamic, shared
                     Causes the linker to process subsequent shared
                     objects in dynamic mode. This is the default.
                     In dynamic mode, shared objects are not
                     statically included in the output file.
                     Instead, the shared objects are listed in the
                     loader section of the output file.
                static
                     Causes the linker to process subsequent shared
                     objects in static mode. In static mode, shared
                     objects are statically linked in the output
                     file.

         -bmaxdata=<num>
                Sets the maximum size of the area shared by the
                static data (both initialized and uninitialized)
                and the heap to <num> bytes. This value is used by
                the system loader to set the soft ulimit. The
                default is -bmaxdata=0.

         -brtl  Enables runtime linking for the output file. Do not
                specify the -brtl compiler option if you are
                invoking the compiler with xlc_r4 or if the
                -qheapdebug compiler option is specified.

         -e <name>
                Sets the entry name for a shared executable.  This
                option is only used together with -qmkshrobj.

         -f<filename>
                Names a file to store a list of object files for
                the compiler to pass to the linker. The <filename>
                file should contain only the names of object files.
                There should be one object file per line.

         -G     Tells the linkage editor to create a shared object
                enabled for runtime linking.

         -L<dir>
                Searches the path directory for library files
                specified by the -l<key> option.  The default is to
                search only the standard directories.

         -l<key>
                Searches the file lib<key>.so and then lib<key>.a
                for dynamic linking, or only lib<key>.a for static
                linking. The default is to search only some of the
                compiler runtime libraries.

         -r     Produces a relocatable object. This permits the
                output file to be produced even though it contains
                unresolved symbols.

         -Z<prefix>
                This linker option specifies a prefix for the
                library search path. This is useful when developing
                a new version of a library.

         -qinlglue | -qnoinlglue
                Generates fast external linkage by inlining the
                pointer glue code necessary to make a call to an
                external function or a call through a function
                pointer.  The default is -qnoinlglue.

         -qmkshrobj
                Creates a shared object from the generated object
                files.  See the XL C Compiler Reference for more
                information.

  Compiler Customization Options
         -B[<prefix>]
                Determines substitute path names for programs used
                during compilation, such as the compiler,
                assembler, linkage editor, and preprocessor, where
                <prefix> can be any program name recognized by the
                -t compiler option. The optional <prefix> defines
                part of a path name to the new programs. The -t
                parameter, <program>, specifies the program to
                which the <prefix> is to be appended.  When
                specifying <prefix>, there must be a slash (/)
                after the folder name.

         -F[<config_file>][:<stanza>]
                Names an alternative configuration file (.cfg) for
                the compiler.  <config_file> is the name of a
                compiler configuration file.  <stanza> is the name
                of the command used to invoke the compiler. This
                directs the compiler to use the entries under
                <stanza> in the <config_file> to set up the
                compiler environment. At least one of the arguments
                must be supplied.

         -t<programs_list>
                Applies the prefix from the -B option to the
                specified programs in <programs_list>.
                <programs_list> is a chain (ie: -tbcI) of one or
                more of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -W<program>,<options_list>
                Gives the specified option(s) to the compiler
                program, <program>. <options_list> is a comma-
                separated list of one or more options. <program>
                can be one of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -qasm_as[='<asm_path> [<flags_list>]'] | -qnoasm_as
                Specifies the path and flags used to invoke the
                assembler in order to handle assembler code in an
                asm statement. <asm_path> is the full path to the
                assembler to be used, and <flags_list> is a series
                of one or more flags (and their arguments),
                separated by spaces. Please note that single quotes
                (or double quotes) are required around the string
                of arguments if any spaces exist.

         -qexpfile=<filename>
                Saves the exported symbols in the specified file.
                This option is used only together with the
                -qmkshrobj compiler option.  For more information,
                see -qmkshrobj.

         -qmaxmem=<num>
                Limits the amount of memory used by certain
                memory-intensive optimizations to <num> kilobytes.
                When <num> is -1, the optimizer will use as much
                memory as needed.  By default -qmaxmem=8192 when
                -O2 level optimization is in effect and -qmaxmem=-1
                when -O3 level or greater optimization is in
                effect.

         -qpath=<program>:<path>
                Constructs alternate program names for compiler
                components. The program and directory path
                specified are used in place of the regular program.
                <program> can be one of the following:

                a = assembler
                b = compiler backend
                c = compiler frontend
                I = interprocedural analysis - compile phase
                L = interprocedural analysis - link phase
                l = linkage editor
                p = compiler preprocessor

         -qtls[=<model>] | -qnotls
                Specifies the thread-local storage model to be used
                by the application, where <model> can be:

                global-dynamic
                initial-exec
                local-exec
                local-dynamic

                If the -qnopic compiler option is in effect, the
                default is initial_exec.  If the -qpic compiler
                option is in effect, the default is global_dynamic.

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies the compile-time rounding mode of
                constant floating-point expressions, where
                <rounding_mode> is one of the following:

                m = round toward minus infinity
                n = round to the nearest representable number
                p = round toward plus infinity
                z = round toward zero.

                The default is -yn.

         -qfloat=<suboptions_list>
                Specifies various floating-point suboptions. This
                provides different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following:

                emulate | noemulate
                     Emulates the floating-point instructions
                     omitted by the PowerPC 403(TM) processor.
                     Function calls are emitted in place of PowerPC
                     floating-point instructions.  Use this option
                     only in a single-threaded stand-alone
                     environment, targeting the PowerPC 403
                     processor.  Do not use -qfloat=emulate with
                     any of the following invocation commands:
                      * -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                      * -qlongdouble, -qldbl128
                      * xlc128
                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using faster inline code that
                     does not check for overflows. This suboption
                     must only be used with an optimization option.
                     -qfloat=nofltint checks floating-point-to-
                     integer conversions for out-of-range values.
                fold | nofold
                     Specifies that constant floating-point
                     expressions are to be evaluated at compile
                     time rather than at run time.
                hsflt | nohsflt
                     The hsflt option speeds up calculations by
                     truncating instead of rounding computed values
                     to single precision before storing and on
                     conversions from floating-point to integer.
                     The nohsflt suboption specifies that single-
                     precision expressions are rounded after
                     expression evaluation and that floating-
                     point-to-integer conversions are to be checked
                     for out-of-range values.
                hssngl | nohssngl
                     The hssngl option specifies that single-
                     precision expressions are rounded only when
                     the results are stored into float memory
                     locations. The nohssngl option specifies that
                     single-precision expressions are rounded after
                     expression evaluation. Using hssngl can
                     improve runtime performance and is safer than
                     using -qfloat=hsflt.
                maf | nomaf
                     Makes floating-point calculations faster and
                     more accurate by using floating-point
                     multiply-add instructions where appropriate.
                nans | nonans
                     Generates extra instructions to detect
                     signalling NaN when converting from single-
                     precision to double-precision at run time. The
                     option nonans specifies that this conversion
                     need not be detected.
                relax | norelax
                     Relaxes the strict IEEE-conformance slightly
                     for greater speed, typically by removing some
                     trivial, floating-point arithmetic operations,
                     such as adds and subtracts involving a zero on
                     the right.
                rndsngl | norndsngl
                     Specifies that the result of each single-
                     precision (float) operation is to be rounded
                     to single precision. -qfloat=norndsngl
                     specifies that rounding to single-precision
                     happens only after full expressions have been
                     evaluated.
                rrm | norrm
                     Prevents floating-point optimizations that are
                     incompatible with runtime rounding to plus and
                     minus infinity modes.
                rsqrt | norsqrt
                     Specifies whether a division by the result of
                     a square root can be replaced with a multiply
                     by the reciprocal of the square root.
                     -qfloat=rsqrt has no effect unless -qignerrno
                     and -qarch=pwr2 are also specified.
                spnans | nospnans
                     Detects signalling NaN on conversion from
                     single-precision to double-precision.

                The default suboptions are: nospnans, norsqrt (at
                -O2 optimization), rsqrt (at -O3 optimization),
                norrm, norndsngl, norelax, nonans, maf, nohssngl,
                nohsflt, fold, nofltint (at -O2 optimization),
                fltint (at -O3 or greater optimization), and
                noemulate.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Generates instructions to detect and trap runtime
                floating-point exceptions.  <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                overflow
                     Generates code to detect and trap floating-
                     point overflow.
                underflow
                     Generates code to detect and trap floating-
                     point underflow.
                zerodivide
                     Generates code to detect and trap floating-
                     point division by zero.
                invalid
                     Generates code to detect and trap floating-
                     point invalid operation exceptions.
                inexact
                     Generates code to detect and trap floating-
                     point inexact exceptions.
                enable
                     Enables the specified exceptions in the
                     prologue of the main program.
                imprecise
                     Generates code for imprecise detection of the
                     specified exceptions. If an exception occurs,
                     it is detected, but the exact location of the
                     exception is not determined.
                nanq | nonanq
                     Generates code to detect and trap NaNQ (Not a
                     Number Quiet) exceptions handled or generated
                     by floating-point operations.


         -qfold | -qnofold
                This option is obsolete. Use -qfloat=fold in your
                new applications. Specifies that constant
                floating-point expressions are to be evaluated at
                compile time.  The default is -qfold.

         -qhsflt | -qnohsflt
                This option is obsolete. Use -qfloat=hsflt in your
                new applications. Speeds up calculations by
                removing range-checking on single-precision float
                results, and on conversions from floating-point to
                integer. -qnohsflt specifies that single-precision
                expressions are rounded after expression
                evaluation, and that floating-point-to-integer
                conversions are to be checked for out-of-range
                values.  The default is -qnohsflt.

         -qhssngl | -qnohssngl
                This option is obsolete. Use -qfloat=hssngl in your
                new applications. Specifies that single-precision
                expressions are rounded only when the results are
                stored into float memory locations. -qnohssngl
                specifies that single-precision expressions are
                rounded after expression evaluation.  The default
                is -qnohssngl.

         -qldbl128 | -qnoldbl128
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qlongdouble.  The default is -qnoldbl128.

         -qlongdouble | -qnolongdouble
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qldbl128.  The default is -qnolongdouble.

         -qlonglit | -qnolonglit
                Makes unsuffixed literals into the long type in
                64-bit mode.  The default is -qnolonglit.

         -qlonglong | -qnolonglong
                Allows long long integers.  When compiling with xlc
                or cc the default is -qlonglong. When compiling
                with c89, the default -qnolonglong.

         -qmaf | -qnomaf
                This option affects the precision of floating-point
                intermediate results. This option is obsolete. Use
                -qfloat=maf in your new applications. -qmaf
                specifies whether floating-point multiply-add
                instructions are to be generated. The default is
                -qmaf.

         -qrrm | -qnorrm
                This option is obsolete. Use -qfloat=rrm in your
                new applications. Prevents floating-point
                optimizations that are not compatible with runtime
                rounding to plus and minus infinity modes. The
                default is -qnorrm.

  ENVIRONMENT VARIABLES
         OBJECT_MODE
                Changes the compilation mode behavior, unless
                overridden by configuration file or command-line
                options.

                32
                     32-bit compiler mode.
                64
                     64-bit compiler mode.
                32_64
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.
                (not set)
                     32-bit compiler mode.
                (anything else)
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.

         PATH   Specifies the directory search path for the
                executable files of the compiler.

         MANPATH
                Specifies the directory search path for finding
                manual pages.

         OBJECT_MODE
                Specifies the default compilation mode to 32-bit or
                64-bit.

         LANG   Specifies the national language for message and
                help files.

         NLSPATH
                Specifies the path of the message and help files.

         PDFDIR Specifies the directory in which the profile data
                file is created.

         TMPDIR Specifies the directory in which temporary files
                are created. The default is /tmp.

         XLNOCLONEARCH
                Instructs the program to only execute the generic
                code (code that is not versioned for a particular
                architecture).

         XLSMPOPTS
                Sets options for programs using loop
                parallelization.
                e.g. XLSMPOPTS=PARTHDS=4:SCHEDULE=DYNAMIC=5

  SEE ALSO
         vacndi(1), gxlc(1), showpdf(1), mergepdf(1), resetpdf(1)
         cleanpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/caix/library/
         www.ibm.com/software/awdtools/caix/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL C Enterprise Edition V8.0 for AIX(R)

         5724-M11

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.




























rm /tmp/xlcW0fpI4qa
rm /tmp/xlcW1fpI4qb
rm /tmp/xlcW2fpI4qc
configure:4438: $? = 249
configure:4461: checking for C compiler default output file name
configure:4483: xlc -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:4487: $? = 0
configure:4525: result: a.out
configure:4544: checking whether the C compiler works
configure:4554: ./a.out
configure:4558: $? = 0
configure:4577: result: yes
configure:4584: checking whether we are cross compiling
configure:4586: result: no
configure:4589: checking for suffix of executables
configure:4596: xlc -o conftest -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:4600: $? = 0
configure:4626: result: 
configure:4632: checking for suffix of object files
configure:4658: xlc -c -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:4662: $? = 0
configure:4687: result: o
configure:4691: checking whether we are using the GNU C compiler
configure:4720: xlc -c -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 24.14: 1506-275 (S) Unexpected text me encountered.
"conftest.c", line 24.8: 1506-045 (S) Undeclared identifier choke.
configure:4727: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:4744: result: no
configure:4753: checking whether xlc accepts -g
configure:4783: xlc -c -g  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:4790: $? = 0
configure:4891: result: yes
configure:4908: checking for xlc option to accept ISO C89
configure:4982: xlc  -c -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:4989: $? = 0
configure:5012: result: none needed
configure:5035: checking how to run the C preprocessor
configure:5075: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:5082: $? = 0
configure:5113: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
"conftest.c", line 19.10: 1506-296 (S) #include file <ac_nonexistent.h> not found.
configure:5120: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:5153: result: xlc -E
configure:5182: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:5189: $? = 0
configure:5220: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
"conftest.c", line 19.10: 1506-296 (S) #include file <ac_nonexistent.h> not found.
configure:5227: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:5515: checking whether the compiler defines __func__
configure:5545: xlc -o conftest -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:5549: $? = 0
configure:5555: ./conftest
configure:5559: $? = 0
configure:5625: result: yes
configure:5636: checking whether the compiler defines __FUNC__
configure:5666: xlc -o conftest -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
"conftest.c", line 6.20: 1506-045 (S) Undeclared identifier __FUNC__.
configure:5670: $? = 1
configure: program exited with status 1
configure: failed program was:
| 
| #include <string.h>
| int foo(void);
| int foo(void)
| {
|     return (strcmp(__FUNC__, "foo") == 0);
| }
| int main(int argc, char ** argv)
| {
|     return (foo() ? 0 : 1);
| }
| 
configure:5746: result: no
configure:5757: checking whether the compiler sets __FUNCTION__
configure:5787: xlc -o conftest -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:5791: $? = 0
configure:5797: ./conftest
configure:5801: $? = 0
configure:5867: result: yes
configure:5885: checking whether C compiler accepts option -O2
configure:5899: result: yes
configure:5901: checking whether routines compiled with -O2 can be linked with ones compiled without -O2
configure:5937: result: yes
configure:5966: checking for type of weak symbol alias support
configure:6000: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:6007: $? = 0
configure:6206: result: pragma weak
configure:6233: checking whether __attribute__ ((weak)) allowed
configure:6260: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:6267: $? = 0
configure:6282: result: yes
configure:6286: checking whether __attribute ((weak_import)) allowed
configure:6313: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:6320: $? = 0
configure:6335: result: yes
configure:6349: checking for multiple weak symbol support
configure:6390: result: yes
configure:6562: checking for Fortran 77 compiler version
configure:6570: xlf --version >&5
xlf: 1501-216 command option --version is not recognized - passed to ld



  xlf(1)                 IBM (October 2005)                  xlf(1)



  NAME
         xlf, xlf90, xlf95, xlf_r, xlf90_r, xlf95_r, f90, f95,
         xlf_r7, xlf90_r7, xlf95_r7, f77, fort77 - invoke the IBM
         XL Fortran compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

  DESCRIPTION
         xlf and related invocation commands compile Fortran source
         files.  They also process assembler source files and
         object files. Unless you specify the -c option, these
         commands call the link editor to produce a single object
         file.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/xlf.cfg).  For more information,
         refer to the XL Fortran Enterprise Edition Compiler
         Reference.

         The input file may have any of the following suffixes:
          .f - Fortran source file
          .f77 or .F77 - Fortran source file (fixed form) using
               f77 stanza configuration
          .f90 or .F90 - Fortran source file (free form) using
               xlf90 configuration
          .f95 or .F95 - Fortran source file (free form) using
               xlf95 configuration
          .o or .a - object file for ld command
          .s - assembler source file
          .F - Fortran source file with cpp preprocessor directives

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -I<dir>
                Adds a directory to the search path for include
                files and .mod files. If XL Fortran calls cpp, this
                option adds a directory to the search path for
                #include files. Before checking the default
                directories for include and .mod files, the
                compiler checks each directory in the search path.
                For include files, this path is only used if the
                file name in an INCLUDE line is not provided with
                an absolute path. By default, the following
                directories are searched in the following order:

                1) The current directory (where the compiler is
                executed)
                2) The directory where the source file is located

         -k     Specifies that the program is in free source form.
                This is the short form of -qfree=f90.

         -U     Makes the compiler case-sensitive to identifier
                names. By default the compiler interprets all names
                as if they were lower-case.

         -qci=<nums_list>
                Activates the specified INCLUDE lines. <nums_list>
                is a colon-separated list of identification numbers
                (from 1 to 255) of conditional includes.

         -qcr | -qnocr
                Allows you to control how the compiler interprets
                the CR (carriage return) character.  This allows
                you to compile code written using a MAC OS X or
                DOS/Windows editor.  The default is -qcr.

         -qdirective[=<list>] | -qnodirective[=<list>]
                Specifies target strings to be recognized in a
                comment directive. <list> is a colon-separated list
                of directives. If -qdirective is specified without
                any directives, it turns on the default trigger
                constant IBM* if it has been turned off by a
                previous -qnodirective.  The default is
                -qnodirective.

         -qdlines | -qnodlines
                This is the long form of the -D option. See -D for
                more information.  The default is -qnodlines.

         -qfixed[=<right_margin>]
                Indicates that the input source program is in fixed
                source form and optionally specifies the maximum
                line length, <right_margin>. The maximum
                <right_margin> value is 132.  The default is
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77
                invocation commands, and -qfree=f90 for f90, f95,
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, and
                xlf95_r7.

         -qfree[={f90|ibm}]
                Indicates that the source code is in free source
                form. The 'ibm' and 'f90' suboptions specify
                compatibility with the free source form defined for
                VS Fortran and Fortran 90, respectively. Note that
                the free source form defined for Fortran 90 also
                applies to Fortran 95.  The default is -qfree=f90
                for f90, f95, xlf90, xlf90_r, xlf90_r7, xlf95,
                xlf95_r, and xlf95_r7 invocation commands, and
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77.

         -qmbcs | -qnombcs
                Indicates to the compiler whether character literal
                constants, Hollerith constants, H edit descriptors,
                and character string edit descriptors can contain
                Multibyte Character Set (MBCS) or Unicode
                characters. The default is -qnombcs.

         -qmixed | -qnomixed
                The long form of the -U option. Makes the compiler
                case-sensitive to identifier names. The default is
                -qnomixed.

         -qsuffix=<option>=<suffix>
                Specifies the source file suffix, <suffix>, on the
                command line instead of in the .cfg file, where
                <option> can be:

                f
                     Specifies that <suffix> is the new source file
                     suffix.
                o
                     Specifies that <suffix> is the new object-file
                     suffix.
                s
                     Specifies that <suffix> is the new assembler
                     source file suffix.
                cpp
                     Specifies that <suffix> is the new
                     preprocessor source file suffix.

  Output Control Options
         -c     Produces an object file instead of an executable
                file.  Prevents the completed object file from
                being sent to the ld command for link-editing. With
                this option, the output is a .o file for each
                source file.

         -d     Causes preprocessed source files that are produced
                by cpp to be kept rather than to be deleted. By
                default temporary files produced by cpp are
                deleted.

         -o <name>
                Specifies a name for the output object, executable,
                or assembler source file.  The default name is
                a.out for executable files. The default name for an
                object source file is the same as the source file
                except that it has a '.o' extension.

         -q32   Selects 32-bit mode compilation mode. The -q32 and
                -qarch options determine the target machines that
                the 32-bit executable will run on. The default is
                -q32.

         -q64[=<suboption>]
                Selects 64-bit compilation mode. The -q64 option
                indicates that the object module will be created in
                64-bit object format and that the 64-bit
                instruction set will be generated. Note that you
                may compile in a 32-bit environment to create 64-
                bit objects, but you must link them in a 64-bit
                environment with the -q64 option. Use -q32 and -q64
                options, along with the -qarch and -qtune compiler
                options, to optimize the output of the compiler to
                the architecture on which that output will be used.
                The suboptions are:

                largetype
                     The object file will use the 64-bit Large Data
                     Type (LDT) ABI. This object file may only be
                     used on versions of AIX greater than or equal
                     to 5.0.

         -qmoddir=<directory>
                Specifies the location for any .mod files that the
                compiler writes. By default .mod files are placed
                in the current directory.

         -qpic[=<suboption>] | -qnopic
                Generates Position Independent Code (PIC) that can
                be used in shared libraries.  The suboptions are:

                large
                     Allows the size of the Table of Contents to be
                     larger than 64K. This suboption allows for
                     more addresses to be stored in the Table of
                     Contents and generates larger code.
                small
                     Assumes that the size of the Table of Contents
                     can be at most 64K.

                The default is -qpic=small.

  Optimization Options
         -NS<bytes>
                Specifies the size (in bytes) of the register spill
                space; the internal program storage areas used by
                the optimizer for register spills to storage.  The
                default is -NS512.

         -O[<level>]
                Specifies whether to optimize code during
                compilation and, if so, at which level. -O<level>
                is equivalent to -qoptimize=<level>. <level> can
                be:

                (not specified)
                     This is equivalent to -O2.
                0
                     Almost all optimizations are disabled. This is
                     equivalent to -qnooptimize.
                1
                     Reserved for future use. Ignored by compiler.
                2
                     Performs a set of optimizations that are
                     intended to offer improved performance without
                     an unreasonable increase in time or storage
                     that is required for compilation.
                3
                     Performs additional optimizations that are
                     memory intensive, compile-time intensive, and
                     may change the semantics of the program
                     slightly, unless -qstrict is specified. We
                     recommend these optimizations when the desire
                     for run-time speed improvements outweighs the
                     concern for limiting compile-time resources.
                     This level of optimization also affects the
                     setting of the -qfloat option, turning on the
                     'fltint' and 'rsqrt' suboptions by default,
                     and setting -qmaxmem=-1.  This option implies
                     -qhot=level=0.
                4
                     Aggressively optimizes the source program,
                     trading off additional compile time for
                     potential improvements in the generated code.
                     You can specify the option at compile time or
                     at link time. if you specify it at link time,
                     it will have no effect unless you also specify
                     it at compile time for at least the file that
                     contains the main program. -O4 implies the
                     following other options:
                     -qhot
                     -qipa
                     -O3
                     -qarch=auto
                     -qtune=auto
                     -qcache=auto
                5
                     Performs all optimizations from -O4, and also
                     sets -qipa=level=2 to perform full inter-
                     procedural data flow and alias analysis.

                -O4 and -O5 perform whole-program analysis and
                should be specified at both compilation and link
                time to have maximal effect.  The default is -O0.

         -p[g]  Sets up the object file for profiling. Specifying
                '-pg' will produce more extensive statistics. The
                default is no profiling.

         -Q[<suboption>]
                Specifies whether Fortran 90 or Fortran 95
                procedures are inlined and/or the names of
                particular procedures that should or should not be
                inlined. names is a list of procedure names that
                are separated by colons. This option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions,
                     subject to limits on the number of inlined
                     calls and the amount of code size increase as
                     a result.
                -Q!
                     Turns off inlining.
                -Q+<names_list>
                     Inlines the functions listed in <names_list>
                     and any other appropriate functions, where
                     <names_list> is a colon-separated list.
                -Q-<names_list>
                     Does not inline functions listed in
                     <names_list>, where <names_list> is a colon-
                     separated list. All other appropriate
                     functions are inlined.

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qalias=<suboptions_list>
                Indicates whether a program contains certain
                categories of aliasing. The compiler limits the
                scope of some optimizations when there is a
                possibility that different names are aliases for
                the same storage locations. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                aryovrlp | noaryovrlp
                     Indicates whether the compilation units
                     contain any array assignments between
                     storage-associated arrays. If not, specify
                     noaryovrlp to improve performance.
                intptr | nointptr
                     Indicates whether the compilation units
                     contain any integer POINTER statements. If so,
                     specify intptr.
                pteovrlp | nopteovrlp
                     Indicates whether any pointee variables may be
                     used to refer to any data objects that are not
                     pointee variables, or whether two pointee
                     variables may be used to refer to the same
                     storage location. If not, specify nopteovrlp.
                std | nostd
                     Indicates whether the compilation units
                     contain any non-standard aliasing (see
                     Compiler Reference for more information). If
                     so, specify nostd.  (-qalias=nostd replaces
                     the obsolete -qxflag=xalias option.)

                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90 and f95 commands, the default
                suboptions are: aryovrlp, nointptr, pteovrlp, and
                std. For the xlf, xlf_r, xlf_r7, f77, and fort77
                commands, the default suboptions are: aryovrlp,
                intptr, pteovrlp, and std.

         -qalign=<suboptions_list>
                Specifies the alignment of data objects in storage
                to avoid performance problems with misaligned data.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                4k | no4k
                     Specifies whether large arrays and structures
                     (at least 4096 bytes in size) will be aligned
                     on a 4K (4096-byte, or page) boundary.  Use of
                     this option may help to improve the
                     performance of programs using data striping.
                bindc=<suboption>
                     Specifies that the alignment and padding for
                     an XL Fortran derived type with the BIND(C)
                     attribute are compatible with a C struct type
                     that is compiled with the corresponding XL C
                     alignment option. The compatible alignment
                     options are:
                     -qalign=bindc=bit_packed
                     -qalign=bindc={full|power}
                     -qalign=bindc=packed
                     -qalign=bindc={twobyte|mac68k}
                     -qalign=bindc=natural
                     Each of these "-qalign=bindc=" sub-suboptions
                     is equivalent to the XL C "-qalign=" suboption
                     of the same name.  (ie: For
                     -qalign=bindc=bit_packed, the corresponding XL
                     C option is -qalign=bit_packed)
                struct=<option>
                     Specifies how objects or arrays of a derived
                     type (declared using a record structure) are
                     stored, and whether or not padding is used
                     between components. The options are:
                     natural
                          Objects of a derived type are stored with
                          sufficient padding such that components
                          will be stored on their natural alignment
                          boundaries, unless storage association
                          requires otherwise.
                     packed
                          Objects of a derived type are stored with
                          no padding between components, other than
                          any padding represented by %FILL
                          components.
                     port
                          Storage padding is the same as described
                          above for the struct=natural suboption,
                          except that the alignment of components
                          of type complex is the same as the
                          alignment of components of type real of
                          the same kind. The padding for an object
                          that is immediately followed by a union
                          is inserted at the beginning of the first
                          map component for each map in that union.

                The default activated suboptions are: no4k,
                struct=natural, and bindc=power.

         -qarch=<suboption>
                Specifies which instructions the compiler can
                generate.  The suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                com
                     You can run the executable file that the
                     compiler generated on any hardware platform
                     supported by the compiler, because the file
                     contains only instructions that are common to
                     all machines.
                p2sc
                     The executable file can be executed on any
                     POWER2 Super Chip hardware platform.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms. Using -q64 with ppc upgrades the
                     architecture to ppc64grsq.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.  In 64-bit mode,
                     produces object code containing optional
                     graphics instructions that will run on 64-bit
                     PowerPC platforms, but not on 32-bit-only
                     platforms.  Using -q64 with ppcgr upgrades the
                     architecture to ppc64grsq.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                pwr
                     Produces an object that contains instructions
                     that run on any of the POWER or POWER2
                     hardware platforms.
                pwr2s
                     The executable file can be executed on any
                     desktop implementation of the POWER2 chip.
                pwr2
                     Produces an object that contains instructions
                     that run on the POWER2 hardware platforms.
                pwrx
                     Equivalent to pwr2.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3, POWER4, POWER5,
                     POWER5+ or PowerPC 970 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4, POWER5, POWER5+ or
                     PowerPC 970 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 or POWER5+ hardware
                     platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on any POWER5+ hardware platform.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.
                601
                     Produces an object that contains instructions
                     that run on PowerPC 601 systems.
                603
                     Produces an object that contains instructions
                     that run on PowerPC 603 systems.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                ppc64v
                     Generates instructions for any 64-bit PowerPC
                     processor (like PowerPC 970) with VMX.

                The default is -qarch=com.

         -qassert=<suboptions_list>
                Provides information about the program to help
                fine-tune optimizations. <suboptions_list> is a
                colon-separated list of one or both of the
                following suboptions:

                deps | nodeps
                     Loops can contain loop-carried dependencies.
                itercnt=<n>
                     The iteration count of a typical loop is <n>.

                The default is -qassert=deps:itercnt=1024.

         -qcache=<suboptions_list>
                Specifies the cache configuration for a specific
                execution machine. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                assoc=<n>
                     Specifies the set-associativity of the cache:
                     0   = Directly-mapped
                     1   = Fully associative
                     (n > 1) = <n>-way set-associative
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty resulting
                     from a cache miss.
                level=<level>
                     Specifies which level of cache is affected:
                     1 = Basic cache
                     2 = Level-2 cache, or the table lookaside
                     buffer (TLB) if the machine has no level-2
                     cache
                     3 = TLB, in a machine that does have a level-2
                     cache
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<type>
                     Specifies the type of cache that the settings
                     apply to:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The default is determined by the -qtune and -qarch
                settings.

         -qcompact | -qnocompact
                Reduces optimizations that increase code size.  The
                default is -qnocompact.

         -qdirectstorage | -qnodirectstorage
                Specifies that a compilation unit might reference
                write-through-enabled or cache-inhibited storage.
                The default is -qnodirectstorage.

         -qenablevmx | -qnoenablevmx
                Enables generation of Vector Multimedia Extension
                (VMX) instructions.  The default is -qnoenablevmx.

         -qessl | -qnoessl
                Allows the use of the Engineering and Scientific
                Subroutine Library (ESSL) routines in place of
                Fortran 90 intrinsic procedures.  The default is
                -qnoessl.

         -qfdpr | -qnofdpr
                Provides object files with information that the AIX
                Feedback Directed Program Restructuring (fdpr)
                performance-tuning utility needs to optimize the
                resulting executable file.  The default is
                -qnofdpr.

         -qhot[=<suboptions>] | -qnohot
                Performs high-order loop analysis and
                transformations during optimization. This option is
                a powerful alternative to hand-tuning that provides
                opportunities to optimize loops and array language.
                The suboptions are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value. When <n> is not
                     specified, the compiler will pad any arrays
                     where it infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. See the XL Fortran
                     Compiler Reference for more information.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a VMX (Vector Multimedia Extension)
                     instruction.  If you specify -qhot=nosimd, the
                     compiler performs optimizations on loops and
                     arrays, but avoids replacing certain code with
                     VMX instructions.
                vector | novector
                     Specifies whether to allow the compiler to
                     optimize by replacing code with calls to
                     vector library routines.  Only takes effect
                     when specified with -qnostrict or -O3 or
                     higher optimization level.

                The default is -qnohot. If -qhot is specified
                without parameters, the default is -qhot=vector.

         -qipa[=<suboptions_list>] | -qnoipa
                Enhances -O optimization by performing detailed
                analysis across procedures. Optimization level -O2
                or higher is required when using -qipa.
                <suboptions_list> is a colon-separated list of
                suboptions. Regular expressions are supported when
                specifying <procedure_names_list> in the following
                -qipa suboptions: exits, inline, noinline, lowfreq,
                pure, safe, and unknown. <procedure_names_list> is
                a comma-separated list. The suboptions are:

                exits=<procedure_names_list>
                     Specifies a selected set of procedures which
                     always end the program.
                clonearch=<architecture_list> | noclonearch
                     Allows you to specify multiple architectures
                     in the event that you want to compile your
                     application for multiple architectures with a
                     single binary file. <architecture_list> is a
                     comma-separated list of one or more of the
                     following architectures: pwr4, pwr5, ppc970,
                     and pwr5x. This must be specified during link
                     time.  The default is noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of the mangled names of the functions that you
                     wish to clone (or not clone). Please note that
                     this suboption has no effect unless
                     -qipa=clonearch=<arch> is specified. You can
                     use regular expression syntax when specifying
                     function names.  The default is nocloneproc.
                inline=<options_list>
                     Specifies a colon-separated list of inline
                     options, which are as follows:
                     auto | noauto
                          Specifies whether to automatically
                          perform inline expansion.  The default is
                          auto.
                     limit=<n>
                          Changes the size limits that the
                          inline=auto option uses to determine how
                          much inline expansion to do. <n> is the
                          optimizers approximation of the number of
                          bytes of code that will be generated.
                     <procedure_names_list>
                          Specifies the procedures to attempt to
                          inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This argument is
                          implemented only when inline=auto is on.
                noinline=<procedure_names_list>
                     Specifies the procedures which are not to be
                     inlined.
                isolated=<procedure_names_list>
                     Specifies the procedures that are not compiled
                     with -qipa and do not directly refer to any
                     global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization to perform:
                     0
                          Performs minimal inter-procedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full inter-procedural data flow and alias
                          analysis.
                     The default level is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, in the event that an object
                     listing has been requested using the -qlist or
                     -qipa=list option. The default name is
                     "a.lst". Specifying 'long' or 'short'
                     determines which listing sections will be
                     included. The default is short.
                lowfreq=<procedure_names_list>
                     Specifies the procedures that are likely to be
                     called infrequently during the course of a
                     typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the interprocedural behavior for
                     procedures not compiled with -qipa.  The
                     default is 'unknown'.
                object | noobject
                     Includes standard object code in the object
                     files. If the noobject option is specified, it
                     can substantially reduce overall compilation
                     time by not generating object code during the
                     first IPA phase. The default is object. Note,
                     this is a compile-time suboption.
                partition={small|medium|large}
                     Specifies the size of the regions within the
                     program to analyze. Larger partitions contain
                     more procedures, which result in better
                     interprocedural analysis but require more
                     storage to optimize.  The default is medium.
                pdfname=<filename>
                     Specifies the name of the profile data file
                     that contains the PDF profiling information.
                     The default filename is __pdf.
                pure=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "pure" must be "isolated" and
                     "safe". It must not alter the internal state
                     nor have side-effects, which are defined as
                     potentially altering any data object visible
                     to the caller.
                safe=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "safe" may modify global
                     variables and dummy arguments.
                stdexits | nostdexits
                     Specifies that certain predefined routines can
                     be optimized as with the exits suboption. The
                     procedures are abort, exit, _exit, and
                     _assert.  The default is nostdexits.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure specified
                     as "unknown" may make calls to other parts of
                     the program compiled with -qipa and modify
                     global variables and dummy arguments.

                Options intended for use by the link-time phase of
                -qipa are -qlibansi, -qlibessl, -qlibposix and
                -qthreaded.  The default is -qnoipa.

         -qkeepparm | -qnokeepparm
                Ensures that the incoming parameters are stored on
                the stack even when optimizing. This may negatively
                impact execution performance. This option then
                provides access to the values of incoming
                parameters to tools, such as debuggers, simply by
                preserving those values on the stack.  The default
                is -qnokeepparm.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large 16 MB pages provided on POWER4 and higher
                based systems.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are in fact the library
                functions.  The default is -qnolibansi.

         -qlibessl | -qnolibessl
                Assumes that all functions with the name of an ESSL
                defined library function are, in fact, the library
                functions.  The default is -qnolibessl.

         -qlibposix | -qnolibposix
                Assumes that all functions with the name of a POSIX
                1003.1 defined library function are, in fact, the
                system functions.  The default is -qnolibposix.

         -qmaxmem=<kbytes>
                Limits the amount of memory that the compiler
                allocates while performing specific, memory-
                intensive optimizations. If <kbytes> is -1, the
                compiler will take as much memory as it needs
                without checking for limits. The default is
                -qmaxmem=2048 when using optimization level -O2,
                and -qmaxmem=-1 when using -O3 or greater.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 Produces an object that is instrumented to collect
                run-time execution information. This is phase 1 of
                the profile-directed feedback optimization process.

         -qpdf2 Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

         -qprefetch | -qnoprefetch
                Automatically inserts prefetch instructions where
                the optimizer perceives a benefit.  The default is
                -qprefetch.

         -qrecur | -qnorecur
                Not recommended. Allows external subprograms to be
                called recursively. For new programs, use the
                RECURSIVE keyword, which provides a standard-
                conforming way of using recursive procedures.  The
                default is -qnorecur.

         -qshowpdf | -qnoshowpdf
                Adds additional call and block count profiling
                information to an executable. This option is used
                together with the -qpdf1 option.  The default is
                -qnoshowpdf.

         -qsmallstack[=<suboption>] | -qnosmallstack
                Specifies that the compiler will minimize stack
                usage where possible. This option can take the
                form:

                -qsmallstack
                     Enables only general small stack
                     transformations.
                -qsmallstack=dynlenonheap
                     Asserts that automatic variables which are
                     dynamically-sized are allocated from the heap
                     and enables general small stack
                     transformations.
                -qsmallstack=nodynlenonheap
                     Disables dynamic-length variable allocation.
                -qnosmallstack
                     Disables only the general small stack
                     transformations.

                The default is -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Specifies that code should be produced for an SMP
                system.  <suboptions_list> is a colon-separated
                list of one or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization.
                nested_par | nonested_par
                     Specifies that prescriptive nested parallel
                     constructs should be parallelized by the
                     compiler.
                omp | noomp
                     Enforces compliance with the OpenMP Fortran
                     API.
                opt | noopt
                     Controls optimization for parallelization.
                     -qsmp=noopt specifies that the compiler should
                     do the least amount of optimization that is
                     required to parallelize the code and preserve
                     maximum debugability.
                rec_locks | norec_locks
                     Allows recursive locks to be used to avoid
                     problems associated with CRITICAL constructs.
                     If -qsmp=norec_locks is specified, recursive
                     locks will not be used to implement critical
                     sections.
                schedule=<suboptions>
                     The schedule suboption can take any of the
                     following sub-suboptions:
                     affinity[=<n>]
                     dynamic[=<n>]
                     guided[=<n>]
                     runtime
                     static[=<n>]
                     For their descriptions, refer to the XL
                     Fortran Compiler Reference.
                threshold=<n>
                     Controls the amount of automatic loop
                     parallelization that occurs. The value of <n>
                     represents the lower limit allowed for
                     parallelization of a loop, based on the level
                     of "work" present in a loop.

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, opt, noomp, norec_locks, nonested_par,
                schedule=runtime, and threshold=100.

         -qspillsize=<bytes>
                The long form of -NS. See the -NS option.  The
                default is -qspillsize=512.

         -qstacktemp=<num>
                Determines where to allocate applicable compiler
                temporaries at run time. The allocation depends on
                the value of <num>. The values are:

                0
                     Indicates that the compiler will decide
                     whether to allocate the applicable compiler
                     temporaries on the heap or the stack.
                -1
                     Indicates that applicable compiler temporaries
                     are to be always allocated on the stack. This
                     is the best-performing setting but uses the
                     most amount of stack storage.
                (1 or greater)
                     Indicates that applicable compiler temporaries
                     less than this value (bytes) should be
                     allocated on the stack and those greater than
                     or equal to this value should be allocated on
                     the heap.

                The default is -qstacktemp=0.

         -qstrict | -qnostrict
                Ensures that optimizations done by the -O3 and
                greater (and optionally -O2) options do not alter
                the semantics of a program. This option is ignored
                for -qnoopt.  For -O3 and greater, the default is
                -qnostrict. Otherwise the default is -qstrict.

         -qstrict_induction | -qnostrict_induction
                Prevents the compiler from performing induction
                (loop counter) variable optimizations that could
                alter the semantics of a program.  The default is
                -qnostrict_induction.

         -qthreaded
                Asserts that the compiler will generate thread-safe
                code when generating its own code or allocating
                compiler-created temporary data. User-written code
                that is algorithmically not thread-safe is
                unaffected by this option and will remain non-
                thread-safe. The default is -qthreaded when using
                xlf_r, xlf_r7, xlf90_r, xlf90_r7, xlf95_r, or
                xlf95_r7 invocation commands.

         -qtune=<suboption>
                Tunes instruction selection, scheduling, and other
                implementation-dependent performance enhancements
                for a specific implementation of a hardware
                architecture.  -qtune will not alter the ability of
                a program to run on a processor but will produce
                optimal code sequences tuned to a particular
                processor.  The suboptions are:

                auto
                     Automatically detects the specific processor
                     type of the compiling machine and produces an
                     object optimized for that processor.
                601
                     Produces an object optimized for all the
                     PowerPC 601 processors.
                603
                     Produces an object optimized for all the
                     PowerPC 603 processors.
                604
                     Produces an object optimized for all the
                     PowerPC 604 processors.
                pwr
                     Produces an object optimized for the POWER
                     hardware platforms.
                p2sc
                     The optimizations are tuned for the POWER2
                     Super Chip.
                pwr2
                     Produces an object optimized for the POWER2
                     hardware platforms.
                pwrx
                     This is equivalent to pwr2.
                pwr2s
                     The optimizations are tuned for the desktop
                     implementation of the POWER2 architecture,
                     which has a narrower processor-to-memory bus
                     than other POWER2 implementations.
                pwr3
                     Produces an object optimized for the POWER3
                     hardware platforms.
                pwr4
                     Produces an object optimized for the POWER4
                     hardware platforms.
                pwr5
                     Produces an object optimized for the POWER5
                     hardware platforms.
                rs64a
                     Produces an object optimized for the RS64I
                     processor.
                rs64b
                     Produces an object optimized for the RS64II
                     processor.
                rs64c
                     Produces an object optimized for the RS64III
                     processor.
                ppc970
                     Produces an object optimized for PowerPC 970
                     processors.

                The compiler uses -qtune setting that is compatible
                with the target architecture, which is controlled
                by the -qarch, -q32, and -q64 options.  The default
                setting is determined by the setting of -qarch.

         -qunroll[={auto|yes}] | -qnounroll
                Specifies whether unrolling DO loops is allowed in
                a program. Unrolling is allowed on outer and inner
                DO loops.  The suboptions are:

                auto
                     The compiler performs basic loop unrolling.
                yes
                     The compiler looks for more opportunities to
                     perform loop unrolling than is done with the
                     -qunroll=auto option. Specifying -qunroll with
                     no suboptions is equivalent to -qunroll=yes.

                The default is -qunroll=auto.

         -qunwind | -qnounwind
                Specifies that the compiler will preserve the
                default behavior for saves and restores to volatile
                registers during a procedure call.  If you specify
                -qnounwind, the compiler rearranges subprograms to
                minimize saves and restores to volatile registers.
                This rearrangement may make it impossible for the
                program or debuggers to walk through or "unwind"
                subprogram stack frame chains.  The default is
                -qunwind.

         -qvecnvol | -qnovecnvol
                Asserts that the compiled application will use both
                volatile and non-volatile vector registers. You
                should use this option only after understanding
                interoperability with old binaries. If you are
                compiling C/C++ code in Fortran which calls any of
                the following subroutines: setjmp(),longjmp(),
                sigsetjmp(), siglongjmp(), _setjmp(), _longjmp(),
                getcontext(), setcontext(), makecontext(), and
                swapcontext(), then you should set -qnovecnvol.
                bos.adt.include version 5.3.0.30 or greater should
                be installed to use -qvecnvol on the host system.
                The default is -qnovecnvol.

         -qzerosize | -qnozerosize
                Improves performance of Fortran 77 and some Fortran
                90 and Fortran 95 programs by preventing checking
                for zero-sized character strings and arrays.
                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90, and f95 commands, the default is
                -qzerosize.  For the xlf, xlf_r, xlf_r7, f77, and
                fort77 commands, the default is -qnozerosize.

  Error Checking and Debugging Options
         -C     Checks each reference to an array element, array
                section, or character substring for correctness.
                This is the short form of -qcheck.

         -D     Specifies whether the compiler compiles fixed
                source form lines with a D in column 1 or treats
                them as comments. Please note that in order to pass
                C-style -D macro definitions to the C preprocessor
                (e.g. compiling a file that ends with .F) use the
                -W option. For example:
                -WF,-DDEFINE_THIS
                -D is the short form of -qdlines.

         -g     Generates debug information for use by a symbolic
                debugger.

         -qcheck | -qnocheck
                The long form of the -C option. See -C for details.
                The default is -qnocheck.

         -qdbg | -qnodbg
                The long form of the -g option. See -g for details.
                The default is -qnodbg.

         -qdpcl | -qnodpcl
                Generates symbols that tools based on the Dynamic
                Probe Class Library (DPCL) API can use to see the
                structure of an executable file. You must also
                specify the -g option when you specify -qdpcl.
                This option has no effect when optimization (-O) is
                enabled. The default is -qnodpcl.

         -qextchk | -qnoextchk
                Sets up type-checking information for common
                blocks, procedure definitions, procedure
                references, and module data. Later, the linker can
                detect mismatches across compilation units using
                this information.  The default is -qnoextchk.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Determines what types of floating-point exception
                conditions to detect at run time. The program
                receives a SIGTRAP signal when the corresponding
                exception occurs.  <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                enable
                     Turn on checking for the specified exceptions
                     in the main program so that the exceptions
                     generate SIGTRAP signals.
                imprecise
                     Only check for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detect and trap on floating-point inexact, if
                     exception checking is enabled.
                invalid
                     Detect and trap on floating-point invalid
                     operations.
                nanq
                     Detect and trap all quiet not-a-number (NaNQ)
                     values and signaling not-a-number (NaNS)
                     values.
                overflow
                     Detect and trap on floating-point overflow.
                underflow
                     Detect and trap on floating-point underflow.
                zerodivide
                     Detect and trap on floating-point division by
                     zero.

                The default is -qnoflttrap. When -qflttrap is
                specified with no suboptions, the default activated
                suboptions are: overflow, underflow, zerodivide,
                invalid, and inexact.

         -qfullpath | -qnofullpath
                Records the full (or absolute) path names of source
                and include files in object files compiled with
                debugging information (-g option).  The default is
                -qnofullpath.

         -qhalt=<sev>
                Stops before producing any object, executable, or
                assembler source files if the maximum severity of
                compile-time messages equals or exceeds the
                specified severity <sev>, where the severity levels
                are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                The default is -qhalt=s.

         -qinitauto[=<hex_value>] | -qnoinitauto
                Initializes each byte or word (4 bytes) of storage
                for automatic variables to a specific value,
                depending on the length specified in <hex_value>.
                This helps you to locate variables that are
                referenced before they are defined. <hex_value> is
                a 1 to 8 digit hexadecimal number.  The default is
                -qnoinitauto. If you specify -qinitauto without a
                <hex_value>, the compiler initializes the value of
                each byte of automatic storage to zero. This option
                should be used for debugging purposes only.

         -qlanglvl=<suboption>
                Determines which language standard (or
                subset/superset of a standard) to check against for
                nonconformance. This option will only produce
                messages; all code valid in extended mode will
                compile regardless of which suboption is specified.
                The suboptions are:

                77std
                     Accepts the language specified by the ANSI
                     Fortran 77 standard.
                90std
                     Accepts the language specified by the ISO
                     Fortran 90 standard.
                90pure
                     Same as 90std, except that it reports errors
                     for any obsolescent Fortran 90 features used.
                90ext
                     Obsolete suboption that is equivalent to
                     extended.
                95std
                     Accepts the language specified by the ISO
                     Fortran 95 standard.
                95pure
                     Same as 95std, except that it also reports
                     errors for any obsolescent Fortran 95 features
                     used.
                2003std
                     Accepts the language that the ISO Fortran 95
                     standard specifies, as well as all Fortran
                     2003 features supported by XL Fortran, and
                     reports anything else as an error.
                2003pure
                     The same as 2003std except that it also
                     reports errors for any obsolescent Fortran
                     2003 features used.
                extended
                     Accepts the full Fortran 95 language standard,
                     all Fortran 2003 features supported by XL
                     Fortran, and all extensions, effectively
                     turning off language-level checking.

                The default is -qlanglvl=extended.

         -qlinedebug | -qnolinedebug
                Generates line number and source file name
                information for the debugger. This option produces
                minimal debugging information, so the resulting
                object size is smaller than what is produced if the
                -g debugging option is specified. The default is
                -qnolinedebug.

         -qobject | -qnoobject
                Specifies whether to produce an object file or to
                stop immediately after checking the syntax of the
                source files.  The default is -qobject.

         -qsaa | -qnosaa
                Checks for conformance to the SAA Fortran language
                definition. It identifies nonconforming source code
                and also options that allow such nonconformances.
                The default is -qnosaa.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, and other information, in the
                corresponding object file. The compilation must
                produce an object file for this option to take
                effect.  The default is -qnosaveopt.

         -qsigtrap[=<trap_handler>]
                When you are compiling a file that contains a main
                program, this option sets up the specified trap
                handler to catch SIGTRAP exceptions. This option
                enables you to install a handler for SIGTRAP
                signals without calling the SIGNAL subprogram in
                the program. Specifying -qsigtrap with no
                <trap_handler> is equivalent to -qsigtrap=xl__trce.

         -qtbtable=<suboption>
                Limits the amount of debugging traceback
                information in object files, which reduces the size
                of the program. The suboptions are:

                none
                     Includes no traceback information.
                small
                     Includes traceback information but not the
                     names of procedures or information about
                     procedure parameters.
                full
                     Includes complete traceback information.

                The default is full traceback information in the
                object file when compiling non-optimized (without
                -O) or for debugging (with -g).  Otherwise, the
                default is -qtbtable=small.

         -qwarn64 | -qnowarn64
                Assists in porting code from a 32-bit environment
                to a 64-bit environment by detecting the truncation
                of an 8-byte integer pointer to 4 bytes. The
                -qwarn64 option uses informational messages to
                identify statements that may cause problems with
                the 32-bit to 64-bit migration.  The default is
                -qnowarn64.

         -qxflag=<suboption>
                Specifies rarely-needed compiler behaviors.  The
                suboptions are:

                oldtab
                     For fixed source form programs, interprets a
                     tab in columns 1 to 5 as a single character.
                     The source statement still starts immediately
                     after the tab, but the tab character is
                     treated as a single character for counting
                     columns. This setting allows up to 71
                     characters of input, depending on where the
                     tab character occurs.
                dvz
                     Specifying -qxflag=dvz causes the compiler to
                     generate code to detect floating-point
                     divide-by-zero operations. With this option
                     on, the extra code calls the external handler
                     function __xl_dzx when the divisor is zero.
                xalias
                     This is obsolete. Please use -qalias=nostd in
                     your new applications.

         -qxlines | -qnoxlines
                Specifies whether fixed source form lines with a X
                in column 1 are compiled or treated as comments.
                The default is -qnoxlines.

  Listing and Message Options
         -#     Generates information on the progress of the
                compilation without actually running the individual
                components.

         -S     Produces one or more .s files, showing equivalent
                assembler source for each Fortran source file.

         -V     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes. This is the
                same as -v except that you can cut and paste
                directly from the display to create a command.

         -v     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes.

         -w     Suppresses informational, language-level, and
                warning messages. This option sets -qflag=e:e.

         -qattr[=full] | -qnoattr
                Specifies whether to produce the attribute
                component of the attribute and cross-reference
                section of the listing.  The listing contains all
                identifiers (-qattr=full) or only the names that
                are referenced (-qattr).  The default is -qnoattr.

         -qflag=<listing_severity>:<terminal_severity>
                Specifies the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> determines
                the minimum level for the listing file, and
                <terminal_severity> determines the minimum level
                for the terminal.  The severity levels are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                Note that both <listing_severity> and
                <terminal_severity> must be specified.  The default
                is -qflag=i:i.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                Specifying -qlist with no suboptions is equivalent
                to specifying -qlist=nooffset.  The default is
                -qnolist.

         -qlistopt | -qnolistopt
                Determines whether to show the setting of every
                compiler option in the listing file or only
                selected options. These selected options include
                those specified on the command line or directives
                plus some that are always put in the listing.  The
                default is -qnolistopt.

         -qnoprint
                Prevents the compiler from creating the listing
                file, regardless of the settings of other listing
                options.

         -qphsinfo | -qnophsinfo
                Determines whether timing information is displayed
                on the terminal for each compiler phase.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qreport[=<suboptions>] | -qnoreport
                Determines whether to produce transformation
                reports showing how the program is parallelized and
                how loops are optimized.  The suboptions are:

                hotlist
                     Produces a report showing how loops are
                     transformed.
                smplist
                     Produces a report showing how the program is
                     parallelized.

                The default is -qnoreport.

         -qsource | -qnosource
                Determines whether to produce the source section of
                the listing.  The default is -qnosource.

         -qsuppress[={<msg_nums_list>|cmpmsg}] | -qnosuppress
                Determines which messages to suppress from the
                output stream.  The suboptions are:

                <msg_nums_list>
                     A colon-separated list of 7-digit compiler
                     message numbers.
                cmpmsg
                     Suppresses the informational messages that
                     report compilation progress and a successful
                     completion.

                The default is -qnosuppress.

         -qversion
                Displays the version and release of the invoking
                compiler. Specify this option on its own with the
                compiler command.

         -qxref[=full] | -qnoxref
                Determines whether to produce the cross-reference
                component of the attribute and cross-reference
                section of the listing.  If you specify only
                -qxref, only identifiers that are used are
                reported. If you specify -qxref=full, the listing
                contains information about all identifiers that
                appear in the program, whether they are used or
                not.  The default is -qnoxref.

  Compatibility Options
         -1     Executes each DO loop in the compiled program at
                least once if its DO statement is executed, even if
                the iteration count is 0. This option provides
                compatibility with Fortran 66. The default is to
                follow the behavior of later Fortran standards,
                where DO loops are not performed if the iteration
                count is 0. This is the short form of the -qonetrip
                option.

         -u     Specifies that no implicit typing of variable names
                is permitted. It has the same effect as using the
                IMPLICIT NONE statement in each scope that allows
                implicit statements. By default, implicit typing is
                allowed.

         -qautodbl=<setting>
                Converts single-precision floating-point
                calculations to double-precision or converts
                double-precision calculations to extended-
                precision.  <setting> can be:

                none
                     Does not promote or pad any objects that share
                     storage.
                dbl4
                     Promotes floating-point objects that are
                     single precision or are composed of such
                     objects.
                dbl8
                     Promotes floating-point objects that are
                     double-precision or are composed of such
                     objects.
                dbl
                     Combines the promotions done by dbl4 and dbl8.
                dblpad4
                     Performs the same promotions as dbl4, and pads
                     objects of other types (except CHARACTER) that
                     can share storage with promoted objects.
                dblpad8
                     Performs the same promotions as dbl8, and also
                     pads objects of other types (except CHARACTER)
                     if they can share storage with promoted
                     objects.
                dblpad
                     Combines the promotions done by dbl4 and dbl8,
                     and also pads objects of other types (except
                     CHARACTER) if they can share storage with
                     promoted objects.

                The default is -qautodbl=none.

         -qcclines | -qnocclines
                Enables recognition of conditional compilation
                lines in fixed source form and F90 free source
                form. IBM free source form is not supported.  The
                default is -qcclines if -qsmp=omp is specified.
                Otherwise, the default is -qnocclines.

         -qctyplss[={arg|noarg}] | -qnoctyplss
                Specifies whether character constant expressions
                are allowed wherever typeless constants may be
                used. Specifying -qctyplss=arg allows character
                constant expressions, but if a Hollerith constant
                is used as an actual argument, it is passed to the
                procedure as if it was an integer actual argument.
                The default is -qnoctyplss. If -qctypless is
                specified with no suboption, the default is
                -qctyplss=noarg.

         -qddim | -qnoddim
                Specifies that the bounds of pointee arrays are
                re-evaluated each time the arrays are referenced
                and removes some restrictions on the bounds
                expressions for pointee arrays.  The default is
                -qnoddim.

         -qdpc[=<e>] | -qnodpc
                Increases the precision of real constants, for
                maximum accuracy, when assigning real constants to
                DOUBLE PRECISION variables. -qdpc=<e> also promotes
                constants with an <e> exponent.  The default is
                -qnodpc.

         -qescape | -qnoescape
                Specifies whether the backslash is treated as an
                escape character in character strings, Hollerith
                constants, H edit descriptors, and character string
                edit descriptors.  The default is -qescape.

         -qextern=<procedure_names_list>
                Allows user-written procedures to be called instead
                of XL Fortran intrinsics. <procedure_names_list> is
                a colon-separated list of procedure names.  The
                procedure names are treated as if they appear in an
                EXTERNAL statement in each compilation unit being
                compiled.

         -qextname[=<names_list>] | -qnoextname
                Adds an underscore to the names of all global
                entities, which helps in porting programs from
                systems where this is a convention for mixed-
                language programs. <names_list> is a colon-
                separated list of global entity names.  The default
                is -qnoextname.

         -qinit=f90ptr
                Makes the initial association status of pointers
                disassociated instead of undefined. The default
                association status of pointers is undefined.

         -qintlog | -qnointlog
                Allows mixture of integer and logical data entities
                in expressions and statements. The default is
                -qnointlog.

         -qintsize={2|4|8}
                Sets the size (in bytes) of default INTEGER and
                LOGICAL data entities (that is, those for which no
                length or kind is specified).  The default is
                -qintsize=4.

         -qlog4 | -qnolog4
                Specifies whether the result of a logical operation
                with logical operands is a LOGICAL(4) or is a
                LOGICAL with the maximum length of the operands.
                The default is -qnolog4.

         -qmodule=mangle81
                Specifies that the compiler should use the XL
                Fortran Version 8.1 naming convention for non-
                intrinsic module files. This option allows you to
                produce modules and their associated object files
                with the Version 10.1 compiler and link these
                object files with others compiled with the Version
                8.1 compiler, or earlier.

         -qnullterm | -qnonullterm
                Appends a null character to each character constant
                expression that is passed as a dummy argument, to
                make it more convenient to pass strings to C
                functions. The default is -qnonullterm.

         -qonetrip | -qnoonetrip
                The long form of the -1 option. See -1 for details.
                The default is -qnoonetrip.

         -qport=<suboption> | -qnoport
                Increases flexibility when porting programs to XL
                Fortran, providing a number of options to
                accommodate Fortran language extensions.  The
                suboptions are:

                clogicals | noclogicals
                     Allows non-zero integers to be treated as true
                     when used as logicals. The change affects all
                     logical operators. This suboption only takes
                     effect if -qintlog is activated.  The default
                     is noclogicals.
                hexint | nohexint
                     Specifies that typeless constant hexadecimal
                     strings are converted to integers when passed
                     as actual arguments to the INT intrinsic
                     function. Typeless constant hexadecimal
                     strings which are not passed as actual
                     arguments to INT remain unaffected.  The
                     default is nohexint.
                mod | nomod
                     Relaxes existing constraints on the MOD
                     intrinsic function, allowing two arguments of
                     the same data type parameter to be of
                     different kind type parameters. The result
                     will be of the same type as the argument, but
                     with the larger kind type parameter value.
                     The default is nomod.
                nullarg | nonullarg
                     For an external or internal procedure
                     reference, this causes the compiler to treat
                     an empty argument (which is delimited by a
                     left parenthesis and a comma, two commas, or a
                     comma and a right parenthesis) as a null
                     argument. This suboption has no effect if the
                     argument list is empty.  The default is
                     nonullarg.
                sce | nosce
                     By default, the compiler performs short
                     circuit evaluation in selected logical
                     expressions using XL Fortran rules. Specifying
                     'sce' allows the compiler to use non-XL
                     Fortran rules. The compiler will perform short
                     circuit evaluation if the current rules allow
                     it.  The default is nosce.
                typestmt | notypestmt
                     The TYPE statement, which behaves in a manner
                     similar to the PRINT statement, is supported
                     whenever this option is specified. The default
                     is notypestmt.
                typlssarg | notyplssarg
                     Converts all typeless constants to default
                     integers if the constants are actual arguments
                     to an intrinsic procedure whose associated
                     dummy arguments are of integer type. Dummy
                     arguments associated with typeless actual
                     arguments of non-integer type remain
                     unaffected by this option.  The default is
                     notyplssarg.

                The default is -qnoport.

         -qposition={appendold|appendunknown}
                Positions the file pointer at the end of the file
                when data is written after an OPEN statement with
                no "POSITION=" specifier, and the corresponding
                "STATUS=" value (OLD or UNKNOWN) is specified.  The
                default depends on the I/O specifiers in the OPEN
                statement and on the compiler invocation command.
                The default is -qposition=appendold for the xlf,
                xlf_r, xlf_r7, and f77/fort77 commands and the
                defined Fortran 90 and Fortran 95 behaviors for the
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, xlf95_r7,
                f90 and f95 commands.

         -qqcount | -qnoqcount
                Accepts the character-count Q edit descriptor (Q)
                as well as the extended-precision Q edit descriptor
                (Qw.d). With -qnoqcount, all Q edit descriptors are
                interpreted as the extended-precision Q edit
                descriptor.  The default is -qnoqcount.

         -qrealsize=<bytes>
                Sets the default size of REAL, DOUBLE PRECISION,
                COMPLEX and DOUBLE COMPLEX values. The allowed
                values for <bytes> are 4 and 8.  The default is
                -qrealsize=4.

         -qsave[=<suboption>] | -qnosave
                Specifies the default storage class for local
                variables.  The suboptions are:

                all
                     The default storage class for all local
                     variables is STATIC. This is the default when
                     -qsave is specified without a suboption.
                defaultinit
                     The default storage class is STATIC for local
                     variables of derived type that have default
                     initialization specified.

                Specifying -qnosave sets the default storage class
                to AUTOMATIC.  The default is -qsave for xlf,
                xlf_r, xlf_r7, f77, or fort77 to duplicate the
                behavior of FORTRAN77 commands, and -qnosave
                otherwise.

         -qsclk[=<suboption>]
                Specifies the resolution that the SYSTEM_CLOCK
                intrinsic procedure uses in a program.  The
                suboptions are:

                centi
                     Uses centisecond resolution for the values
                     returned.
                micro
                     Uses microsecond resolution.

                The default is -qsclk=centi.

         -qswapomp | -qnoswapomp
                Specifies that the compiler should recognize and
                substitute OpenMP routines in XL Fortran programs.
                The default is -qswapomp.

         -qundef | -qnoundef
                The long form of the -u option. See -u for details.
                The default is -qnoundef.

         -qxlf77=<settings_list>
                Provides compatibility with Fortran 77 aspects of
                language semantics and I/O data format that have
                changed. Most of these changes are required by the
                Fortran 90 standard. <settings_list> is a colon-
                separated list of one or more of the following
                suboptions:

                blankpad | noblankpad
                     For internal, direct-access, and stream-access
                     files, uses a default setting equivalent to
                     pad='no'. This setting produces conversion
                     errors when reading from such a file if the
                     format requires more characters than the
                     record has, thus duplicating the XL Fortran
                     Version 2 behavior.
                gedit77 | nogedit77
                     Uses Fortran 77 semantics for the output of
                     REAL objects with the G edit descriptor.
                intarg | nointarg
                     Converts all the integer arguments of an
                     intrinsic procedure to the kind of the longest
                     argument, if they are of different kinds.
                intxor | nointxor
                     Treats .XOR. as a logical binary intrinsic
                     operator rather than a defined operator.
                leadzero | noleadzero
                     Produces a leading zero in real output under
                     the D, E, L, F and Q edit descriptors.
                oldboz | nooldboz
                     Turns blanks into zeros for data read by B, O,
                     and Z edit descriptors, regardless of the
                     "BLANK=" specifier or any BN or BZ control
                     edit descriptors.
                persistent | nopersistent
                     Saves the addresses of arguments to
                     subprograms with ENTRY statements in static
                     storage.
                softeof | nosofteof
                     Allows READ and WRITE operations when a unit
                     is positioned after its endfile record, unless
                     that position is the result of executing an
                     ENDFILE statement.

                The default suboptions are: blankpad, nogedit77,
                nointarg, nointxor, leadzero, nooldboz,
                nopersistent, and nosofteof for the f90, xlf90,
                xlf90_r, xlf90_r7, f95, xlf95, xlf95_r, and
                xlf95_r7 commands, and are the exact opposite for
                the xlf, xlf_r, xlf_r7, f77, and fort77 commands.

         -qxlf90=<settings_list>
                Provides backward compatibility with XL Fortran for
                AIX Version 5 and the Fortran 90 standard for
                certain aspects of the Fortran language.
                <settings_list> is a colon-separated list of one or
                both of the following suboptions:

                signedzero | nosignedzero
                     Determines how the SIGN(A,B) function handles
                     signed real 0.0. Prior to XL Fortran Version
                     6.1, SIGN(A,B) returned |A| when B=-0.0. This
                     behavior conformed with the Fortran 90
                     standard. Now, if you specify the
                     -qxlf90=signedzero compiler option, SIGN(A,B)
                     returns -|A| when B=-0.0. This behavior
                     conforms to the Fortran 95 standard and is
                     consistent with the IEEE standard for binary
                     floating-point arithmetic.
                autodealloc | noautodealloc
                     Determines whether the compiler deallocates
                     allocatable objects that are declared locally
                     without either the SAVE or the STATIC
                     attribute and have a status of currently
                     allocated when the subprogram terminates.

                The default suboptions are signedzero and
                autodealloc for the xlf95, xlf95_r, xlf95_r7 and
                f95 invocation commands. For all other invocation
                commands, the default suboptions are nosignedzero
                and noautodealloc.

  Linking Options
         -b64   The AIX operating system provides 64-bit shared
                object files in both libc.a and libm.a. In 64-bit
                mode, you can use the -b64 linker option to
                instruct ld to bind with 64-bit objects.

         -bdynamic, -bshared, -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                This is available on AIX 4.2 and above.

                -bdynamic
                     Specifies that shared objects are linked
                     dynamically.
                -bshared
                     Equivalent to -bdynamic.
                -bstatic
                     Specifies that shared objects are statically
                     linked into the output file.

                The default is -bdynamic.

         -bhalt:<error_level>
                Specifies the maximum error level that is allowed
                before the linker (ld) command halts. If any linker
                command has an error return value greater than the
                value that is specified by the <error_level>
                variable, linking stops.  The default value is 4,
                as specified in the configuration file.

         -bloadmap:<filename>
                Requests that a log of linker actions and messages
                be saved in file <filename>. You can use the log to
                help diagnose linking problems.

         -bmaxdata=<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint.  The default
                is -bmaxdata=0.

         -bmaxstack:<bytes>
                Specifies the maximum amount of space to reserve
                for the program stack segment for programs where
                the size of these regions is a constraint.

         -brtl | -bnortl
                Determines which algorithm will be used to find
                libraries that are specified with the -l option. If
                -brtl is specified, run-time linking is enabled.

         -bshared
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.
                This is equivalent to -bdynamic.

         -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.

         -L<dir>
                Searches in directory <dir> for libraries specified
                by -l<key>.

         -l<key>
                Searches the specified library file at link time,
                where <key> selects the library lib<key>.a.

  Compiler Customization Options
         -B<prefix>
                Determines a substitute path name for executable
                files used during compilation, such as the compiler
                of linker. <prefix> is the name of a directory
                where the alternative executable files reside. It
                is added to the beginning of the standard program
                names and must end in a slash (/). This option can
                be used in combination with the -t option, which
                determines which of these components are affected
                by -B.

         -F[<config_file>][:<stanza>]
                Specifies an alternative configuration file
                <config_file>, the command to be used (<stanza>)
                within the configuration file, or both. At least
                one of the arguments must be supplied.  The default
                stanza depends on the name of the command used to
                invoke the compiler.

         -P{v|k}[!]
                This option is obsolete and has no effect. Invokes
                the selected optimizing preprocessor.

         -P     Invokes the -Pv preprocessor before the compiler.

         -Pv    Invokes the -Pv preprocessor before the compiler.

         -Pk    Invokes the -Pk preprocessor before the compiler.

         -P!    Invokes the -Pv preprocessor only.

         -Pv!   Invokes the -Pv preprocessor only.

         -Pk!   Invokes the -Pk preprocessor only.

         -t<components_list>
                Applies the prefix from the -B option to the
                specified program, <components_list>, where
                <components_list> is a chain (with no separator
                character inbetween each <component>, ie: "-taFp")
                containing one or more of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

         -W<component>,<options_list>
                Passes the listed options to a component that is
                executed during compilation. <options_list> is a
                comma-separated list of one or more options, and
                <component> is one of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies compile-time rounding of constant
                floating-point expressions. It is equivalent to the
                -qieee option. <rounding_mode> is one of the
                following:

                n = Round to nearest
                m = Round toward minus infinity
                p = Round toward plus infinity
                z = Round toward zero

                The default is -yn.

         -qfloat=<suboptions_list>
                Determines different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using an inline sequence of
                     code instead of a call to a library function.
                fold | nofold
                     Evaluates constant floating-point expressions
                     at compile time.
                hsflt | nohsflt
                     Speeds up calculations by removing range-
                     checking on single-precision float results,
                     and on conversions from floating-point to
                     integer.
                hssngl | nohssngl
                     Speeds up calculations in a safer way than
                     hsflt, by rounding single-precision
                     expressions only when the results are stored
                     into REAL(4) memory locations
                maf | nomaf
                     Generates multiply-add instructions where
                     appropriate.
                nans | nonans
                     Allows you to use the -qflttrap=invalid:enable
                     option to detect and deal with exception
                     conditions that involve signaling NaN (not-a-
                     number) values.
                rndsngl | norndsngl
                     Rounds the result of each single-precision
                     (REAL(4)) operation to single-precision,
                     rather than waiting until the full expression
                     is evaluated. It sacrifices speed for
                     consistency with results from similar
                     calculations on other types of computers.
                rrm | norrm
                     Turns off compiler optimizations that require
                     the rounding mode to be the default, round-
                     to-nearest, at run time.
                rsqrt | norsqrt
                     Allows the optimizer to change a division by
                     the result of a square root operation into a
                     multiply by the reciprocal of the square root.
                strictnmaf | nostrictnmaf
                     Turns off floating-point transformations that
                     are used to introduce negative MAF
                     instructions, as these transformations do not
                     preserve the sign of a zero value.
                The default active suboptions are: nofltint, fold,
                nohsflt, nohssngl, maf, nonans, norelax, norndsngl,
                norrm, norsqrt, and nostrictnmaf.

         -qieee=<mode>
                Specifies the rounding mode for the compiler to use
                when evaluating constant floating-point expressions
                at compile time, where <mode> is one of:

                near = Round to nearest representable number
                minus = Round toward minus infinity
                plus = Round toward plus infinity
                zero = Round toward zero

                The default is -qieee=near.

         -qstrictieeemod | -qnostrictieeemod
                Specifies that the compiler will adhere to the
                Fortran 2003 IEEE arithmetic rules for the
                ieee_arithmetic and ieee_exceptions intrinsic
                modules.  The default is -qstrictieeemod.

  SEE ALSO
         xlfndi(1), showpdf(1), cleanpdf(1), mergepdf(1),
         resetpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/fortran/xlfortran/library/
         www.ibm.com/software/awdtools/fortran/xlfortran/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL Fortran Enterprise Edition V10.1 for AIX(R)

         5724-M13

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.









































configure:6574: $? = 249
configure:6581: xlf -v >&5
exec: export(export,XL_CONFIG=/etc/xlf.cfg:xlf,NULL) 
exec: pg(pg,/usr/lpp/xlf/bin/default_msg/xlf.txt,NULL) 



  xlf(1)                 IBM (October 2005)                  xlf(1)



  NAME
         xlf, xlf90, xlf95, xlf_r, xlf90_r, xlf95_r, f90, f95,
         xlf_r7, xlf90_r7, xlf95_r7, f77, fort77 - invoke the IBM
         XL Fortran compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

  DESCRIPTION
         xlf and related invocation commands compile Fortran source
         files.  They also process assembler source files and
         object files. Unless you specify the -c option, these
         commands call the link editor to produce a single object
         file.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/xlf.cfg).  For more information,
         refer to the XL Fortran Enterprise Edition Compiler
         Reference.

         The input file may have any of the following suffixes:
          .f - Fortran source file
          .f77 or .F77 - Fortran source file (fixed form) using
               f77 stanza configuration
          .f90 or .F90 - Fortran source file (free form) using
               xlf90 configuration
          .f95 or .F95 - Fortran source file (free form) using
               xlf95 configuration
          .o or .a - object file for ld command
          .s - assembler source file
          .F - Fortran source file with cpp preprocessor directives

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -I<dir>
                Adds a directory to the search path for include
                files and .mod files. If XL Fortran calls cpp, this
                option adds a directory to the search path for
                #include files. Before checking the default
                directories for include and .mod files, the
                compiler checks each directory in the search path.
                For include files, this path is only used if the
                file name in an INCLUDE line is not provided with
                an absolute path. By default, the following
                directories are searched in the following order:

                1) The current directory (where the compiler is
                executed)
                2) The directory where the source file is located

         -k     Specifies that the program is in free source form.
                This is the short form of -qfree=f90.

         -U     Makes the compiler case-sensitive to identifier
                names. By default the compiler interprets all names
                as if they were lower-case.

         -qci=<nums_list>
                Activates the specified INCLUDE lines. <nums_list>
                is a colon-separated list of identification numbers
                (from 1 to 255) of conditional includes.

         -qcr | -qnocr
                Allows you to control how the compiler interprets
                the CR (carriage return) character.  This allows
                you to compile code written using a MAC OS X or
                DOS/Windows editor.  The default is -qcr.

         -qdirective[=<list>] | -qnodirective[=<list>]
                Specifies target strings to be recognized in a
                comment directive. <list> is a colon-separated list
                of directives. If -qdirective is specified without
                any directives, it turns on the default trigger
                constant IBM* if it has been turned off by a
                previous -qnodirective.  The default is
                -qnodirective.

         -qdlines | -qnodlines
                This is the long form of the -D option. See -D for
                more information.  The default is -qnodlines.

         -qfixed[=<right_margin>]
                Indicates that the input source program is in fixed
                source form and optionally specifies the maximum
                line length, <right_margin>. The maximum
                <right_margin> value is 132.  The default is
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77
                invocation commands, and -qfree=f90 for f90, f95,
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, and
                xlf95_r7.

         -qfree[={f90|ibm}]
                Indicates that the source code is in free source
                form. The 'ibm' and 'f90' suboptions specify
                compatibility with the free source form defined for
                VS Fortran and Fortran 90, respectively. Note that
                the free source form defined for Fortran 90 also
                applies to Fortran 95.  The default is -qfree=f90
                for f90, f95, xlf90, xlf90_r, xlf90_r7, xlf95,
                xlf95_r, and xlf95_r7 invocation commands, and
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77.

         -qmbcs | -qnombcs
                Indicates to the compiler whether character literal
                constants, Hollerith constants, H edit descriptors,
                and character string edit descriptors can contain
                Multibyte Character Set (MBCS) or Unicode
                characters. The default is -qnombcs.

         -qmixed | -qnomixed
                The long form of the -U option. Makes the compiler
                case-sensitive to identifier names. The default is
                -qnomixed.

         -qsuffix=<option>=<suffix>
                Specifies the source file suffix, <suffix>, on the
                command line instead of in the .cfg file, where
                <option> can be:

                f
                     Specifies that <suffix> is the new source file
                     suffix.
                o
                     Specifies that <suffix> is the new object-file
                     suffix.
                s
                     Specifies that <suffix> is the new assembler
                     source file suffix.
                cpp
                     Specifies that <suffix> is the new
                     preprocessor source file suffix.

  Output Control Options
         -c     Produces an object file instead of an executable
                file.  Prevents the completed object file from
                being sent to the ld command for link-editing. With
                this option, the output is a .o file for each
                source file.

         -d     Causes preprocessed source files that are produced
                by cpp to be kept rather than to be deleted. By
                default temporary files produced by cpp are
                deleted.

         -o <name>
                Specifies a name for the output object, executable,
                or assembler source file.  The default name is
                a.out for executable files. The default name for an
                object source file is the same as the source file
                except that it has a '.o' extension.

         -q32   Selects 32-bit mode compilation mode. The -q32 and
                -qarch options determine the target machines that
                the 32-bit executable will run on. The default is
                -q32.

         -q64[=<suboption>]
                Selects 64-bit compilation mode. The -q64 option
                indicates that the object module will be created in
                64-bit object format and that the 64-bit
                instruction set will be generated. Note that you
                may compile in a 32-bit environment to create 64-
                bit objects, but you must link them in a 64-bit
                environment with the -q64 option. Use -q32 and -q64
                options, along with the -qarch and -qtune compiler
                options, to optimize the output of the compiler to
                the architecture on which that output will be used.
                The suboptions are:

                largetype
                     The object file will use the 64-bit Large Data
                     Type (LDT) ABI. This object file may only be
                     used on versions of AIX greater than or equal
                     to 5.0.

         -qmoddir=<directory>
                Specifies the location for any .mod files that the
                compiler writes. By default .mod files are placed
                in the current directory.

         -qpic[=<suboption>] | -qnopic
                Generates Position Independent Code (PIC) that can
                be used in shared libraries.  The suboptions are:

                large
                     Allows the size of the Table of Contents to be
                     larger than 64K. This suboption allows for
                     more addresses to be stored in the Table of
                     Contents and generates larger code.
                small
                     Assumes that the size of the Table of Contents
                     can be at most 64K.

                The default is -qpic=small.

  Optimization Options
         -NS<bytes>
                Specifies the size (in bytes) of the register spill
                space; the internal program storage areas used by
                the optimizer for register spills to storage.  The
                default is -NS512.

         -O[<level>]
                Specifies whether to optimize code during
                compilation and, if so, at which level. -O<level>
                is equivalent to -qoptimize=<level>. <level> can
                be:

                (not specified)
                     This is equivalent to -O2.
                0
                     Almost all optimizations are disabled. This is
                     equivalent to -qnooptimize.
                1
                     Reserved for future use. Ignored by compiler.
                2
                     Performs a set of optimizations that are
                     intended to offer improved performance without
                     an unreasonable increase in time or storage
                     that is required for compilation.
                3
                     Performs additional optimizations that are
                     memory intensive, compile-time intensive, and
                     may change the semantics of the program
                     slightly, unless -qstrict is specified. We
                     recommend these optimizations when the desire
                     for run-time speed improvements outweighs the
                     concern for limiting compile-time resources.
                     This level of optimization also affects the
                     setting of the -qfloat option, turning on the
                     'fltint' and 'rsqrt' suboptions by default,
                     and setting -qmaxmem=-1.  This option implies
                     -qhot=level=0.
                4
                     Aggressively optimizes the source program,
                     trading off additional compile time for
                     potential improvements in the generated code.
                     You can specify the option at compile time or
                     at link time. if you specify it at link time,
                     it will have no effect unless you also specify
                     it at compile time for at least the file that
                     contains the main program. -O4 implies the
                     following other options:
                     -qhot
                     -qipa
                     -O3
                     -qarch=auto
                     -qtune=auto
                     -qcache=auto
                5
                     Performs all optimizations from -O4, and also
                     sets -qipa=level=2 to perform full inter-
                     procedural data flow and alias analysis.

                -O4 and -O5 perform whole-program analysis and
                should be specified at both compilation and link
                time to have maximal effect.  The default is -O0.

         -p[g]  Sets up the object file for profiling. Specifying
                '-pg' will produce more extensive statistics. The
                default is no profiling.

         -Q[<suboption>]
                Specifies whether Fortran 90 or Fortran 95
                procedures are inlined and/or the names of
                particular procedures that should or should not be
                inlined. names is a list of procedure names that
                are separated by colons. This option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions,
                     subject to limits on the number of inlined
                     calls and the amount of code size increase as
                     a result.
                -Q!
                     Turns off inlining.
                -Q+<names_list>
                     Inlines the functions listed in <names_list>
                     and any other appropriate functions, where
                     <names_list> is a colon-separated list.
                -Q-<names_list>
                     Does not inline functions listed in
                     <names_list>, where <names_list> is a colon-
                     separated list. All other appropriate
                     functions are inlined.

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qalias=<suboptions_list>
                Indicates whether a program contains certain
                categories of aliasing. The compiler limits the
                scope of some optimizations when there is a
                possibility that different names are aliases for
                the same storage locations. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                aryovrlp | noaryovrlp
                     Indicates whether the compilation units
                     contain any array assignments between
                     storage-associated arrays. If not, specify
                     noaryovrlp to improve performance.
                intptr | nointptr
                     Indicates whether the compilation units
                     contain any integer POINTER statements. If so,
                     specify intptr.
                pteovrlp | nopteovrlp
                     Indicates whether any pointee variables may be
                     used to refer to any data objects that are not
                     pointee variables, or whether two pointee
                     variables may be used to refer to the same
                     storage location. If not, specify nopteovrlp.
                std | nostd
                     Indicates whether the compilation units
                     contain any non-standard aliasing (see
                     Compiler Reference for more information). If
                     so, specify nostd.  (-qalias=nostd replaces
                     the obsolete -qxflag=xalias option.)

                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90 and f95 commands, the default
                suboptions are: aryovrlp, nointptr, pteovrlp, and
                std. For the xlf, xlf_r, xlf_r7, f77, and fort77
                commands, the default suboptions are: aryovrlp,
                intptr, pteovrlp, and std.

         -qalign=<suboptions_list>
                Specifies the alignment of data objects in storage
                to avoid performance problems with misaligned data.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                4k | no4k
                     Specifies whether large arrays and structures
                     (at least 4096 bytes in size) will be aligned
                     on a 4K (4096-byte, or page) boundary.  Use of
                     this option may help to improve the
                     performance of programs using data striping.
                bindc=<suboption>
                     Specifies that the alignment and padding for
                     an XL Fortran derived type with the BIND(C)
                     attribute are compatible with a C struct type
                     that is compiled with the corresponding XL C
                     alignment option. The compatible alignment
                     options are:
                     -qalign=bindc=bit_packed
                     -qalign=bindc={full|power}
                     -qalign=bindc=packed
                     -qalign=bindc={twobyte|mac68k}
                     -qalign=bindc=natural
                     Each of these "-qalign=bindc=" sub-suboptions
                     is equivalent to the XL C "-qalign=" suboption
                     of the same name.  (ie: For
                     -qalign=bindc=bit_packed, the corresponding XL
                     C option is -qalign=bit_packed)
                struct=<option>
                     Specifies how objects or arrays of a derived
                     type (declared using a record structure) are
                     stored, and whether or not padding is used
                     between components. The options are:
                     natural
                          Objects of a derived type are stored with
                          sufficient padding such that components
                          will be stored on their natural alignment
                          boundaries, unless storage association
                          requires otherwise.
                     packed
                          Objects of a derived type are stored with
                          no padding between components, other than
                          any padding represented by %FILL
                          components.
                     port
                          Storage padding is the same as described
                          above for the struct=natural suboption,
                          except that the alignment of components
                          of type complex is the same as the
                          alignment of components of type real of
                          the same kind. The padding for an object
                          that is immediately followed by a union
                          is inserted at the beginning of the first
                          map component for each map in that union.

                The default activated suboptions are: no4k,
                struct=natural, and bindc=power.

         -qarch=<suboption>
                Specifies which instructions the compiler can
                generate.  The suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                com
                     You can run the executable file that the
                     compiler generated on any hardware platform
                     supported by the compiler, because the file
                     contains only instructions that are common to
                     all machines.
                p2sc
                     The executable file can be executed on any
                     POWER2 Super Chip hardware platform.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms. Using -q64 with ppc upgrades the
                     architecture to ppc64grsq.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.  In 64-bit mode,
                     produces object code containing optional
                     graphics instructions that will run on 64-bit
                     PowerPC platforms, but not on 32-bit-only
                     platforms.  Using -q64 with ppcgr upgrades the
                     architecture to ppc64grsq.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                pwr
                     Produces an object that contains instructions
                     that run on any of the POWER or POWER2
                     hardware platforms.
                pwr2s
                     The executable file can be executed on any
                     desktop implementation of the POWER2 chip.
                pwr2
                     Produces an object that contains instructions
                     that run on the POWER2 hardware platforms.
                pwrx
                     Equivalent to pwr2.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3, POWER4, POWER5,
                     POWER5+ or PowerPC 970 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4, POWER5, POWER5+ or
                     PowerPC 970 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 or POWER5+ hardware
                     platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on any POWER5+ hardware platform.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.
                601
                     Produces an object that contains instructions
                     that run on PowerPC 601 systems.
                603
                     Produces an object that contains instructions
                     that run on PowerPC 603 systems.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                ppc64v
                     Generates instructions for any 64-bit PowerPC
                     processor (like PowerPC 970) with VMX.

                The default is -qarch=com.

         -qassert=<suboptions_list>
                Provides information about the program to help
                fine-tune optimizations. <suboptions_list> is a
                colon-separated list of one or both of the
                following suboptions:

                deps | nodeps
                     Loops can contain loop-carried dependencies.
                itercnt=<n>
                     The iteration count of a typical loop is <n>.

                The default is -qassert=deps:itercnt=1024.

         -qcache=<suboptions_list>
                Specifies the cache configuration for a specific
                execution machine. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                assoc=<n>
                     Specifies the set-associativity of the cache:
                     0   = Directly-mapped
                     1   = Fully associative
                     (n > 1) = <n>-way set-associative
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty resulting
                     from a cache miss.
                level=<level>
                     Specifies which level of cache is affected:
                     1 = Basic cache
                     2 = Level-2 cache, or the table lookaside
                     buffer (TLB) if the machine has no level-2
                     cache
                     3 = TLB, in a machine that does have a level-2
                     cache
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<type>
                     Specifies the type of cache that the settings
                     apply to:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The default is determined by the -qtune and -qarch
                settings.

         -qcompact | -qnocompact
                Reduces optimizations that increase code size.  The
                default is -qnocompact.

         -qdirectstorage | -qnodirectstorage
                Specifies that a compilation unit might reference
                write-through-enabled or cache-inhibited storage.
                The default is -qnodirectstorage.

         -qenablevmx | -qnoenablevmx
                Enables generation of Vector Multimedia Extension
                (VMX) instructions.  The default is -qnoenablevmx.

         -qessl | -qnoessl
                Allows the use of the Engineering and Scientific
                Subroutine Library (ESSL) routines in place of
                Fortran 90 intrinsic procedures.  The default is
                -qnoessl.

         -qfdpr | -qnofdpr
                Provides object files with information that the AIX
                Feedback Directed Program Restructuring (fdpr)
                performance-tuning utility needs to optimize the
                resulting executable file.  The default is
                -qnofdpr.

         -qhot[=<suboptions>] | -qnohot
                Performs high-order loop analysis and
                transformations during optimization. This option is
                a powerful alternative to hand-tuning that provides
                opportunities to optimize loops and array language.
                The suboptions are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value. When <n> is not
                     specified, the compiler will pad any arrays
                     where it infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. See the XL Fortran
                     Compiler Reference for more information.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a VMX (Vector Multimedia Extension)
                     instruction.  If you specify -qhot=nosimd, the
                     compiler performs optimizations on loops and
                     arrays, but avoids replacing certain code with
                     VMX instructions.
                vector | novector
                     Specifies whether to allow the compiler to
                     optimize by replacing code with calls to
                     vector library routines.  Only takes effect
                     when specified with -qnostrict or -O3 or
                     higher optimization level.

                The default is -qnohot. If -qhot is specified
                without parameters, the default is -qhot=vector.

         -qipa[=<suboptions_list>] | -qnoipa
                Enhances -O optimization by performing detailed
                analysis across procedures. Optimization level -O2
                or higher is required when using -qipa.
                <suboptions_list> is a colon-separated list of
                suboptions. Regular expressions are supported when
                specifying <procedure_names_list> in the following
                -qipa suboptions: exits, inline, noinline, lowfreq,
                pure, safe, and unknown. <procedure_names_list> is
                a comma-separated list. The suboptions are:

                exits=<procedure_names_list>
                     Specifies a selected set of procedures which
                     always end the program.
                clonearch=<architecture_list> | noclonearch
                     Allows you to specify multiple architectures
                     in the event that you want to compile your
                     application for multiple architectures with a
                     single binary file. <architecture_list> is a
                     comma-separated list of one or more of the
                     following architectures: pwr4, pwr5, ppc970,
                     and pwr5x. This must be specified during link
                     time.  The default is noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of the mangled names of the functions that you
                     wish to clone (or not clone). Please note that
                     this suboption has no effect unless
                     -qipa=clonearch=<arch> is specified. You can
                     use regular expression syntax when specifying
                     function names.  The default is nocloneproc.
                inline=<options_list>
                     Specifies a colon-separated list of inline
                     options, which are as follows:
                     auto | noauto
                          Specifies whether to automatically
                          perform inline expansion.  The default is
                          auto.
                     limit=<n>
                          Changes the size limits that the
                          inline=auto option uses to determine how
                          much inline expansion to do. <n> is the
                          optimizers approximation of the number of
                          bytes of code that will be generated.
                     <procedure_names_list>
                          Specifies the procedures to attempt to
                          inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This argument is
                          implemented only when inline=auto is on.
                noinline=<procedure_names_list>
                     Specifies the procedures which are not to be
                     inlined.
                isolated=<procedure_names_list>
                     Specifies the procedures that are not compiled
                     with -qipa and do not directly refer to any
                     global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization to perform:
                     0
                          Performs minimal inter-procedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full inter-procedural data flow and alias
                          analysis.
                     The default level is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, in the event that an object
                     listing has been requested using the -qlist or
                     -qipa=list option. The default name is
                     "a.lst". Specifying 'long' or 'short'
                     determines which listing sections will be
                     included. The default is short.
                lowfreq=<procedure_names_list>
                     Specifies the procedures that are likely to be
                     called infrequently during the course of a
                     typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the interprocedural behavior for
                     procedures not compiled with -qipa.  The
                     default is 'unknown'.
                object | noobject
                     Includes standard object code in the object
                     files. If the noobject option is specified, it
                     can substantially reduce overall compilation
                     time by not generating object code during the
                     first IPA phase. The default is object. Note,
                     this is a compile-time suboption.
                partition={small|medium|large}
                     Specifies the size of the regions within the
                     program to analyze. Larger partitions contain
                     more procedures, which result in better
                     interprocedural analysis but require more
                     storage to optimize.  The default is medium.
                pdfname=<filename>
                     Specifies the name of the profile data file
                     that contains the PDF profiling information.
                     The default filename is __pdf.
                pure=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "pure" must be "isolated" and
                     "safe". It must not alter the internal state
                     nor have side-effects, which are defined as
                     potentially altering any data object visible
                     to the caller.
                safe=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "safe" may modify global
                     variables and dummy arguments.
                stdexits | nostdexits
                     Specifies that certain predefined routines can
                     be optimized as with the exits suboption. The
                     procedures are abort, exit, _exit, and
                     _assert.  The default is nostdexits.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure specified
                     as "unknown" may make calls to other parts of
                     the program compiled with -qipa and modify
                     global variables and dummy arguments.

                Options intended for use by the link-time phase of
                -qipa are -qlibansi, -qlibessl, -qlibposix and
                -qthreaded.  The default is -qnoipa.

         -qkeepparm | -qnokeepparm
                Ensures that the incoming parameters are stored on
                the stack even when optimizing. This may negatively
                impact execution performance. This option then
                provides access to the values of incoming
                parameters to tools, such as debuggers, simply by
                preserving those values on the stack.  The default
                is -qnokeepparm.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large 16 MB pages provided on POWER4 and higher
                based systems.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are in fact the library
                functions.  The default is -qnolibansi.

         -qlibessl | -qnolibessl
                Assumes that all functions with the name of an ESSL
                defined library function are, in fact, the library
                functions.  The default is -qnolibessl.

         -qlibposix | -qnolibposix
                Assumes that all functions with the name of a POSIX
                1003.1 defined library function are, in fact, the
                system functions.  The default is -qnolibposix.

         -qmaxmem=<kbytes>
                Limits the amount of memory that the compiler
                allocates while performing specific, memory-
                intensive optimizations. If <kbytes> is -1, the
                compiler will take as much memory as it needs
                without checking for limits. The default is
                -qmaxmem=2048 when using optimization level -O2,
                and -qmaxmem=-1 when using -O3 or greater.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 Produces an object that is instrumented to collect
                run-time execution information. This is phase 1 of
                the profile-directed feedback optimization process.

         -qpdf2 Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

         -qprefetch | -qnoprefetch
                Automatically inserts prefetch instructions where
                the optimizer perceives a benefit.  The default is
                -qprefetch.

         -qrecur | -qnorecur
                Not recommended. Allows external subprograms to be
                called recursively. For new programs, use the
                RECURSIVE keyword, which provides a standard-
                conforming way of using recursive procedures.  The
                default is -qnorecur.

         -qshowpdf | -qnoshowpdf
                Adds additional call and block count profiling
                information to an executable. This option is used
                together with the -qpdf1 option.  The default is
                -qnoshowpdf.

         -qsmallstack[=<suboption>] | -qnosmallstack
                Specifies that the compiler will minimize stack
                usage where possible. This option can take the
                form:

                -qsmallstack
                     Enables only general small stack
                     transformations.
                -qsmallstack=dynlenonheap
                     Asserts that automatic variables which are
                     dynamically-sized are allocated from the heap
                     and enables general small stack
                     transformations.
                -qsmallstack=nodynlenonheap
                     Disables dynamic-length variable allocation.
                -qnosmallstack
                     Disables only the general small stack
                     transformations.

                The default is -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Specifies that code should be produced for an SMP
                system.  <suboptions_list> is a colon-separated
                list of one or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization.
                nested_par | nonested_par
                     Specifies that prescriptive nested parallel
                     constructs should be parallelized by the
                     compiler.
                omp | noomp
                     Enforces compliance with the OpenMP Fortran
                     API.
                opt | noopt
                     Controls optimization for parallelization.
                     -qsmp=noopt specifies that the compiler should
                     do the least amount of optimization that is
                     required to parallelize the code and preserve
                     maximum debugability.
                rec_locks | norec_locks
                     Allows recursive locks to be used to avoid
                     problems associated with CRITICAL constructs.
                     If -qsmp=norec_locks is specified, recursive
                     locks will not be used to implement critical
                     sections.
                schedule=<suboptions>
                     The schedule suboption can take any of the
                     following sub-suboptions:
                     affinity[=<n>]
                     dynamic[=<n>]
                     guided[=<n>]
                     runtime
                     static[=<n>]
                     For their descriptions, refer to the XL
                     Fortran Compiler Reference.
                threshold=<n>
                     Controls the amount of automatic loop
                     parallelization that occurs. The value of <n>
                     represents the lower limit allowed for
                     parallelization of a loop, based on the level
                     of "work" present in a loop.

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, opt, noomp, norec_locks, nonested_par,
                schedule=runtime, and threshold=100.

         -qspillsize=<bytes>
                The long form of -NS. See the -NS option.  The
                default is -qspillsize=512.

         -qstacktemp=<num>
                Determines where to allocate applicable compiler
                temporaries at run time. The allocation depends on
                the value of <num>. The values are:

                0
                     Indicates that the compiler will decide
                     whether to allocate the applicable compiler
                     temporaries on the heap or the stack.
                -1
                     Indicates that applicable compiler temporaries
                     are to be always allocated on the stack. This
                     is the best-performing setting but uses the
                     most amount of stack storage.
                (1 or greater)
                     Indicates that applicable compiler temporaries
                     less than this value (bytes) should be
                     allocated on the stack and those greater than
                     or equal to this value should be allocated on
                     the heap.

                The default is -qstacktemp=0.

         -qstrict | -qnostrict
                Ensures that optimizations done by the -O3 and
                greater (and optionally -O2) options do not alter
                the semantics of a program. This option is ignored
                for -qnoopt.  For -O3 and greater, the default is
                -qnostrict. Otherwise the default is -qstrict.

         -qstrict_induction | -qnostrict_induction
                Prevents the compiler from performing induction
                (loop counter) variable optimizations that could
                alter the semantics of a program.  The default is
                -qnostrict_induction.

         -qthreaded
                Asserts that the compiler will generate thread-safe
                code when generating its own code or allocating
                compiler-created temporary data. User-written code
                that is algorithmically not thread-safe is
                unaffected by this option and will remain non-
                thread-safe. The default is -qthreaded when using
                xlf_r, xlf_r7, xlf90_r, xlf90_r7, xlf95_r, or
                xlf95_r7 invocation commands.

         -qtune=<suboption>
                Tunes instruction selection, scheduling, and other
                implementation-dependent performance enhancements
                for a specific implementation of a hardware
                architecture.  -qtune will not alter the ability of
                a program to run on a processor but will produce
                optimal code sequences tuned to a particular
                processor.  The suboptions are:

                auto
                     Automatically detects the specific processor
                     type of the compiling machine and produces an
                     object optimized for that processor.
                601
                     Produces an object optimized for all the
                     PowerPC 601 processors.
                603
                     Produces an object optimized for all the
                     PowerPC 603 processors.
                604
                     Produces an object optimized for all the
                     PowerPC 604 processors.
                pwr
                     Produces an object optimized for the POWER
                     hardware platforms.
                p2sc
                     The optimizations are tuned for the POWER2
                     Super Chip.
                pwr2
                     Produces an object optimized for the POWER2
                     hardware platforms.
                pwrx
                     This is equivalent to pwr2.
                pwr2s
                     The optimizations are tuned for the desktop
                     implementation of the POWER2 architecture,
                     which has a narrower processor-to-memory bus
                     than other POWER2 implementations.
                pwr3
                     Produces an object optimized for the POWER3
                     hardware platforms.
                pwr4
                     Produces an object optimized for the POWER4
                     hardware platforms.
                pwr5
                     Produces an object optimized for the POWER5
                     hardware platforms.
                rs64a
                     Produces an object optimized for the RS64I
                     processor.
                rs64b
                     Produces an object optimized for the RS64II
                     processor.
                rs64c
                     Produces an object optimized for the RS64III
                     processor.
                ppc970
                     Produces an object optimized for PowerPC 970
                     processors.

                The compiler uses -qtune setting that is compatible
                with the target architecture, which is controlled
                by the -qarch, -q32, and -q64 options.  The default
                setting is determined by the setting of -qarch.

         -qunroll[={auto|yes}] | -qnounroll
                Specifies whether unrolling DO loops is allowed in
                a program. Unrolling is allowed on outer and inner
                DO loops.  The suboptions are:

                auto
                     The compiler performs basic loop unrolling.
                yes
                     The compiler looks for more opportunities to
                     perform loop unrolling than is done with the
                     -qunroll=auto option. Specifying -qunroll with
                     no suboptions is equivalent to -qunroll=yes.

                The default is -qunroll=auto.

         -qunwind | -qnounwind
                Specifies that the compiler will preserve the
                default behavior for saves and restores to volatile
                registers during a procedure call.  If you specify
                -qnounwind, the compiler rearranges subprograms to
                minimize saves and restores to volatile registers.
                This rearrangement may make it impossible for the
                program or debuggers to walk through or "unwind"
                subprogram stack frame chains.  The default is
                -qunwind.

         -qvecnvol | -qnovecnvol
                Asserts that the compiled application will use both
                volatile and non-volatile vector registers. You
                should use this option only after understanding
                interoperability with old binaries. If you are
                compiling C/C++ code in Fortran which calls any of
                the following subroutines: setjmp(),longjmp(),
                sigsetjmp(), siglongjmp(), _setjmp(), _longjmp(),
                getcontext(), setcontext(), makecontext(), and
                swapcontext(), then you should set -qnovecnvol.
                bos.adt.include version 5.3.0.30 or greater should
                be installed to use -qvecnvol on the host system.
                The default is -qnovecnvol.

         -qzerosize | -qnozerosize
                Improves performance of Fortran 77 and some Fortran
                90 and Fortran 95 programs by preventing checking
                for zero-sized character strings and arrays.
                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90, and f95 commands, the default is
                -qzerosize.  For the xlf, xlf_r, xlf_r7, f77, and
                fort77 commands, the default is -qnozerosize.

  Error Checking and Debugging Options
         -C     Checks each reference to an array element, array
                section, or character substring for correctness.
                This is the short form of -qcheck.

         -D     Specifies whether the compiler compiles fixed
                source form lines with a D in column 1 or treats
                them as comments. Please note that in order to pass
                C-style -D macro definitions to the C preprocessor
                (e.g. compiling a file that ends with .F) use the
                -W option. For example:
                -WF,-DDEFINE_THIS
                -D is the short form of -qdlines.

         -g     Generates debug information for use by a symbolic
                debugger.

         -qcheck | -qnocheck
                The long form of the -C option. See -C for details.
                The default is -qnocheck.

         -qdbg | -qnodbg
                The long form of the -g option. See -g for details.
                The default is -qnodbg.

         -qdpcl | -qnodpcl
                Generates symbols that tools based on the Dynamic
                Probe Class Library (DPCL) API can use to see the
                structure of an executable file. You must also
                specify the -g option when you specify -qdpcl.
                This option has no effect when optimization (-O) is
                enabled. The default is -qnodpcl.

         -qextchk | -qnoextchk
                Sets up type-checking information for common
                blocks, procedure definitions, procedure
                references, and module data. Later, the linker can
                detect mismatches across compilation units using
                this information.  The default is -qnoextchk.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Determines what types of floating-point exception
                conditions to detect at run time. The program
                receives a SIGTRAP signal when the corresponding
                exception occurs.  <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                enable
                     Turn on checking for the specified exceptions
                     in the main program so that the exceptions
                     generate SIGTRAP signals.
                imprecise
                     Only check for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detect and trap on floating-point inexact, if
                     exception checking is enabled.
                invalid
                     Detect and trap on floating-point invalid
                     operations.
                nanq
                     Detect and trap all quiet not-a-number (NaNQ)
                     values and signaling not-a-number (NaNS)
                     values.
                overflow
                     Detect and trap on floating-point overflow.
                underflow
                     Detect and trap on floating-point underflow.
                zerodivide
                     Detect and trap on floating-point division by
                     zero.

                The default is -qnoflttrap. When -qflttrap is
                specified with no suboptions, the default activated
                suboptions are: overflow, underflow, zerodivide,
                invalid, and inexact.

         -qfullpath | -qnofullpath
                Records the full (or absolute) path names of source
                and include files in object files compiled with
                debugging information (-g option).  The default is
                -qnofullpath.

         -qhalt=<sev>
                Stops before producing any object, executable, or
                assembler source files if the maximum severity of
                compile-time messages equals or exceeds the
                specified severity <sev>, where the severity levels
                are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                The default is -qhalt=s.

         -qinitauto[=<hex_value>] | -qnoinitauto
                Initializes each byte or word (4 bytes) of storage
                for automatic variables to a specific value,
                depending on the length specified in <hex_value>.
                This helps you to locate variables that are
                referenced before they are defined. <hex_value> is
                a 1 to 8 digit hexadecimal number.  The default is
                -qnoinitauto. If you specify -qinitauto without a
                <hex_value>, the compiler initializes the value of
                each byte of automatic storage to zero. This option
                should be used for debugging purposes only.

         -qlanglvl=<suboption>
                Determines which language standard (or
                subset/superset of a standard) to check against for
                nonconformance. This option will only produce
                messages; all code valid in extended mode will
                compile regardless of which suboption is specified.
                The suboptions are:

                77std
                     Accepts the language specified by the ANSI
                     Fortran 77 standard.
                90std
                     Accepts the language specified by the ISO
                     Fortran 90 standard.
                90pure
                     Same as 90std, except that it reports errors
                     for any obsolescent Fortran 90 features used.
                90ext
                     Obsolete suboption that is equivalent to
                     extended.
                95std
                     Accepts the language specified by the ISO
                     Fortran 95 standard.
                95pure
                     Same as 95std, except that it also reports
                     errors for any obsolescent Fortran 95 features
                     used.
                2003std
                     Accepts the language that the ISO Fortran 95
                     standard specifies, as well as all Fortran
                     2003 features supported by XL Fortran, and
                     reports anything else as an error.
                2003pure
                     The same as 2003std except that it also
                     reports errors for any obsolescent Fortran
                     2003 features used.
                extended
                     Accepts the full Fortran 95 language standard,
                     all Fortran 2003 features supported by XL
                     Fortran, and all extensions, effectively
                     turning off language-level checking.

                The default is -qlanglvl=extended.

         -qlinedebug | -qnolinedebug
                Generates line number and source file name
                information for the debugger. This option produces
                minimal debugging information, so the resulting
                object size is smaller than what is produced if the
                -g debugging option is specified. The default is
                -qnolinedebug.

         -qobject | -qnoobject
                Specifies whether to produce an object file or to
                stop immediately after checking the syntax of the
                source files.  The default is -qobject.

         -qsaa | -qnosaa
                Checks for conformance to the SAA Fortran language
                definition. It identifies nonconforming source code
                and also options that allow such nonconformances.
                The default is -qnosaa.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, and other information, in the
                corresponding object file. The compilation must
                produce an object file for this option to take
                effect.  The default is -qnosaveopt.

         -qsigtrap[=<trap_handler>]
                When you are compiling a file that contains a main
                program, this option sets up the specified trap
                handler to catch SIGTRAP exceptions. This option
                enables you to install a handler for SIGTRAP
                signals without calling the SIGNAL subprogram in
                the program. Specifying -qsigtrap with no
                <trap_handler> is equivalent to -qsigtrap=xl__trce.

         -qtbtable=<suboption>
                Limits the amount of debugging traceback
                information in object files, which reduces the size
                of the program. The suboptions are:

                none
                     Includes no traceback information.
                small
                     Includes traceback information but not the
                     names of procedures or information about
                     procedure parameters.
                full
                     Includes complete traceback information.

                The default is full traceback information in the
                object file when compiling non-optimized (without
                -O) or for debugging (with -g).  Otherwise, the
                default is -qtbtable=small.

         -qwarn64 | -qnowarn64
                Assists in porting code from a 32-bit environment
                to a 64-bit environment by detecting the truncation
                of an 8-byte integer pointer to 4 bytes. The
                -qwarn64 option uses informational messages to
                identify statements that may cause problems with
                the 32-bit to 64-bit migration.  The default is
                -qnowarn64.

         -qxflag=<suboption>
                Specifies rarely-needed compiler behaviors.  The
                suboptions are:

                oldtab
                     For fixed source form programs, interprets a
                     tab in columns 1 to 5 as a single character.
                     The source statement still starts immediately
                     after the tab, but the tab character is
                     treated as a single character for counting
                     columns. This setting allows up to 71
                     characters of input, depending on where the
                     tab character occurs.
                dvz
                     Specifying -qxflag=dvz causes the compiler to
                     generate code to detect floating-point
                     divide-by-zero operations. With this option
                     on, the extra code calls the external handler
                     function __xl_dzx when the divisor is zero.
                xalias
                     This is obsolete. Please use -qalias=nostd in
                     your new applications.

         -qxlines | -qnoxlines
                Specifies whether fixed source form lines with a X
                in column 1 are compiled or treated as comments.
                The default is -qnoxlines.

  Listing and Message Options
         -#     Generates information on the progress of the
                compilation without actually running the individual
                components.

         -S     Produces one or more .s files, showing equivalent
                assembler source for each Fortran source file.

         -V     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes. This is the
                same as -v except that you can cut and paste
                directly from the display to create a command.

         -v     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes.

         -w     Suppresses informational, language-level, and
                warning messages. This option sets -qflag=e:e.

         -qattr[=full] | -qnoattr
                Specifies whether to produce the attribute
                component of the attribute and cross-reference
                section of the listing.  The listing contains all
                identifiers (-qattr=full) or only the names that
                are referenced (-qattr).  The default is -qnoattr.

         -qflag=<listing_severity>:<terminal_severity>
                Specifies the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> determines
                the minimum level for the listing file, and
                <terminal_severity> determines the minimum level
                for the terminal.  The severity levels are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                Note that both <listing_severity> and
                <terminal_severity> must be specified.  The default
                is -qflag=i:i.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                Specifying -qlist with no suboptions is equivalent
                to specifying -qlist=nooffset.  The default is
                -qnolist.

         -qlistopt | -qnolistopt
                Determines whether to show the setting of every
                compiler option in the listing file or only
                selected options. These selected options include
                those specified on the command line or directives
                plus some that are always put in the listing.  The
                default is -qnolistopt.

         -qnoprint
                Prevents the compiler from creating the listing
                file, regardless of the settings of other listing
                options.

         -qphsinfo | -qnophsinfo
                Determines whether timing information is displayed
                on the terminal for each compiler phase.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qreport[=<suboptions>] | -qnoreport
                Determines whether to produce transformation
                reports showing how the program is parallelized and
                how loops are optimized.  The suboptions are:

                hotlist
                     Produces a report showing how loops are
                     transformed.
                smplist
                     Produces a report showing how the program is
                     parallelized.

                The default is -qnoreport.

         -qsource | -qnosource
                Determines whether to produce the source section of
                the listing.  The default is -qnosource.

         -qsuppress[={<msg_nums_list>|cmpmsg}] | -qnosuppress
                Determines which messages to suppress from the
                output stream.  The suboptions are:

                <msg_nums_list>
                     A colon-separated list of 7-digit compiler
                     message numbers.
                cmpmsg
                     Suppresses the informational messages that
                     report compilation progress and a successful
                     completion.

                The default is -qnosuppress.

         -qversion
                Displays the version and release of the invoking
                compiler. Specify this option on its own with the
                compiler command.

         -qxref[=full] | -qnoxref
                Determines whether to produce the cross-reference
                component of the attribute and cross-reference
                section of the listing.  If you specify only
                -qxref, only identifiers that are used are
                reported. If you specify -qxref=full, the listing
                contains information about all identifiers that
                appear in the program, whether they are used or
                not.  The default is -qnoxref.

  Compatibility Options
         -1     Executes each DO loop in the compiled program at
                least once if its DO statement is executed, even if
                the iteration count is 0. This option provides
                compatibility with Fortran 66. The default is to
                follow the behavior of later Fortran standards,
                where DO loops are not performed if the iteration
                count is 0. This is the short form of the -qonetrip
                option.

         -u     Specifies that no implicit typing of variable names
                is permitted. It has the same effect as using the
                IMPLICIT NONE statement in each scope that allows
                implicit statements. By default, implicit typing is
                allowed.

         -qautodbl=<setting>
                Converts single-precision floating-point
                calculations to double-precision or converts
                double-precision calculations to extended-
                precision.  <setting> can be:

                none
                     Does not promote or pad any objects that share
                     storage.
                dbl4
                     Promotes floating-point objects that are
                     single precision or are composed of such
                     objects.
                dbl8
                     Promotes floating-point objects that are
                     double-precision or are composed of such
                     objects.
                dbl
                     Combines the promotions done by dbl4 and dbl8.
                dblpad4
                     Performs the same promotions as dbl4, and pads
                     objects of other types (except CHARACTER) that
                     can share storage with promoted objects.
                dblpad8
                     Performs the same promotions as dbl8, and also
                     pads objects of other types (except CHARACTER)
                     if they can share storage with promoted
                     objects.
                dblpad
                     Combines the promotions done by dbl4 and dbl8,
                     and also pads objects of other types (except
                     CHARACTER) if they can share storage with
                     promoted objects.

                The default is -qautodbl=none.

         -qcclines | -qnocclines
                Enables recognition of conditional compilation
                lines in fixed source form and F90 free source
                form. IBM free source form is not supported.  The
                default is -qcclines if -qsmp=omp is specified.
                Otherwise, the default is -qnocclines.

         -qctyplss[={arg|noarg}] | -qnoctyplss
                Specifies whether character constant expressions
                are allowed wherever typeless constants may be
                used. Specifying -qctyplss=arg allows character
                constant expressions, but if a Hollerith constant
                is used as an actual argument, it is passed to the
                procedure as if it was an integer actual argument.
                The default is -qnoctyplss. If -qctypless is
                specified with no suboption, the default is
                -qctyplss=noarg.

         -qddim | -qnoddim
                Specifies that the bounds of pointee arrays are
                re-evaluated each time the arrays are referenced
                and removes some restrictions on the bounds
                expressions for pointee arrays.  The default is
                -qnoddim.

         -qdpc[=<e>] | -qnodpc
                Increases the precision of real constants, for
                maximum accuracy, when assigning real constants to
                DOUBLE PRECISION variables. -qdpc=<e> also promotes
                constants with an <e> exponent.  The default is
                -qnodpc.

         -qescape | -qnoescape
                Specifies whether the backslash is treated as an
                escape character in character strings, Hollerith
                constants, H edit descriptors, and character string
                edit descriptors.  The default is -qescape.

         -qextern=<procedure_names_list>
                Allows user-written procedures to be called instead
                of XL Fortran intrinsics. <procedure_names_list> is
                a colon-separated list of procedure names.  The
                procedure names are treated as if they appear in an
                EXTERNAL statement in each compilation unit being
                compiled.

         -qextname[=<names_list>] | -qnoextname
                Adds an underscore to the names of all global
                entities, which helps in porting programs from
                systems where this is a convention for mixed-
                language programs. <names_list> is a colon-
                separated list of global entity names.  The default
                is -qnoextname.

         -qinit=f90ptr
                Makes the initial association status of pointers
                disassociated instead of undefined. The default
                association status of pointers is undefined.

         -qintlog | -qnointlog
                Allows mixture of integer and logical data entities
                in expressions and statements. The default is
                -qnointlog.

         -qintsize={2|4|8}
                Sets the size (in bytes) of default INTEGER and
                LOGICAL data entities (that is, those for which no
                length or kind is specified).  The default is
                -qintsize=4.

         -qlog4 | -qnolog4
                Specifies whether the result of a logical operation
                with logical operands is a LOGICAL(4) or is a
                LOGICAL with the maximum length of the operands.
                The default is -qnolog4.

         -qmodule=mangle81
                Specifies that the compiler should use the XL
                Fortran Version 8.1 naming convention for non-
                intrinsic module files. This option allows you to
                produce modules and their associated object files
                with the Version 10.1 compiler and link these
                object files with others compiled with the Version
                8.1 compiler, or earlier.

         -qnullterm | -qnonullterm
                Appends a null character to each character constant
                expression that is passed as a dummy argument, to
                make it more convenient to pass strings to C
                functions. The default is -qnonullterm.

         -qonetrip | -qnoonetrip
                The long form of the -1 option. See -1 for details.
                The default is -qnoonetrip.

         -qport=<suboption> | -qnoport
                Increases flexibility when porting programs to XL
                Fortran, providing a number of options to
                accommodate Fortran language extensions.  The
                suboptions are:

                clogicals | noclogicals
                     Allows non-zero integers to be treated as true
                     when used as logicals. The change affects all
                     logical operators. This suboption only takes
                     effect if -qintlog is activated.  The default
                     is noclogicals.
                hexint | nohexint
                     Specifies that typeless constant hexadecimal
                     strings are converted to integers when passed
                     as actual arguments to the INT intrinsic
                     function. Typeless constant hexadecimal
                     strings which are not passed as actual
                     arguments to INT remain unaffected.  The
                     default is nohexint.
                mod | nomod
                     Relaxes existing constraints on the MOD
                     intrinsic function, allowing two arguments of
                     the same data type parameter to be of
                     different kind type parameters. The result
                     will be of the same type as the argument, but
                     with the larger kind type parameter value.
                     The default is nomod.
                nullarg | nonullarg
                     For an external or internal procedure
                     reference, this causes the compiler to treat
                     an empty argument (which is delimited by a
                     left parenthesis and a comma, two commas, or a
                     comma and a right parenthesis) as a null
                     argument. This suboption has no effect if the
                     argument list is empty.  The default is
                     nonullarg.
                sce | nosce
                     By default, the compiler performs short
                     circuit evaluation in selected logical
                     expressions using XL Fortran rules. Specifying
                     'sce' allows the compiler to use non-XL
                     Fortran rules. The compiler will perform short
                     circuit evaluation if the current rules allow
                     it.  The default is nosce.
                typestmt | notypestmt
                     The TYPE statement, which behaves in a manner
                     similar to the PRINT statement, is supported
                     whenever this option is specified. The default
                     is notypestmt.
                typlssarg | notyplssarg
                     Converts all typeless constants to default
                     integers if the constants are actual arguments
                     to an intrinsic procedure whose associated
                     dummy arguments are of integer type. Dummy
                     arguments associated with typeless actual
                     arguments of non-integer type remain
                     unaffected by this option.  The default is
                     notyplssarg.

                The default is -qnoport.

         -qposition={appendold|appendunknown}
                Positions the file pointer at the end of the file
                when data is written after an OPEN statement with
                no "POSITION=" specifier, and the corresponding
                "STATUS=" value (OLD or UNKNOWN) is specified.  The
                default depends on the I/O specifiers in the OPEN
                statement and on the compiler invocation command.
                The default is -qposition=appendold for the xlf,
                xlf_r, xlf_r7, and f77/fort77 commands and the
                defined Fortran 90 and Fortran 95 behaviors for the
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, xlf95_r7,
                f90 and f95 commands.

         -qqcount | -qnoqcount
                Accepts the character-count Q edit descriptor (Q)
                as well as the extended-precision Q edit descriptor
                (Qw.d). With -qnoqcount, all Q edit descriptors are
                interpreted as the extended-precision Q edit
                descriptor.  The default is -qnoqcount.

         -qrealsize=<bytes>
                Sets the default size of REAL, DOUBLE PRECISION,
                COMPLEX and DOUBLE COMPLEX values. The allowed
                values for <bytes> are 4 and 8.  The default is
                -qrealsize=4.

         -qsave[=<suboption>] | -qnosave
                Specifies the default storage class for local
                variables.  The suboptions are:

                all
                     The default storage class for all local
                     variables is STATIC. This is the default when
                     -qsave is specified without a suboption.
                defaultinit
                     The default storage class is STATIC for local
                     variables of derived type that have default
                     initialization specified.

                Specifying -qnosave sets the default storage class
                to AUTOMATIC.  The default is -qsave for xlf,
                xlf_r, xlf_r7, f77, or fort77 to duplicate the
                behavior of FORTRAN77 commands, and -qnosave
                otherwise.

         -qsclk[=<suboption>]
                Specifies the resolution that the SYSTEM_CLOCK
                intrinsic procedure uses in a program.  The
                suboptions are:

                centi
                     Uses centisecond resolution for the values
                     returned.
                micro
                     Uses microsecond resolution.

                The default is -qsclk=centi.

         -qswapomp | -qnoswapomp
                Specifies that the compiler should recognize and
                substitute OpenMP routines in XL Fortran programs.
                The default is -qswapomp.

         -qundef | -qnoundef
                The long form of the -u option. See -u for details.
                The default is -qnoundef.

         -qxlf77=<settings_list>
                Provides compatibility with Fortran 77 aspects of
                language semantics and I/O data format that have
                changed. Most of these changes are required by the
                Fortran 90 standard. <settings_list> is a colon-
                separated list of one or more of the following
                suboptions:

                blankpad | noblankpad
                     For internal, direct-access, and stream-access
                     files, uses a default setting equivalent to
                     pad='no'. This setting produces conversion
                     errors when reading from such a file if the
                     format requires more characters than the
                     record has, thus duplicating the XL Fortran
                     Version 2 behavior.
                gedit77 | nogedit77
                     Uses Fortran 77 semantics for the output of
                     REAL objects with the G edit descriptor.
                intarg | nointarg
                     Converts all the integer arguments of an
                     intrinsic procedure to the kind of the longest
                     argument, if they are of different kinds.
                intxor | nointxor
                     Treats .XOR. as a logical binary intrinsic
                     operator rather than a defined operator.
                leadzero | noleadzero
                     Produces a leading zero in real output under
                     the D, E, L, F and Q edit descriptors.
                oldboz | nooldboz
                     Turns blanks into zeros for data read by B, O,
                     and Z edit descriptors, regardless of the
                     "BLANK=" specifier or any BN or BZ control
                     edit descriptors.
                persistent | nopersistent
                     Saves the addresses of arguments to
                     subprograms with ENTRY statements in static
                     storage.
                softeof | nosofteof
                     Allows READ and WRITE operations when a unit
                     is positioned after its endfile record, unless
                     that position is the result of executing an
                     ENDFILE statement.

                The default suboptions are: blankpad, nogedit77,
                nointarg, nointxor, leadzero, nooldboz,
                nopersistent, and nosofteof for the f90, xlf90,
                xlf90_r, xlf90_r7, f95, xlf95, xlf95_r, and
                xlf95_r7 commands, and are the exact opposite for
                the xlf, xlf_r, xlf_r7, f77, and fort77 commands.

         -qxlf90=<settings_list>
                Provides backward compatibility with XL Fortran for
                AIX Version 5 and the Fortran 90 standard for
                certain aspects of the Fortran language.
                <settings_list> is a colon-separated list of one or
                both of the following suboptions:

                signedzero | nosignedzero
                     Determines how the SIGN(A,B) function handles
                     signed real 0.0. Prior to XL Fortran Version
                     6.1, SIGN(A,B) returned |A| when B=-0.0. This
                     behavior conformed with the Fortran 90
                     standard. Now, if you specify the
                     -qxlf90=signedzero compiler option, SIGN(A,B)
                     returns -|A| when B=-0.0. This behavior
                     conforms to the Fortran 95 standard and is
                     consistent with the IEEE standard for binary
                     floating-point arithmetic.
                autodealloc | noautodealloc
                     Determines whether the compiler deallocates
                     allocatable objects that are declared locally
                     without either the SAVE or the STATIC
                     attribute and have a status of currently
                     allocated when the subprogram terminates.

                The default suboptions are signedzero and
                autodealloc for the xlf95, xlf95_r, xlf95_r7 and
                f95 invocation commands. For all other invocation
                commands, the default suboptions are nosignedzero
                and noautodealloc.

  Linking Options
         -b64   The AIX operating system provides 64-bit shared
                object files in both libc.a and libm.a. In 64-bit
                mode, you can use the -b64 linker option to
                instruct ld to bind with 64-bit objects.

         -bdynamic, -bshared, -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                This is available on AIX 4.2 and above.

                -bdynamic
                     Specifies that shared objects are linked
                     dynamically.
                -bshared
                     Equivalent to -bdynamic.
                -bstatic
                     Specifies that shared objects are statically
                     linked into the output file.

                The default is -bdynamic.

         -bhalt:<error_level>
                Specifies the maximum error level that is allowed
                before the linker (ld) command halts. If any linker
                command has an error return value greater than the
                value that is specified by the <error_level>
                variable, linking stops.  The default value is 4,
                as specified in the configuration file.

         -bloadmap:<filename>
                Requests that a log of linker actions and messages
                be saved in file <filename>. You can use the log to
                help diagnose linking problems.

         -bmaxdata=<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint.  The default
                is -bmaxdata=0.

         -bmaxstack:<bytes>
                Specifies the maximum amount of space to reserve
                for the program stack segment for programs where
                the size of these regions is a constraint.

         -brtl | -bnortl
                Determines which algorithm will be used to find
                libraries that are specified with the -l option. If
                -brtl is specified, run-time linking is enabled.

         -bshared
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.
                This is equivalent to -bdynamic.

         -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.

         -L<dir>
                Searches in directory <dir> for libraries specified
                by -l<key>.

         -l<key>
                Searches the specified library file at link time,
                where <key> selects the library lib<key>.a.

  Compiler Customization Options
         -B<prefix>
                Determines a substitute path name for executable
                files used during compilation, such as the compiler
                of linker. <prefix> is the name of a directory
                where the alternative executable files reside. It
                is added to the beginning of the standard program
                names and must end in a slash (/). This option can
                be used in combination with the -t option, which
                determines which of these components are affected
                by -B.

         -F[<config_file>][:<stanza>]
                Specifies an alternative configuration file
                <config_file>, the command to be used (<stanza>)
                within the configuration file, or both. At least
                one of the arguments must be supplied.  The default
                stanza depends on the name of the command used to
                invoke the compiler.

         -P{v|k}[!]
                This option is obsolete and has no effect. Invokes
                the selected optimizing preprocessor.

         -P     Invokes the -Pv preprocessor before the compiler.

         -Pv    Invokes the -Pv preprocessor before the compiler.

         -Pk    Invokes the -Pk preprocessor before the compiler.

         -P!    Invokes the -Pv preprocessor only.

         -Pv!   Invokes the -Pv preprocessor only.

         -Pk!   Invokes the -Pk preprocessor only.

         -t<components_list>
                Applies the prefix from the -B option to the
                specified program, <components_list>, where
                <components_list> is a chain (with no separator
                character inbetween each <component>, ie: "-taFp")
                containing one or more of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

         -W<component>,<options_list>
                Passes the listed options to a component that is
                executed during compilation. <options_list> is a
                comma-separated list of one or more options, and
                <component> is one of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies compile-time rounding of constant
                floating-point expressions. It is equivalent to the
                -qieee option. <rounding_mode> is one of the
                following:

                n = Round to nearest
                m = Round toward minus infinity
                p = Round toward plus infinity
                z = Round toward zero

                The default is -yn.

         -qfloat=<suboptions_list>
                Determines different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using an inline sequence of
                     code instead of a call to a library function.
                fold | nofold
                     Evaluates constant floating-point expressions
                     at compile time.
                hsflt | nohsflt
                     Speeds up calculations by removing range-
                     checking on single-precision float results,
                     and on conversions from floating-point to
                     integer.
                hssngl | nohssngl
                     Speeds up calculations in a safer way than
                     hsflt, by rounding single-precision
                     expressions only when the results are stored
                     into REAL(4) memory locations
                maf | nomaf
                     Generates multiply-add instructions where
                     appropriate.
                nans | nonans
                     Allows you to use the -qflttrap=invalid:enable
                     option to detect and deal with exception
                     conditions that involve signaling NaN (not-a-
                     number) values.
                rndsngl | norndsngl
                     Rounds the result of each single-precision
                     (REAL(4)) operation to single-precision,
                     rather than waiting until the full expression
                     is evaluated. It sacrifices speed for
                     consistency with results from similar
                     calculations on other types of computers.
                rrm | norrm
                     Turns off compiler optimizations that require
                     the rounding mode to be the default, round-
                     to-nearest, at run time.
                rsqrt | norsqrt
                     Allows the optimizer to change a division by
                     the result of a square root operation into a
                     multiply by the reciprocal of the square root.
                strictnmaf | nostrictnmaf
                     Turns off floating-point transformations that
                     are used to introduce negative MAF
                     instructions, as these transformations do not
                     preserve the sign of a zero value.
                The default active suboptions are: nofltint, fold,
                nohsflt, nohssngl, maf, nonans, norelax, norndsngl,
                norrm, norsqrt, and nostrictnmaf.

         -qieee=<mode>
                Specifies the rounding mode for the compiler to use
                when evaluating constant floating-point expressions
                at compile time, where <mode> is one of:

                near = Round to nearest representable number
                minus = Round toward minus infinity
                plus = Round toward plus infinity
                zero = Round toward zero

                The default is -qieee=near.

         -qstrictieeemod | -qnostrictieeemod
                Specifies that the compiler will adhere to the
                Fortran 2003 IEEE arithmetic rules for the
                ieee_arithmetic and ieee_exceptions intrinsic
                modules.  The default is -qstrictieeemod.

  SEE ALSO
         xlfndi(1), showpdf(1), cleanpdf(1), mergepdf(1),
         resetpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/fortran/xlfortran/library/
         www.ibm.com/software/awdtools/fortran/xlfortran/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL Fortran Enterprise Edition V10.1 for AIX(R)

         5724-M13

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.









































configure:6585: $? = 249
configure:6592: xlf -V >&5
export XL_CONFIG=/etc/xlf.cfg:xlf 
pg /usr/lpp/xlf/bin/default_msg/xlf.txt 



  xlf(1)                 IBM (October 2005)                  xlf(1)



  NAME
         xlf, xlf90, xlf95, xlf_r, xlf90_r, xlf95_r, f90, f95,
         xlf_r7, xlf90_r7, xlf95_r7, f77, fort77 - invoke the IBM
         XL Fortran compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

  DESCRIPTION
         xlf and related invocation commands compile Fortran source
         files.  They also process assembler source files and
         object files. Unless you specify the -c option, these
         commands call the link editor to produce a single object
         file.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/xlf.cfg).  For more information,
         refer to the XL Fortran Enterprise Edition Compiler
         Reference.

         The input file may have any of the following suffixes:
          .f - Fortran source file
          .f77 or .F77 - Fortran source file (fixed form) using
               f77 stanza configuration
          .f90 or .F90 - Fortran source file (free form) using
               xlf90 configuration
          .f95 or .F95 - Fortran source file (free form) using
               xlf95 configuration
          .o or .a - object file for ld command
          .s - assembler source file
          .F - Fortran source file with cpp preprocessor directives

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -I<dir>
                Adds a directory to the search path for include
                files and .mod files. If XL Fortran calls cpp, this
                option adds a directory to the search path for
                #include files. Before checking the default
                directories for include and .mod files, the
                compiler checks each directory in the search path.
                For include files, this path is only used if the
                file name in an INCLUDE line is not provided with
                an absolute path. By default, the following
                directories are searched in the following order:

                1) The current directory (where the compiler is
                executed)
                2) The directory where the source file is located

         -k     Specifies that the program is in free source form.
                This is the short form of -qfree=f90.

         -U     Makes the compiler case-sensitive to identifier
                names. By default the compiler interprets all names
                as if they were lower-case.

         -qci=<nums_list>
                Activates the specified INCLUDE lines. <nums_list>
                is a colon-separated list of identification numbers
                (from 1 to 255) of conditional includes.

         -qcr | -qnocr
                Allows you to control how the compiler interprets
                the CR (carriage return) character.  This allows
                you to compile code written using a MAC OS X or
                DOS/Windows editor.  The default is -qcr.

         -qdirective[=<list>] | -qnodirective[=<list>]
                Specifies target strings to be recognized in a
                comment directive. <list> is a colon-separated list
                of directives. If -qdirective is specified without
                any directives, it turns on the default trigger
                constant IBM* if it has been turned off by a
                previous -qnodirective.  The default is
                -qnodirective.

         -qdlines | -qnodlines
                This is the long form of the -D option. See -D for
                more information.  The default is -qnodlines.

         -qfixed[=<right_margin>]
                Indicates that the input source program is in fixed
                source form and optionally specifies the maximum
                line length, <right_margin>. The maximum
                <right_margin> value is 132.  The default is
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77
                invocation commands, and -qfree=f90 for f90, f95,
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, and
                xlf95_r7.

         -qfree[={f90|ibm}]
                Indicates that the source code is in free source
                form. The 'ibm' and 'f90' suboptions specify
                compatibility with the free source form defined for
                VS Fortran and Fortran 90, respectively. Note that
                the free source form defined for Fortran 90 also
                applies to Fortran 95.  The default is -qfree=f90
                for f90, f95, xlf90, xlf90_r, xlf90_r7, xlf95,
                xlf95_r, and xlf95_r7 invocation commands, and
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77.

         -qmbcs | -qnombcs
                Indicates to the compiler whether character literal
                constants, Hollerith constants, H edit descriptors,
                and character string edit descriptors can contain
                Multibyte Character Set (MBCS) or Unicode
                characters. The default is -qnombcs.

         -qmixed | -qnomixed
                The long form of the -U option. Makes the compiler
                case-sensitive to identifier names. The default is
                -qnomixed.

         -qsuffix=<option>=<suffix>
                Specifies the source file suffix, <suffix>, on the
                command line instead of in the .cfg file, where
                <option> can be:

                f
                     Specifies that <suffix> is the new source file
                     suffix.
                o
                     Specifies that <suffix> is the new object-file
                     suffix.
                s
                     Specifies that <suffix> is the new assembler
                     source file suffix.
                cpp
                     Specifies that <suffix> is the new
                     preprocessor source file suffix.

  Output Control Options
         -c     Produces an object file instead of an executable
                file.  Prevents the completed object file from
                being sent to the ld command for link-editing. With
                this option, the output is a .o file for each
                source file.

         -d     Causes preprocessed source files that are produced
                by cpp to be kept rather than to be deleted. By
                default temporary files produced by cpp are
                deleted.

         -o <name>
                Specifies a name for the output object, executable,
                or assembler source file.  The default name is
                a.out for executable files. The default name for an
                object source file is the same as the source file
                except that it has a '.o' extension.

         -q32   Selects 32-bit mode compilation mode. The -q32 and
                -qarch options determine the target machines that
                the 32-bit executable will run on. The default is
                -q32.

         -q64[=<suboption>]
                Selects 64-bit compilation mode. The -q64 option
                indicates that the object module will be created in
                64-bit object format and that the 64-bit
                instruction set will be generated. Note that you
                may compile in a 32-bit environment to create 64-
                bit objects, but you must link them in a 64-bit
                environment with the -q64 option. Use -q32 and -q64
                options, along with the -qarch and -qtune compiler
                options, to optimize the output of the compiler to
                the architecture on which that output will be used.
                The suboptions are:

                largetype
                     The object file will use the 64-bit Large Data
                     Type (LDT) ABI. This object file may only be
                     used on versions of AIX greater than or equal
                     to 5.0.

         -qmoddir=<directory>
                Specifies the location for any .mod files that the
                compiler writes. By default .mod files are placed
                in the current directory.

         -qpic[=<suboption>] | -qnopic
                Generates Position Independent Code (PIC) that can
                be used in shared libraries.  The suboptions are:

                large
                     Allows the size of the Table of Contents to be
                     larger than 64K. This suboption allows for
                     more addresses to be stored in the Table of
                     Contents and generates larger code.
                small
                     Assumes that the size of the Table of Contents
                     can be at most 64K.

                The default is -qpic=small.

  Optimization Options
         -NS<bytes>
                Specifies the size (in bytes) of the register spill
                space; the internal program storage areas used by
                the optimizer for register spills to storage.  The
                default is -NS512.

         -O[<level>]
                Specifies whether to optimize code during
                compilation and, if so, at which level. -O<level>
                is equivalent to -qoptimize=<level>. <level> can
                be:

                (not specified)
                     This is equivalent to -O2.
                0
                     Almost all optimizations are disabled. This is
                     equivalent to -qnooptimize.
                1
                     Reserved for future use. Ignored by compiler.
                2
                     Performs a set of optimizations that are
                     intended to offer improved performance without
                     an unreasonable increase in time or storage
                     that is required for compilation.
                3
                     Performs additional optimizations that are
                     memory intensive, compile-time intensive, and
                     may change the semantics of the program
                     slightly, unless -qstrict is specified. We
                     recommend these optimizations when the desire
                     for run-time speed improvements outweighs the
                     concern for limiting compile-time resources.
                     This level of optimization also affects the
                     setting of the -qfloat option, turning on the
                     'fltint' and 'rsqrt' suboptions by default,
                     and setting -qmaxmem=-1.  This option implies
                     -qhot=level=0.
                4
                     Aggressively optimizes the source program,
                     trading off additional compile time for
                     potential improvements in the generated code.
                     You can specify the option at compile time or
                     at link time. if you specify it at link time,
                     it will have no effect unless you also specify
                     it at compile time for at least the file that
                     contains the main program. -O4 implies the
                     following other options:
                     -qhot
                     -qipa
                     -O3
                     -qarch=auto
                     -qtune=auto
                     -qcache=auto
                5
                     Performs all optimizations from -O4, and also
                     sets -qipa=level=2 to perform full inter-
                     procedural data flow and alias analysis.

                -O4 and -O5 perform whole-program analysis and
                should be specified at both compilation and link
                time to have maximal effect.  The default is -O0.

         -p[g]  Sets up the object file for profiling. Specifying
                '-pg' will produce more extensive statistics. The
                default is no profiling.

         -Q[<suboption>]
                Specifies whether Fortran 90 or Fortran 95
                procedures are inlined and/or the names of
                particular procedures that should or should not be
                inlined. names is a list of procedure names that
                are separated by colons. This option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions,
                     subject to limits on the number of inlined
                     calls and the amount of code size increase as
                     a result.
                -Q!
                     Turns off inlining.
                -Q+<names_list>
                     Inlines the functions listed in <names_list>
                     and any other appropriate functions, where
                     <names_list> is a colon-separated list.
                -Q-<names_list>
                     Does not inline functions listed in
                     <names_list>, where <names_list> is a colon-
                     separated list. All other appropriate
                     functions are inlined.

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qalias=<suboptions_list>
                Indicates whether a program contains certain
                categories of aliasing. The compiler limits the
                scope of some optimizations when there is a
                possibility that different names are aliases for
                the same storage locations. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                aryovrlp | noaryovrlp
                     Indicates whether the compilation units
                     contain any array assignments between
                     storage-associated arrays. If not, specify
                     noaryovrlp to improve performance.
                intptr | nointptr
                     Indicates whether the compilation units
                     contain any integer POINTER statements. If so,
                     specify intptr.
                pteovrlp | nopteovrlp
                     Indicates whether any pointee variables may be
                     used to refer to any data objects that are not
                     pointee variables, or whether two pointee
                     variables may be used to refer to the same
                     storage location. If not, specify nopteovrlp.
                std | nostd
                     Indicates whether the compilation units
                     contain any non-standard aliasing (see
                     Compiler Reference for more information). If
                     so, specify nostd.  (-qalias=nostd replaces
                     the obsolete -qxflag=xalias option.)

                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90 and f95 commands, the default
                suboptions are: aryovrlp, nointptr, pteovrlp, and
                std. For the xlf, xlf_r, xlf_r7, f77, and fort77
                commands, the default suboptions are: aryovrlp,
                intptr, pteovrlp, and std.

         -qalign=<suboptions_list>
                Specifies the alignment of data objects in storage
                to avoid performance problems with misaligned data.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                4k | no4k
                     Specifies whether large arrays and structures
                     (at least 4096 bytes in size) will be aligned
                     on a 4K (4096-byte, or page) boundary.  Use of
                     this option may help to improve the
                     performance of programs using data striping.
                bindc=<suboption>
                     Specifies that the alignment and padding for
                     an XL Fortran derived type with the BIND(C)
                     attribute are compatible with a C struct type
                     that is compiled with the corresponding XL C
                     alignment option. The compatible alignment
                     options are:
                     -qalign=bindc=bit_packed
                     -qalign=bindc={full|power}
                     -qalign=bindc=packed
                     -qalign=bindc={twobyte|mac68k}
                     -qalign=bindc=natural
                     Each of these "-qalign=bindc=" sub-suboptions
                     is equivalent to the XL C "-qalign=" suboption
                     of the same name.  (ie: For
                     -qalign=bindc=bit_packed, the corresponding XL
                     C option is -qalign=bit_packed)
                struct=<option>
                     Specifies how objects or arrays of a derived
                     type (declared using a record structure) are
                     stored, and whether or not padding is used
                     between components. The options are:
                     natural
                          Objects of a derived type are stored with
                          sufficient padding such that components
                          will be stored on their natural alignment
                          boundaries, unless storage association
                          requires otherwise.
                     packed
                          Objects of a derived type are stored with
                          no padding between components, other than
                          any padding represented by %FILL
                          components.
                     port
                          Storage padding is the same as described
                          above for the struct=natural suboption,
                          except that the alignment of components
                          of type complex is the same as the
                          alignment of components of type real of
                          the same kind. The padding for an object
                          that is immediately followed by a union
                          is inserted at the beginning of the first
                          map component for each map in that union.

                The default activated suboptions are: no4k,
                struct=natural, and bindc=power.

         -qarch=<suboption>
                Specifies which instructions the compiler can
                generate.  The suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                com
                     You can run the executable file that the
                     compiler generated on any hardware platform
                     supported by the compiler, because the file
                     contains only instructions that are common to
                     all machines.
                p2sc
                     The executable file can be executed on any
                     POWER2 Super Chip hardware platform.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms. Using -q64 with ppc upgrades the
                     architecture to ppc64grsq.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.  In 64-bit mode,
                     produces object code containing optional
                     graphics instructions that will run on 64-bit
                     PowerPC platforms, but not on 32-bit-only
                     platforms.  Using -q64 with ppcgr upgrades the
                     architecture to ppc64grsq.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                pwr
                     Produces an object that contains instructions
                     that run on any of the POWER or POWER2
                     hardware platforms.
                pwr2s
                     The executable file can be executed on any
                     desktop implementation of the POWER2 chip.
                pwr2
                     Produces an object that contains instructions
                     that run on the POWER2 hardware platforms.
                pwrx
                     Equivalent to pwr2.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3, POWER4, POWER5,
                     POWER5+ or PowerPC 970 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4, POWER5, POWER5+ or
                     PowerPC 970 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 or POWER5+ hardware
                     platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on any POWER5+ hardware platform.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.
                601
                     Produces an object that contains instructions
                     that run on PowerPC 601 systems.
                603
                     Produces an object that contains instructions
                     that run on PowerPC 603 systems.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                ppc64v
                     Generates instructions for any 64-bit PowerPC
                     processor (like PowerPC 970) with VMX.

                The default is -qarch=com.

         -qassert=<suboptions_list>
                Provides information about the program to help
                fine-tune optimizations. <suboptions_list> is a
                colon-separated list of one or both of the
                following suboptions:

                deps | nodeps
                     Loops can contain loop-carried dependencies.
                itercnt=<n>
                     The iteration count of a typical loop is <n>.

                The default is -qassert=deps:itercnt=1024.

         -qcache=<suboptions_list>
                Specifies the cache configuration for a specific
                execution machine. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                assoc=<n>
                     Specifies the set-associativity of the cache:
                     0   = Directly-mapped
                     1   = Fully associative
                     (n > 1) = <n>-way set-associative
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty resulting
                     from a cache miss.
                level=<level>
                     Specifies which level of cache is affected:
                     1 = Basic cache
                     2 = Level-2 cache, or the table lookaside
                     buffer (TLB) if the machine has no level-2
                     cache
                     3 = TLB, in a machine that does have a level-2
                     cache
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<type>
                     Specifies the type of cache that the settings
                     apply to:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The default is determined by the -qtune and -qarch
                settings.

         -qcompact | -qnocompact
                Reduces optimizations that increase code size.  The
                default is -qnocompact.

         -qdirectstorage | -qnodirectstorage
                Specifies that a compilation unit might reference
                write-through-enabled or cache-inhibited storage.
                The default is -qnodirectstorage.

         -qenablevmx | -qnoenablevmx
                Enables generation of Vector Multimedia Extension
                (VMX) instructions.  The default is -qnoenablevmx.

         -qessl | -qnoessl
                Allows the use of the Engineering and Scientific
                Subroutine Library (ESSL) routines in place of
                Fortran 90 intrinsic procedures.  The default is
                -qnoessl.

         -qfdpr | -qnofdpr
                Provides object files with information that the AIX
                Feedback Directed Program Restructuring (fdpr)
                performance-tuning utility needs to optimize the
                resulting executable file.  The default is
                -qnofdpr.

         -qhot[=<suboptions>] | -qnohot
                Performs high-order loop analysis and
                transformations during optimization. This option is
                a powerful alternative to hand-tuning that provides
                opportunities to optimize loops and array language.
                The suboptions are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value. When <n> is not
                     specified, the compiler will pad any arrays
                     where it infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. See the XL Fortran
                     Compiler Reference for more information.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a VMX (Vector Multimedia Extension)
                     instruction.  If you specify -qhot=nosimd, the
                     compiler performs optimizations on loops and
                     arrays, but avoids replacing certain code with
                     VMX instructions.
                vector | novector
                     Specifies whether to allow the compiler to
                     optimize by replacing code with calls to
                     vector library routines.  Only takes effect
                     when specified with -qnostrict or -O3 or
                     higher optimization level.

                The default is -qnohot. If -qhot is specified
                without parameters, the default is -qhot=vector.

         -qipa[=<suboptions_list>] | -qnoipa
                Enhances -O optimization by performing detailed
                analysis across procedures. Optimization level -O2
                or higher is required when using -qipa.
                <suboptions_list> is a colon-separated list of
                suboptions. Regular expressions are supported when
                specifying <procedure_names_list> in the following
                -qipa suboptions: exits, inline, noinline, lowfreq,
                pure, safe, and unknown. <procedure_names_list> is
                a comma-separated list. The suboptions are:

                exits=<procedure_names_list>
                     Specifies a selected set of procedures which
                     always end the program.
                clonearch=<architecture_list> | noclonearch
                     Allows you to specify multiple architectures
                     in the event that you want to compile your
                     application for multiple architectures with a
                     single binary file. <architecture_list> is a
                     comma-separated list of one or more of the
                     following architectures: pwr4, pwr5, ppc970,
                     and pwr5x. This must be specified during link
                     time.  The default is noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of the mangled names of the functions that you
                     wish to clone (or not clone). Please note that
                     this suboption has no effect unless
                     -qipa=clonearch=<arch> is specified. You can
                     use regular expression syntax when specifying
                     function names.  The default is nocloneproc.
                inline=<options_list>
                     Specifies a colon-separated list of inline
                     options, which are as follows:
                     auto | noauto
                          Specifies whether to automatically
                          perform inline expansion.  The default is
                          auto.
                     limit=<n>
                          Changes the size limits that the
                          inline=auto option uses to determine how
                          much inline expansion to do. <n> is the
                          optimizers approximation of the number of
                          bytes of code that will be generated.
                     <procedure_names_list>
                          Specifies the procedures to attempt to
                          inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This argument is
                          implemented only when inline=auto is on.
                noinline=<procedure_names_list>
                     Specifies the procedures which are not to be
                     inlined.
                isolated=<procedure_names_list>
                     Specifies the procedures that are not compiled
                     with -qipa and do not directly refer to any
                     global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization to perform:
                     0
                          Performs minimal inter-procedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full inter-procedural data flow and alias
                          analysis.
                     The default level is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, in the event that an object
                     listing has been requested using the -qlist or
                     -qipa=list option. The default name is
                     "a.lst". Specifying 'long' or 'short'
                     determines which listing sections will be
                     included. The default is short.
                lowfreq=<procedure_names_list>
                     Specifies the procedures that are likely to be
                     called infrequently during the course of a
                     typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the interprocedural behavior for
                     procedures not compiled with -qipa.  The
                     default is 'unknown'.
                object | noobject
                     Includes standard object code in the object
                     files. If the noobject option is specified, it
                     can substantially reduce overall compilation
                     time by not generating object code during the
                     first IPA phase. The default is object. Note,
                     this is a compile-time suboption.
                partition={small|medium|large}
                     Specifies the size of the regions within the
                     program to analyze. Larger partitions contain
                     more procedures, which result in better
                     interprocedural analysis but require more
                     storage to optimize.  The default is medium.
                pdfname=<filename>
                     Specifies the name of the profile data file
                     that contains the PDF profiling information.
                     The default filename is __pdf.
                pure=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "pure" must be "isolated" and
                     "safe". It must not alter the internal state
                     nor have side-effects, which are defined as
                     potentially altering any data object visible
                     to the caller.
                safe=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "safe" may modify global
                     variables and dummy arguments.
                stdexits | nostdexits
                     Specifies that certain predefined routines can
                     be optimized as with the exits suboption. The
                     procedures are abort, exit, _exit, and
                     _assert.  The default is nostdexits.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure specified
                     as "unknown" may make calls to other parts of
                     the program compiled with -qipa and modify
                     global variables and dummy arguments.

                Options intended for use by the link-time phase of
                -qipa are -qlibansi, -qlibessl, -qlibposix and
                -qthreaded.  The default is -qnoipa.

         -qkeepparm | -qnokeepparm
                Ensures that the incoming parameters are stored on
                the stack even when optimizing. This may negatively
                impact execution performance. This option then
                provides access to the values of incoming
                parameters to tools, such as debuggers, simply by
                preserving those values on the stack.  The default
                is -qnokeepparm.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large 16 MB pages provided on POWER4 and higher
                based systems.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are in fact the library
                functions.  The default is -qnolibansi.

         -qlibessl | -qnolibessl
                Assumes that all functions with the name of an ESSL
                defined library function are, in fact, the library
                functions.  The default is -qnolibessl.

         -qlibposix | -qnolibposix
                Assumes that all functions with the name of a POSIX
                1003.1 defined library function are, in fact, the
                system functions.  The default is -qnolibposix.

         -qmaxmem=<kbytes>
                Limits the amount of memory that the compiler
                allocates while performing specific, memory-
                intensive optimizations. If <kbytes> is -1, the
                compiler will take as much memory as it needs
                without checking for limits. The default is
                -qmaxmem=2048 when using optimization level -O2,
                and -qmaxmem=-1 when using -O3 or greater.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 Produces an object that is instrumented to collect
                run-time execution information. This is phase 1 of
                the profile-directed feedback optimization process.

         -qpdf2 Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

         -qprefetch | -qnoprefetch
                Automatically inserts prefetch instructions where
                the optimizer perceives a benefit.  The default is
                -qprefetch.

         -qrecur | -qnorecur
                Not recommended. Allows external subprograms to be
                called recursively. For new programs, use the
                RECURSIVE keyword, which provides a standard-
                conforming way of using recursive procedures.  The
                default is -qnorecur.

         -qshowpdf | -qnoshowpdf
                Adds additional call and block count profiling
                information to an executable. This option is used
                together with the -qpdf1 option.  The default is
                -qnoshowpdf.

         -qsmallstack[=<suboption>] | -qnosmallstack
                Specifies that the compiler will minimize stack
                usage where possible. This option can take the
                form:

                -qsmallstack
                     Enables only general small stack
                     transformations.
                -qsmallstack=dynlenonheap
                     Asserts that automatic variables which are
                     dynamically-sized are allocated from the heap
                     and enables general small stack
                     transformations.
                -qsmallstack=nodynlenonheap
                     Disables dynamic-length variable allocation.
                -qnosmallstack
                     Disables only the general small stack
                     transformations.

                The default is -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Specifies that code should be produced for an SMP
                system.  <suboptions_list> is a colon-separated
                list of one or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization.
                nested_par | nonested_par
                     Specifies that prescriptive nested parallel
                     constructs should be parallelized by the
                     compiler.
                omp | noomp
                     Enforces compliance with the OpenMP Fortran
                     API.
                opt | noopt
                     Controls optimization for parallelization.
                     -qsmp=noopt specifies that the compiler should
                     do the least amount of optimization that is
                     required to parallelize the code and preserve
                     maximum debugability.
                rec_locks | norec_locks
                     Allows recursive locks to be used to avoid
                     problems associated with CRITICAL constructs.
                     If -qsmp=norec_locks is specified, recursive
                     locks will not be used to implement critical
                     sections.
                schedule=<suboptions>
                     The schedule suboption can take any of the
                     following sub-suboptions:
                     affinity[=<n>]
                     dynamic[=<n>]
                     guided[=<n>]
                     runtime
                     static[=<n>]
                     For their descriptions, refer to the XL
                     Fortran Compiler Reference.
                threshold=<n>
                     Controls the amount of automatic loop
                     parallelization that occurs. The value of <n>
                     represents the lower limit allowed for
                     parallelization of a loop, based on the level
                     of "work" present in a loop.

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, opt, noomp, norec_locks, nonested_par,
                schedule=runtime, and threshold=100.

         -qspillsize=<bytes>
                The long form of -NS. See the -NS option.  The
                default is -qspillsize=512.

         -qstacktemp=<num>
                Determines where to allocate applicable compiler
                temporaries at run time. The allocation depends on
                the value of <num>. The values are:

                0
                     Indicates that the compiler will decide
                     whether to allocate the applicable compiler
                     temporaries on the heap or the stack.
                -1
                     Indicates that applicable compiler temporaries
                     are to be always allocated on the stack. This
                     is the best-performing setting but uses the
                     most amount of stack storage.
                (1 or greater)
                     Indicates that applicable compiler temporaries
                     less than this value (bytes) should be
                     allocated on the stack and those greater than
                     or equal to this value should be allocated on
                     the heap.

                The default is -qstacktemp=0.

         -qstrict | -qnostrict
                Ensures that optimizations done by the -O3 and
                greater (and optionally -O2) options do not alter
                the semantics of a program. This option is ignored
                for -qnoopt.  For -O3 and greater, the default is
                -qnostrict. Otherwise the default is -qstrict.

         -qstrict_induction | -qnostrict_induction
                Prevents the compiler from performing induction
                (loop counter) variable optimizations that could
                alter the semantics of a program.  The default is
                -qnostrict_induction.

         -qthreaded
                Asserts that the compiler will generate thread-safe
                code when generating its own code or allocating
                compiler-created temporary data. User-written code
                that is algorithmically not thread-safe is
                unaffected by this option and will remain non-
                thread-safe. The default is -qthreaded when using
                xlf_r, xlf_r7, xlf90_r, xlf90_r7, xlf95_r, or
                xlf95_r7 invocation commands.

         -qtune=<suboption>
                Tunes instruction selection, scheduling, and other
                implementation-dependent performance enhancements
                for a specific implementation of a hardware
                architecture.  -qtune will not alter the ability of
                a program to run on a processor but will produce
                optimal code sequences tuned to a particular
                processor.  The suboptions are:

                auto
                     Automatically detects the specific processor
                     type of the compiling machine and produces an
                     object optimized for that processor.
                601
                     Produces an object optimized for all the
                     PowerPC 601 processors.
                603
                     Produces an object optimized for all the
                     PowerPC 603 processors.
                604
                     Produces an object optimized for all the
                     PowerPC 604 processors.
                pwr
                     Produces an object optimized for the POWER
                     hardware platforms.
                p2sc
                     The optimizations are tuned for the POWER2
                     Super Chip.
                pwr2
                     Produces an object optimized for the POWER2
                     hardware platforms.
                pwrx
                     This is equivalent to pwr2.
                pwr2s
                     The optimizations are tuned for the desktop
                     implementation of the POWER2 architecture,
                     which has a narrower processor-to-memory bus
                     than other POWER2 implementations.
                pwr3
                     Produces an object optimized for the POWER3
                     hardware platforms.
                pwr4
                     Produces an object optimized for the POWER4
                     hardware platforms.
                pwr5
                     Produces an object optimized for the POWER5
                     hardware platforms.
                rs64a
                     Produces an object optimized for the RS64I
                     processor.
                rs64b
                     Produces an object optimized for the RS64II
                     processor.
                rs64c
                     Produces an object optimized for the RS64III
                     processor.
                ppc970
                     Produces an object optimized for PowerPC 970
                     processors.

                The compiler uses -qtune setting that is compatible
                with the target architecture, which is controlled
                by the -qarch, -q32, and -q64 options.  The default
                setting is determined by the setting of -qarch.

         -qunroll[={auto|yes}] | -qnounroll
                Specifies whether unrolling DO loops is allowed in
                a program. Unrolling is allowed on outer and inner
                DO loops.  The suboptions are:

                auto
                     The compiler performs basic loop unrolling.
                yes
                     The compiler looks for more opportunities to
                     perform loop unrolling than is done with the
                     -qunroll=auto option. Specifying -qunroll with
                     no suboptions is equivalent to -qunroll=yes.

                The default is -qunroll=auto.

         -qunwind | -qnounwind
                Specifies that the compiler will preserve the
                default behavior for saves and restores to volatile
                registers during a procedure call.  If you specify
                -qnounwind, the compiler rearranges subprograms to
                minimize saves and restores to volatile registers.
                This rearrangement may make it impossible for the
                program or debuggers to walk through or "unwind"
                subprogram stack frame chains.  The default is
                -qunwind.

         -qvecnvol | -qnovecnvol
                Asserts that the compiled application will use both
                volatile and non-volatile vector registers. You
                should use this option only after understanding
                interoperability with old binaries. If you are
                compiling C/C++ code in Fortran which calls any of
                the following subroutines: setjmp(),longjmp(),
                sigsetjmp(), siglongjmp(), _setjmp(), _longjmp(),
                getcontext(), setcontext(), makecontext(), and
                swapcontext(), then you should set -qnovecnvol.
                bos.adt.include version 5.3.0.30 or greater should
                be installed to use -qvecnvol on the host system.
                The default is -qnovecnvol.

         -qzerosize | -qnozerosize
                Improves performance of Fortran 77 and some Fortran
                90 and Fortran 95 programs by preventing checking
                for zero-sized character strings and arrays.
                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90, and f95 commands, the default is
                -qzerosize.  For the xlf, xlf_r, xlf_r7, f77, and
                fort77 commands, the default is -qnozerosize.

  Error Checking and Debugging Options
         -C     Checks each reference to an array element, array
                section, or character substring for correctness.
                This is the short form of -qcheck.

         -D     Specifies whether the compiler compiles fixed
                source form lines with a D in column 1 or treats
                them as comments. Please note that in order to pass
                C-style -D macro definitions to the C preprocessor
                (e.g. compiling a file that ends with .F) use the
                -W option. For example:
                -WF,-DDEFINE_THIS
                -D is the short form of -qdlines.

         -g     Generates debug information for use by a symbolic
                debugger.

         -qcheck | -qnocheck
                The long form of the -C option. See -C for details.
                The default is -qnocheck.

         -qdbg | -qnodbg
                The long form of the -g option. See -g for details.
                The default is -qnodbg.

         -qdpcl | -qnodpcl
                Generates symbols that tools based on the Dynamic
                Probe Class Library (DPCL) API can use to see the
                structure of an executable file. You must also
                specify the -g option when you specify -qdpcl.
                This option has no effect when optimization (-O) is
                enabled. The default is -qnodpcl.

         -qextchk | -qnoextchk
                Sets up type-checking information for common
                blocks, procedure definitions, procedure
                references, and module data. Later, the linker can
                detect mismatches across compilation units using
                this information.  The default is -qnoextchk.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Determines what types of floating-point exception
                conditions to detect at run time. The program
                receives a SIGTRAP signal when the corresponding
                exception occurs.  <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                enable
                     Turn on checking for the specified exceptions
                     in the main program so that the exceptions
                     generate SIGTRAP signals.
                imprecise
                     Only check for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detect and trap on floating-point inexact, if
                     exception checking is enabled.
                invalid
                     Detect and trap on floating-point invalid
                     operations.
                nanq
                     Detect and trap all quiet not-a-number (NaNQ)
                     values and signaling not-a-number (NaNS)
                     values.
                overflow
                     Detect and trap on floating-point overflow.
                underflow
                     Detect and trap on floating-point underflow.
                zerodivide
                     Detect and trap on floating-point division by
                     zero.

                The default is -qnoflttrap. When -qflttrap is
                specified with no suboptions, the default activated
                suboptions are: overflow, underflow, zerodivide,
                invalid, and inexact.

         -qfullpath | -qnofullpath
                Records the full (or absolute) path names of source
                and include files in object files compiled with
                debugging information (-g option).  The default is
                -qnofullpath.

         -qhalt=<sev>
                Stops before producing any object, executable, or
                assembler source files if the maximum severity of
                compile-time messages equals or exceeds the
                specified severity <sev>, where the severity levels
                are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                The default is -qhalt=s.

         -qinitauto[=<hex_value>] | -qnoinitauto
                Initializes each byte or word (4 bytes) of storage
                for automatic variables to a specific value,
                depending on the length specified in <hex_value>.
                This helps you to locate variables that are
                referenced before they are defined. <hex_value> is
                a 1 to 8 digit hexadecimal number.  The default is
                -qnoinitauto. If you specify -qinitauto without a
                <hex_value>, the compiler initializes the value of
                each byte of automatic storage to zero. This option
                should be used for debugging purposes only.

         -qlanglvl=<suboption>
                Determines which language standard (or
                subset/superset of a standard) to check against for
                nonconformance. This option will only produce
                messages; all code valid in extended mode will
                compile regardless of which suboption is specified.
                The suboptions are:

                77std
                     Accepts the language specified by the ANSI
                     Fortran 77 standard.
                90std
                     Accepts the language specified by the ISO
                     Fortran 90 standard.
                90pure
                     Same as 90std, except that it reports errors
                     for any obsolescent Fortran 90 features used.
                90ext
                     Obsolete suboption that is equivalent to
                     extended.
                95std
                     Accepts the language specified by the ISO
                     Fortran 95 standard.
                95pure
                     Same as 95std, except that it also reports
                     errors for any obsolescent Fortran 95 features
                     used.
                2003std
                     Accepts the language that the ISO Fortran 95
                     standard specifies, as well as all Fortran
                     2003 features supported by XL Fortran, and
                     reports anything else as an error.
                2003pure
                     The same as 2003std except that it also
                     reports errors for any obsolescent Fortran
                     2003 features used.
                extended
                     Accepts the full Fortran 95 language standard,
                     all Fortran 2003 features supported by XL
                     Fortran, and all extensions, effectively
                     turning off language-level checking.

                The default is -qlanglvl=extended.

         -qlinedebug | -qnolinedebug
                Generates line number and source file name
                information for the debugger. This option produces
                minimal debugging information, so the resulting
                object size is smaller than what is produced if the
                -g debugging option is specified. The default is
                -qnolinedebug.

         -qobject | -qnoobject
                Specifies whether to produce an object file or to
                stop immediately after checking the syntax of the
                source files.  The default is -qobject.

         -qsaa | -qnosaa
                Checks for conformance to the SAA Fortran language
                definition. It identifies nonconforming source code
                and also options that allow such nonconformances.
                The default is -qnosaa.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, and other information, in the
                corresponding object file. The compilation must
                produce an object file for this option to take
                effect.  The default is -qnosaveopt.

         -qsigtrap[=<trap_handler>]
                When you are compiling a file that contains a main
                program, this option sets up the specified trap
                handler to catch SIGTRAP exceptions. This option
                enables you to install a handler for SIGTRAP
                signals without calling the SIGNAL subprogram in
                the program. Specifying -qsigtrap with no
                <trap_handler> is equivalent to -qsigtrap=xl__trce.

         -qtbtable=<suboption>
                Limits the amount of debugging traceback
                information in object files, which reduces the size
                of the program. The suboptions are:

                none
                     Includes no traceback information.
                small
                     Includes traceback information but not the
                     names of procedures or information about
                     procedure parameters.
                full
                     Includes complete traceback information.

                The default is full traceback information in the
                object file when compiling non-optimized (without
                -O) or for debugging (with -g).  Otherwise, the
                default is -qtbtable=small.

         -qwarn64 | -qnowarn64
                Assists in porting code from a 32-bit environment
                to a 64-bit environment by detecting the truncation
                of an 8-byte integer pointer to 4 bytes. The
                -qwarn64 option uses informational messages to
                identify statements that may cause problems with
                the 32-bit to 64-bit migration.  The default is
                -qnowarn64.

         -qxflag=<suboption>
                Specifies rarely-needed compiler behaviors.  The
                suboptions are:

                oldtab
                     For fixed source form programs, interprets a
                     tab in columns 1 to 5 as a single character.
                     The source statement still starts immediately
                     after the tab, but the tab character is
                     treated as a single character for counting
                     columns. This setting allows up to 71
                     characters of input, depending on where the
                     tab character occurs.
                dvz
                     Specifying -qxflag=dvz causes the compiler to
                     generate code to detect floating-point
                     divide-by-zero operations. With this option
                     on, the extra code calls the external handler
                     function __xl_dzx when the divisor is zero.
                xalias
                     This is obsolete. Please use -qalias=nostd in
                     your new applications.

         -qxlines | -qnoxlines
                Specifies whether fixed source form lines with a X
                in column 1 are compiled or treated as comments.
                The default is -qnoxlines.

  Listing and Message Options
         -#     Generates information on the progress of the
                compilation without actually running the individual
                components.

         -S     Produces one or more .s files, showing equivalent
                assembler source for each Fortran source file.

         -V     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes. This is the
                same as -v except that you can cut and paste
                directly from the display to create a command.

         -v     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes.

         -w     Suppresses informational, language-level, and
                warning messages. This option sets -qflag=e:e.

         -qattr[=full] | -qnoattr
                Specifies whether to produce the attribute
                component of the attribute and cross-reference
                section of the listing.  The listing contains all
                identifiers (-qattr=full) or only the names that
                are referenced (-qattr).  The default is -qnoattr.

         -qflag=<listing_severity>:<terminal_severity>
                Specifies the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> determines
                the minimum level for the listing file, and
                <terminal_severity> determines the minimum level
                for the terminal.  The severity levels are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                Note that both <listing_severity> and
                <terminal_severity> must be specified.  The default
                is -qflag=i:i.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                Specifying -qlist with no suboptions is equivalent
                to specifying -qlist=nooffset.  The default is
                -qnolist.

         -qlistopt | -qnolistopt
                Determines whether to show the setting of every
                compiler option in the listing file or only
                selected options. These selected options include
                those specified on the command line or directives
                plus some that are always put in the listing.  The
                default is -qnolistopt.

         -qnoprint
                Prevents the compiler from creating the listing
                file, regardless of the settings of other listing
                options.

         -qphsinfo | -qnophsinfo
                Determines whether timing information is displayed
                on the terminal for each compiler phase.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qreport[=<suboptions>] | -qnoreport
                Determines whether to produce transformation
                reports showing how the program is parallelized and
                how loops are optimized.  The suboptions are:

                hotlist
                     Produces a report showing how loops are
                     transformed.
                smplist
                     Produces a report showing how the program is
                     parallelized.

                The default is -qnoreport.

         -qsource | -qnosource
                Determines whether to produce the source section of
                the listing.  The default is -qnosource.

         -qsuppress[={<msg_nums_list>|cmpmsg}] | -qnosuppress
                Determines which messages to suppress from the
                output stream.  The suboptions are:

                <msg_nums_list>
                     A colon-separated list of 7-digit compiler
                     message numbers.
                cmpmsg
                     Suppresses the informational messages that
                     report compilation progress and a successful
                     completion.

                The default is -qnosuppress.

         -qversion
                Displays the version and release of the invoking
                compiler. Specify this option on its own with the
                compiler command.

         -qxref[=full] | -qnoxref
                Determines whether to produce the cross-reference
                component of the attribute and cross-reference
                section of the listing.  If you specify only
                -qxref, only identifiers that are used are
                reported. If you specify -qxref=full, the listing
                contains information about all identifiers that
                appear in the program, whether they are used or
                not.  The default is -qnoxref.

  Compatibility Options
         -1     Executes each DO loop in the compiled program at
                least once if its DO statement is executed, even if
                the iteration count is 0. This option provides
                compatibility with Fortran 66. The default is to
                follow the behavior of later Fortran standards,
                where DO loops are not performed if the iteration
                count is 0. This is the short form of the -qonetrip
                option.

         -u     Specifies that no implicit typing of variable names
                is permitted. It has the same effect as using the
                IMPLICIT NONE statement in each scope that allows
                implicit statements. By default, implicit typing is
                allowed.

         -qautodbl=<setting>
                Converts single-precision floating-point
                calculations to double-precision or converts
                double-precision calculations to extended-
                precision.  <setting> can be:

                none
                     Does not promote or pad any objects that share
                     storage.
                dbl4
                     Promotes floating-point objects that are
                     single precision or are composed of such
                     objects.
                dbl8
                     Promotes floating-point objects that are
                     double-precision or are composed of such
                     objects.
                dbl
                     Combines the promotions done by dbl4 and dbl8.
                dblpad4
                     Performs the same promotions as dbl4, and pads
                     objects of other types (except CHARACTER) that
                     can share storage with promoted objects.
                dblpad8
                     Performs the same promotions as dbl8, and also
                     pads objects of other types (except CHARACTER)
                     if they can share storage with promoted
                     objects.
                dblpad
                     Combines the promotions done by dbl4 and dbl8,
                     and also pads objects of other types (except
                     CHARACTER) if they can share storage with
                     promoted objects.

                The default is -qautodbl=none.

         -qcclines | -qnocclines
                Enables recognition of conditional compilation
                lines in fixed source form and F90 free source
                form. IBM free source form is not supported.  The
                default is -qcclines if -qsmp=omp is specified.
                Otherwise, the default is -qnocclines.

         -qctyplss[={arg|noarg}] | -qnoctyplss
                Specifies whether character constant expressions
                are allowed wherever typeless constants may be
                used. Specifying -qctyplss=arg allows character
                constant expressions, but if a Hollerith constant
                is used as an actual argument, it is passed to the
                procedure as if it was an integer actual argument.
                The default is -qnoctyplss. If -qctypless is
                specified with no suboption, the default is
                -qctyplss=noarg.

         -qddim | -qnoddim
                Specifies that the bounds of pointee arrays are
                re-evaluated each time the arrays are referenced
                and removes some restrictions on the bounds
                expressions for pointee arrays.  The default is
                -qnoddim.

         -qdpc[=<e>] | -qnodpc
                Increases the precision of real constants, for
                maximum accuracy, when assigning real constants to
                DOUBLE PRECISION variables. -qdpc=<e> also promotes
                constants with an <e> exponent.  The default is
                -qnodpc.

         -qescape | -qnoescape
                Specifies whether the backslash is treated as an
                escape character in character strings, Hollerith
                constants, H edit descriptors, and character string
                edit descriptors.  The default is -qescape.

         -qextern=<procedure_names_list>
                Allows user-written procedures to be called instead
                of XL Fortran intrinsics. <procedure_names_list> is
                a colon-separated list of procedure names.  The
                procedure names are treated as if they appear in an
                EXTERNAL statement in each compilation unit being
                compiled.

         -qextname[=<names_list>] | -qnoextname
                Adds an underscore to the names of all global
                entities, which helps in porting programs from
                systems where this is a convention for mixed-
                language programs. <names_list> is a colon-
                separated list of global entity names.  The default
                is -qnoextname.

         -qinit=f90ptr
                Makes the initial association status of pointers
                disassociated instead of undefined. The default
                association status of pointers is undefined.

         -qintlog | -qnointlog
                Allows mixture of integer and logical data entities
                in expressions and statements. The default is
                -qnointlog.

         -qintsize={2|4|8}
                Sets the size (in bytes) of default INTEGER and
                LOGICAL data entities (that is, those for which no
                length or kind is specified).  The default is
                -qintsize=4.

         -qlog4 | -qnolog4
                Specifies whether the result of a logical operation
                with logical operands is a LOGICAL(4) or is a
                LOGICAL with the maximum length of the operands.
                The default is -qnolog4.

         -qmodule=mangle81
                Specifies that the compiler should use the XL
                Fortran Version 8.1 naming convention for non-
                intrinsic module files. This option allows you to
                produce modules and their associated object files
                with the Version 10.1 compiler and link these
                object files with others compiled with the Version
                8.1 compiler, or earlier.

         -qnullterm | -qnonullterm
                Appends a null character to each character constant
                expression that is passed as a dummy argument, to
                make it more convenient to pass strings to C
                functions. The default is -qnonullterm.

         -qonetrip | -qnoonetrip
                The long form of the -1 option. See -1 for details.
                The default is -qnoonetrip.

         -qport=<suboption> | -qnoport
                Increases flexibility when porting programs to XL
                Fortran, providing a number of options to
                accommodate Fortran language extensions.  The
                suboptions are:

                clogicals | noclogicals
                     Allows non-zero integers to be treated as true
                     when used as logicals. The change affects all
                     logical operators. This suboption only takes
                     effect if -qintlog is activated.  The default
                     is noclogicals.
                hexint | nohexint
                     Specifies that typeless constant hexadecimal
                     strings are converted to integers when passed
                     as actual arguments to the INT intrinsic
                     function. Typeless constant hexadecimal
                     strings which are not passed as actual
                     arguments to INT remain unaffected.  The
                     default is nohexint.
                mod | nomod
                     Relaxes existing constraints on the MOD
                     intrinsic function, allowing two arguments of
                     the same data type parameter to be of
                     different kind type parameters. The result
                     will be of the same type as the argument, but
                     with the larger kind type parameter value.
                     The default is nomod.
                nullarg | nonullarg
                     For an external or internal procedure
                     reference, this causes the compiler to treat
                     an empty argument (which is delimited by a
                     left parenthesis and a comma, two commas, or a
                     comma and a right parenthesis) as a null
                     argument. This suboption has no effect if the
                     argument list is empty.  The default is
                     nonullarg.
                sce | nosce
                     By default, the compiler performs short
                     circuit evaluation in selected logical
                     expressions using XL Fortran rules. Specifying
                     'sce' allows the compiler to use non-XL
                     Fortran rules. The compiler will perform short
                     circuit evaluation if the current rules allow
                     it.  The default is nosce.
                typestmt | notypestmt
                     The TYPE statement, which behaves in a manner
                     similar to the PRINT statement, is supported
                     whenever this option is specified. The default
                     is notypestmt.
                typlssarg | notyplssarg
                     Converts all typeless constants to default
                     integers if the constants are actual arguments
                     to an intrinsic procedure whose associated
                     dummy arguments are of integer type. Dummy
                     arguments associated with typeless actual
                     arguments of non-integer type remain
                     unaffected by this option.  The default is
                     notyplssarg.

                The default is -qnoport.

         -qposition={appendold|appendunknown}
                Positions the file pointer at the end of the file
                when data is written after an OPEN statement with
                no "POSITION=" specifier, and the corresponding
                "STATUS=" value (OLD or UNKNOWN) is specified.  The
                default depends on the I/O specifiers in the OPEN
                statement and on the compiler invocation command.
                The default is -qposition=appendold for the xlf,
                xlf_r, xlf_r7, and f77/fort77 commands and the
                defined Fortran 90 and Fortran 95 behaviors for the
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, xlf95_r7,
                f90 and f95 commands.

         -qqcount | -qnoqcount
                Accepts the character-count Q edit descriptor (Q)
                as well as the extended-precision Q edit descriptor
                (Qw.d). With -qnoqcount, all Q edit descriptors are
                interpreted as the extended-precision Q edit
                descriptor.  The default is -qnoqcount.

         -qrealsize=<bytes>
                Sets the default size of REAL, DOUBLE PRECISION,
                COMPLEX and DOUBLE COMPLEX values. The allowed
                values for <bytes> are 4 and 8.  The default is
                -qrealsize=4.

         -qsave[=<suboption>] | -qnosave
                Specifies the default storage class for local
                variables.  The suboptions are:

                all
                     The default storage class for all local
                     variables is STATIC. This is the default when
                     -qsave is specified without a suboption.
                defaultinit
                     The default storage class is STATIC for local
                     variables of derived type that have default
                     initialization specified.

                Specifying -qnosave sets the default storage class
                to AUTOMATIC.  The default is -qsave for xlf,
                xlf_r, xlf_r7, f77, or fort77 to duplicate the
                behavior of FORTRAN77 commands, and -qnosave
                otherwise.

         -qsclk[=<suboption>]
                Specifies the resolution that the SYSTEM_CLOCK
                intrinsic procedure uses in a program.  The
                suboptions are:

                centi
                     Uses centisecond resolution for the values
                     returned.
                micro
                     Uses microsecond resolution.

                The default is -qsclk=centi.

         -qswapomp | -qnoswapomp
                Specifies that the compiler should recognize and
                substitute OpenMP routines in XL Fortran programs.
                The default is -qswapomp.

         -qundef | -qnoundef
                The long form of the -u option. See -u for details.
                The default is -qnoundef.

         -qxlf77=<settings_list>
                Provides compatibility with Fortran 77 aspects of
                language semantics and I/O data format that have
                changed. Most of these changes are required by the
                Fortran 90 standard. <settings_list> is a colon-
                separated list of one or more of the following
                suboptions:

                blankpad | noblankpad
                     For internal, direct-access, and stream-access
                     files, uses a default setting equivalent to
                     pad='no'. This setting produces conversion
                     errors when reading from such a file if the
                     format requires more characters than the
                     record has, thus duplicating the XL Fortran
                     Version 2 behavior.
                gedit77 | nogedit77
                     Uses Fortran 77 semantics for the output of
                     REAL objects with the G edit descriptor.
                intarg | nointarg
                     Converts all the integer arguments of an
                     intrinsic procedure to the kind of the longest
                     argument, if they are of different kinds.
                intxor | nointxor
                     Treats .XOR. as a logical binary intrinsic
                     operator rather than a defined operator.
                leadzero | noleadzero
                     Produces a leading zero in real output under
                     the D, E, L, F and Q edit descriptors.
                oldboz | nooldboz
                     Turns blanks into zeros for data read by B, O,
                     and Z edit descriptors, regardless of the
                     "BLANK=" specifier or any BN or BZ control
                     edit descriptors.
                persistent | nopersistent
                     Saves the addresses of arguments to
                     subprograms with ENTRY statements in static
                     storage.
                softeof | nosofteof
                     Allows READ and WRITE operations when a unit
                     is positioned after its endfile record, unless
                     that position is the result of executing an
                     ENDFILE statement.

                The default suboptions are: blankpad, nogedit77,
                nointarg, nointxor, leadzero, nooldboz,
                nopersistent, and nosofteof for the f90, xlf90,
                xlf90_r, xlf90_r7, f95, xlf95, xlf95_r, and
                xlf95_r7 commands, and are the exact opposite for
                the xlf, xlf_r, xlf_r7, f77, and fort77 commands.

         -qxlf90=<settings_list>
                Provides backward compatibility with XL Fortran for
                AIX Version 5 and the Fortran 90 standard for
                certain aspects of the Fortran language.
                <settings_list> is a colon-separated list of one or
                both of the following suboptions:

                signedzero | nosignedzero
                     Determines how the SIGN(A,B) function handles
                     signed real 0.0. Prior to XL Fortran Version
                     6.1, SIGN(A,B) returned |A| when B=-0.0. This
                     behavior conformed with the Fortran 90
                     standard. Now, if you specify the
                     -qxlf90=signedzero compiler option, SIGN(A,B)
                     returns -|A| when B=-0.0. This behavior
                     conforms to the Fortran 95 standard and is
                     consistent with the IEEE standard for binary
                     floating-point arithmetic.
                autodealloc | noautodealloc
                     Determines whether the compiler deallocates
                     allocatable objects that are declared locally
                     without either the SAVE or the STATIC
                     attribute and have a status of currently
                     allocated when the subprogram terminates.

                The default suboptions are signedzero and
                autodealloc for the xlf95, xlf95_r, xlf95_r7 and
                f95 invocation commands. For all other invocation
                commands, the default suboptions are nosignedzero
                and noautodealloc.

  Linking Options
         -b64   The AIX operating system provides 64-bit shared
                object files in both libc.a and libm.a. In 64-bit
                mode, you can use the -b64 linker option to
                instruct ld to bind with 64-bit objects.

         -bdynamic, -bshared, -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                This is available on AIX 4.2 and above.

                -bdynamic
                     Specifies that shared objects are linked
                     dynamically.
                -bshared
                     Equivalent to -bdynamic.
                -bstatic
                     Specifies that shared objects are statically
                     linked into the output file.

                The default is -bdynamic.

         -bhalt:<error_level>
                Specifies the maximum error level that is allowed
                before the linker (ld) command halts. If any linker
                command has an error return value greater than the
                value that is specified by the <error_level>
                variable, linking stops.  The default value is 4,
                as specified in the configuration file.

         -bloadmap:<filename>
                Requests that a log of linker actions and messages
                be saved in file <filename>. You can use the log to
                help diagnose linking problems.

         -bmaxdata=<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint.  The default
                is -bmaxdata=0.

         -bmaxstack:<bytes>
                Specifies the maximum amount of space to reserve
                for the program stack segment for programs where
                the size of these regions is a constraint.

         -brtl | -bnortl
                Determines which algorithm will be used to find
                libraries that are specified with the -l option. If
                -brtl is specified, run-time linking is enabled.

         -bshared
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.
                This is equivalent to -bdynamic.

         -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.

         -L<dir>
                Searches in directory <dir> for libraries specified
                by -l<key>.

         -l<key>
                Searches the specified library file at link time,
                where <key> selects the library lib<key>.a.

  Compiler Customization Options
         -B<prefix>
                Determines a substitute path name for executable
                files used during compilation, such as the compiler
                of linker. <prefix> is the name of a directory
                where the alternative executable files reside. It
                is added to the beginning of the standard program
                names and must end in a slash (/). This option can
                be used in combination with the -t option, which
                determines which of these components are affected
                by -B.

         -F[<config_file>][:<stanza>]
                Specifies an alternative configuration file
                <config_file>, the command to be used (<stanza>)
                within the configuration file, or both. At least
                one of the arguments must be supplied.  The default
                stanza depends on the name of the command used to
                invoke the compiler.

         -P{v|k}[!]
                This option is obsolete and has no effect. Invokes
                the selected optimizing preprocessor.

         -P     Invokes the -Pv preprocessor before the compiler.

         -Pv    Invokes the -Pv preprocessor before the compiler.

         -Pk    Invokes the -Pk preprocessor before the compiler.

         -P!    Invokes the -Pv preprocessor only.

         -Pv!   Invokes the -Pv preprocessor only.

         -Pk!   Invokes the -Pk preprocessor only.

         -t<components_list>
                Applies the prefix from the -B option to the
                specified program, <components_list>, where
                <components_list> is a chain (with no separator
                character inbetween each <component>, ie: "-taFp")
                containing one or more of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

         -W<component>,<options_list>
                Passes the listed options to a component that is
                executed during compilation. <options_list> is a
                comma-separated list of one or more options, and
                <component> is one of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies compile-time rounding of constant
                floating-point expressions. It is equivalent to the
                -qieee option. <rounding_mode> is one of the
                following:

                n = Round to nearest
                m = Round toward minus infinity
                p = Round toward plus infinity
                z = Round toward zero

                The default is -yn.

         -qfloat=<suboptions_list>
                Determines different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using an inline sequence of
                     code instead of a call to a library function.
                fold | nofold
                     Evaluates constant floating-point expressions
                     at compile time.
                hsflt | nohsflt
                     Speeds up calculations by removing range-
                     checking on single-precision float results,
                     and on conversions from floating-point to
                     integer.
                hssngl | nohssngl
                     Speeds up calculations in a safer way than
                     hsflt, by rounding single-precision
                     expressions only when the results are stored
                     into REAL(4) memory locations
                maf | nomaf
                     Generates multiply-add instructions where
                     appropriate.
                nans | nonans
                     Allows you to use the -qflttrap=invalid:enable
                     option to detect and deal with exception
                     conditions that involve signaling NaN (not-a-
                     number) values.
                rndsngl | norndsngl
                     Rounds the result of each single-precision
                     (REAL(4)) operation to single-precision,
                     rather than waiting until the full expression
                     is evaluated. It sacrifices speed for
                     consistency with results from similar
                     calculations on other types of computers.
                rrm | norrm
                     Turns off compiler optimizations that require
                     the rounding mode to be the default, round-
                     to-nearest, at run time.
                rsqrt | norsqrt
                     Allows the optimizer to change a division by
                     the result of a square root operation into a
                     multiply by the reciprocal of the square root.
                strictnmaf | nostrictnmaf
                     Turns off floating-point transformations that
                     are used to introduce negative MAF
                     instructions, as these transformations do not
                     preserve the sign of a zero value.
                The default active suboptions are: nofltint, fold,
                nohsflt, nohssngl, maf, nonans, norelax, norndsngl,
                norrm, norsqrt, and nostrictnmaf.

         -qieee=<mode>
                Specifies the rounding mode for the compiler to use
                when evaluating constant floating-point expressions
                at compile time, where <mode> is one of:

                near = Round to nearest representable number
                minus = Round toward minus infinity
                plus = Round toward plus infinity
                zero = Round toward zero

                The default is -qieee=near.

         -qstrictieeemod | -qnostrictieeemod
                Specifies that the compiler will adhere to the
                Fortran 2003 IEEE arithmetic rules for the
                ieee_arithmetic and ieee_exceptions intrinsic
                modules.  The default is -qstrictieeemod.

  SEE ALSO
         xlfndi(1), showpdf(1), cleanpdf(1), mergepdf(1),
         resetpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/fortran/xlfortran/library/
         www.ibm.com/software/awdtools/fortran/xlfortran/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL Fortran Enterprise Edition V10.1 for AIX(R)

         5724-M13

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.









































configure:6596: $? = 249
configure:6604: checking whether we are using the GNU Fortran 77 compiler
configure:6623: xlf -c -q64 conftest.F >&5
"conftest.F", line 3.15: 1515-019 (S) Syntax is incorrect.
** main   === End of Compilation 1 ===
1501-511  Compilation failed for file conftest.F.
configure:6630: $? = 1
configure: failed program was:
|       program main
| #ifndef __GNUC__
|        choke me
| #endif
| 
|       end
configure:6647: result: no
configure:6653: checking whether xlf accepts -g
configure:6670: xlf -c -g conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:6677: $? = 0
configure:6693: result: yes
configure:7004: checking whether Fortran 77 compiler accepts option -O2
configure:7020: xlf -q64 -o conftest conftest.f  >conftest.bas 2>&1
configure:7023: $? = 0
configure:7025: xlf -O2 -q64 -o conftest conftest.f  >conftest.out 2>&1
configure:7028: $? = 0
configure:7031: result: yes
configure:7033: checking whether routines compiled with -O2 can be linked with ones compiled without -O2
configure:7039: xlf -c -q64 conftest2.f >conftest2.out 2>&1
configure:7042: $? = 0
configure:7044: xlf -O2 -q64 -o conftest conftest2.o conftest.f  >conftest.bas 2>&1
configure:7047: $? = 0
configure:7086: result: yes
configure:7117: checking how to get verbose linking output from xlf
configure:7133: xlf -c -q64 -O2 conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:7140: $? = 0
configure:7162: xlf -o conftest -q64 -O2 -v conftest.f
exec: export(export,XL_CONFIG=/etc/xlf.cfg:xlf,NULL) 
exec: /usr/lpp/xlf/bin/xlfentry(/usr/lpp/xlf/bin/xlfentry,conftest.f,/tmp/F8905538KLQuib,/tmp/F8905538KLQuibF.lst,xlfsmsg.cat,xlfmsg.cat,conftest.f,OSVAR(aix.5.3),64(largetype),NOZEROSIZE,SAVE,ALIAS(intptr),POSITION(appendold),XLF90(noautodealloc,nosignedzero),XLF77(intarg,intxor,persistent,noleadzero,gedit77,noblankpad,oldboz,softeof),64,OPT(2),WSTREAMS(/tmp/F8905538KLQuiah1,/tmp/F8905538KLQuiab1,/tmp/F8905538KLQuias1),DEFMSG(/usr/lpp/xlf/bin/default_msg),-I/usr/lpp/xlf/include,NULL) 
** main   === End of Compilation 1 ===
exec: export(export,XL_FRONTEND=/usr/lpp/xlf/bin/xlfentry,NULL) 
exec: export(export,XL_ASTI=/usr/lpp/xlf/bin/xlfhot,NULL) 
exec: export(export,XL_BACKEND=/usr/lpp/xlf/bin/xlfcode,NULL) 
exec: export(export,XL_LINKER=/bin/ld,NULL) 
exec: export(export,XL_DIS=/usr/lpp/xlf/bin/dis,NULL) 
exec: export(export,XL_BOLT=/usr/lpp/xlf/bin/bolt,NULL) 
exec: /usr/lpp/xlf/bin/xlfhot(/usr/lpp/xlf/bin/xlfhot,/tmp/F8905538KLQuiah1,/tmp/F8905538KLQuiah2,/tmp/F8905538KLQuiab1,/tmp/F8905538KLQuiab2,/tmp/F8905538KLQuias1,/tmp/F8905538KLQuias2,/tmp/F8905538KLQuib,/tmp/F8905538KLQuibA.lst,NULL) 
exec: export(export,XL_FRONTEND=/usr/lpp/xlf/bin/xlfentry,NULL) 
exec: export(export,XL_ASTI=/usr/lpp/xlf/bin/xlfhot,NULL) 
exec: export(export,XL_BACKEND=/usr/lpp/xlf/bin/xlfcode,NULL) 
exec: export(export,XL_LINKER=/bin/ld,NULL) 
exec: export(export,XL_DIS=/usr/lpp/xlf/bin/dis,NULL) 
exec: export(export,XL_BOLT=/usr/lpp/xlf/bin/bolt,NULL) 
exec: /usr/lpp/xlf/bin/xlfcode(/usr/lpp/xlf/bin/xlfcode,/tmp/F8905538KLQuiah2,/tmp/F8905538KLQuiab2,conftest.o,/tmp/F8905538KLQuibB.lst,/tmp/F8905538KLQuias2,NULL) 
1501-510  Compilation successful for file conftest.f.
exec: /bin/ld(/bin/ld,-b64,/lib/crt0_64.o,-bpT:0x100000000,-bpD:0x110000000,-bh:4,-o,conftest,conftest.o,-lxlf90,-L/usr/lpp/xlf/lib,-lxlopt,-lxlf,-lxlomp_ser,-lm,-lc,NULL) 
unlink: conftest.o
configure:7231: result: -v
configure:7233: checking for Fortran 77 libraries of xlf
configure:7256: xlf -o conftest -q64 -O2 -v conftest.f
exec: export(export,XL_CONFIG=/etc/xlf.cfg:xlf,NULL) 
exec: /usr/lpp/xlf/bin/xlfentry(/usr/lpp/xlf/bin/xlfentry,conftest.f,/tmp/F8913542SpYiyb,/tmp/F8913542SpYiybF.lst,xlfsmsg.cat,xlfmsg.cat,conftest.f,OSVAR(aix.5.3),64(largetype),NOZEROSIZE,SAVE,ALIAS(intptr),POSITION(appendold),XLF90(noautodealloc,nosignedzero),XLF77(intarg,intxor,persistent,noleadzero,gedit77,noblankpad,oldboz,softeof),64,OPT(2),WSTREAMS(/tmp/F8913542SpYiyah1,/tmp/F8913542SpYiyab1,/tmp/F8913542SpYiyas1),DEFMSG(/usr/lpp/xlf/bin/default_msg),-I/usr/lpp/xlf/include,NULL) 
** main   === End of Compilation 1 ===
exec: export(export,XL_FRONTEND=/usr/lpp/xlf/bin/xlfentry,NULL) 
exec: export(export,XL_ASTI=/usr/lpp/xlf/bin/xlfhot,NULL) 
exec: export(export,XL_BACKEND=/usr/lpp/xlf/bin/xlfcode,NULL) 
exec: export(export,XL_LINKER=/bin/ld,NULL) 
exec: export(export,XL_DIS=/usr/lpp/xlf/bin/dis,NULL) 
exec: export(export,XL_BOLT=/usr/lpp/xlf/bin/bolt,NULL) 
exec: /usr/lpp/xlf/bin/xlfhot(/usr/lpp/xlf/bin/xlfhot,/tmp/F8913542SpYiyah1,/tmp/F8913542SpYiyah2,/tmp/F8913542SpYiyab1,/tmp/F8913542SpYiyab2,/tmp/F8913542SpYiyas1,/tmp/F8913542SpYiyas2,/tmp/F8913542SpYiyb,/tmp/F8913542SpYiybA.lst,NULL) 
exec: export(export,XL_FRONTEND=/usr/lpp/xlf/bin/xlfentry,NULL) 
exec: export(export,XL_ASTI=/usr/lpp/xlf/bin/xlfhot,NULL) 
exec: export(export,XL_BACKEND=/usr/lpp/xlf/bin/xlfcode,NULL) 
exec: export(export,XL_LINKER=/bin/ld,NULL) 
exec: export(export,XL_DIS=/usr/lpp/xlf/bin/dis,NULL) 
exec: export(export,XL_BOLT=/usr/lpp/xlf/bin/bolt,NULL) 
exec: /usr/lpp/xlf/bin/xlfcode(/usr/lpp/xlf/bin/xlfcode,/tmp/F8913542SpYiyah2,/tmp/F8913542SpYiyab2,conftest.o,/tmp/F8913542SpYiybB.lst,/tmp/F8913542SpYiyas2,NULL) 
1501-510  Compilation successful for file conftest.f.
exec: /bin/ld(/bin/ld,-b64,/lib/crt0_64.o,-bpT:0x100000000,-bpD:0x110000000,-bh:4,-o,conftest,conftest.o,-lxlf90,-L/usr/lpp/xlf/lib,-lxlopt,-lxlf,-lxlomp_ser,-lm,-lc,NULL) 
unlink: conftest.o
configure:7433: result:  -lxlf90 -L/usr/lpp/xlf/lib -lxlopt -lxlf -lxlomp_ser -lm
configure:7449: checking whether xlf accepts the FLIBS found by autoconf
configure:7461: xlf -o conftest -q64 -O2  conftest.f  >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:7464: $? = 0
configure:7472: result: yes
configure:7510: checking whether C can link with  -lxlf90 -L/usr/lpp/xlf/lib -lxlopt -lxlf -lxlomp_ser -lm
configure:7536: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c   -lxlf90 -L/usr/lpp/xlf/lib -lxlopt -lxlf -lxlomp_ser -lm >&5
configure:7543: $? = 0
configure:7563: result: yes
configure:7667: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:7674: $? = 0
configure:7692: checking for linker for Fortran main programs
configure:7702: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:7705: $? = 0
configure:7724: xlf -c -q64 -O2 conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:7727: $? = 0
configure:7735: result: Use Fortran to link programs
configure:7759: checking whether Fortran 77 and C objects are compatible
configure:7789: xlc -c -q64 -O2 conftestc.c 1>&5
configure:7792: $? = 0
configure:7811: xlf -c -q64 -O2 conftestf.f 1>&5
** test   === End of Compilation 1 ===
1501-510  Compilation successful for file conftestf.f.
configure:7814: $? = 0
configure:7825: xlf -q64 -O2 -o conftest conftestf.o conftestc.o  >&5
configure:7828: $? = 0
configure:7830: result: yes
configure:7908: checking for Fortran 77 name mangling
configure:7935: xlf -c -q64 -O2 conftest.f 1>&5
** my_name   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:7938: $? = 0
configure:7976: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c fconftestf.o  -lxlf90 -L/usr/lpp/xlf/lib -lxlopt -lxlf -lxlomp_ser -lm  >&5
configure:7983: $? = 0
configure:8716: result: lower
configure:8809: checking what libraries are needed to link Fortran programs with C routines that use stdio
configure:8830: xlc -c -q64 -O2 conftestc.c 1>&5
configure:8833: $? = 0
configure:8842: xlf -q64 -O2 -o conftest conftest.f conftestc.o 1>&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:8845: $? = 0
configure:8870: result: none
configure:8929: checking whether Fortran init will work with C
configure:8968: xlf -c -q64 -O2 conftestf.f 1>&5
** minit   === End of Compilation 1 ===
1501-510  Compilation successful for file conftestf.f.
configure:8971: $? = 0
configure:8978: xlc -c -q64 -O2 conftestc.c 1>&5
configure:8981: $? = 0
configure:8990: xlc -q64 -O2 -o conftest conftestc.o conftestf.o  >conftest.out 2>&1
configure:8993: $? = 8
configure:8999: result: no
configure:9127: checking that f works as the extension for Fortran 90 program
configure:9133: xlf90 -c -q64 conftest.f >&5
** conftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:9136: $? = 0
configure:9138: result: yes
configure:9190: checking for Fortran 90 compiler version
configure:9193: xlf90 --version </dev/null >&5
xlf90: 1501-216 command option --version is not recognized - passed to ld



  xlf(1)                 IBM (October 2005)                  xlf(1)



  NAME
         xlf, xlf90, xlf95, xlf_r, xlf90_r, xlf95_r, f90, f95,
         xlf_r7, xlf90_r7, xlf95_r7, f77, fort77 - invoke the IBM
         XL Fortran compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

  DESCRIPTION
         xlf and related invocation commands compile Fortran source
         files.  They also process assembler source files and
         object files. Unless you specify the -c option, these
         commands call the link editor to produce a single object
         file.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/xlf.cfg).  For more information,
         refer to the XL Fortran Enterprise Edition Compiler
         Reference.

         The input file may have any of the following suffixes:
          .f - Fortran source file
          .f77 or .F77 - Fortran source file (fixed form) using
               f77 stanza configuration
          .f90 or .F90 - Fortran source file (free form) using
               xlf90 configuration
          .f95 or .F95 - Fortran source file (free form) using
               xlf95 configuration
          .o or .a - object file for ld command
          .s - assembler source file
          .F - Fortran source file with cpp preprocessor directives

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -I<dir>
                Adds a directory to the search path for include
                files and .mod files. If XL Fortran calls cpp, this
                option adds a directory to the search path for
                #include files. Before checking the default
                directories for include and .mod files, the
                compiler checks each directory in the search path.
                For include files, this path is only used if the
                file name in an INCLUDE line is not provided with
                an absolute path. By default, the following
                directories are searched in the following order:

                1) The current directory (where the compiler is
                executed)
                2) The directory where the source file is located

         -k     Specifies that the program is in free source form.
                This is the short form of -qfree=f90.

         -U     Makes the compiler case-sensitive to identifier
                names. By default the compiler interprets all names
                as if they were lower-case.

         -qci=<nums_list>
                Activates the specified INCLUDE lines. <nums_list>
                is a colon-separated list of identification numbers
                (from 1 to 255) of conditional includes.

         -qcr | -qnocr
                Allows you to control how the compiler interprets
                the CR (carriage return) character.  This allows
                you to compile code written using a MAC OS X or
                DOS/Windows editor.  The default is -qcr.

         -qdirective[=<list>] | -qnodirective[=<list>]
                Specifies target strings to be recognized in a
                comment directive. <list> is a colon-separated list
                of directives. If -qdirective is specified without
                any directives, it turns on the default trigger
                constant IBM* if it has been turned off by a
                previous -qnodirective.  The default is
                -qnodirective.

         -qdlines | -qnodlines
                This is the long form of the -D option. See -D for
                more information.  The default is -qnodlines.

         -qfixed[=<right_margin>]
                Indicates that the input source program is in fixed
                source form and optionally specifies the maximum
                line length, <right_margin>. The maximum
                <right_margin> value is 132.  The default is
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77
                invocation commands, and -qfree=f90 for f90, f95,
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, and
                xlf95_r7.

         -qfree[={f90|ibm}]
                Indicates that the source code is in free source
                form. The 'ibm' and 'f90' suboptions specify
                compatibility with the free source form defined for
                VS Fortran and Fortran 90, respectively. Note that
                the free source form defined for Fortran 90 also
                applies to Fortran 95.  The default is -qfree=f90
                for f90, f95, xlf90, xlf90_r, xlf90_r7, xlf95,
                xlf95_r, and xlf95_r7 invocation commands, and
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77.

         -qmbcs | -qnombcs
                Indicates to the compiler whether character literal
                constants, Hollerith constants, H edit descriptors,
                and character string edit descriptors can contain
                Multibyte Character Set (MBCS) or Unicode
                characters. The default is -qnombcs.

         -qmixed | -qnomixed
                The long form of the -U option. Makes the compiler
                case-sensitive to identifier names. The default is
                -qnomixed.

         -qsuffix=<option>=<suffix>
                Specifies the source file suffix, <suffix>, on the
                command line instead of in the .cfg file, where
                <option> can be:

                f
                     Specifies that <suffix> is the new source file
                     suffix.
                o
                     Specifies that <suffix> is the new object-file
                     suffix.
                s
                     Specifies that <suffix> is the new assembler
                     source file suffix.
                cpp
                     Specifies that <suffix> is the new
                     preprocessor source file suffix.

  Output Control Options
         -c     Produces an object file instead of an executable
                file.  Prevents the completed object file from
                being sent to the ld command for link-editing. With
                this option, the output is a .o file for each
                source file.

         -d     Causes preprocessed source files that are produced
                by cpp to be kept rather than to be deleted. By
                default temporary files produced by cpp are
                deleted.

         -o <name>
                Specifies a name for the output object, executable,
                or assembler source file.  The default name is
                a.out for executable files. The default name for an
                object source file is the same as the source file
                except that it has a '.o' extension.

         -q32   Selects 32-bit mode compilation mode. The -q32 and
                -qarch options determine the target machines that
                the 32-bit executable will run on. The default is
                -q32.

         -q64[=<suboption>]
                Selects 64-bit compilation mode. The -q64 option
                indicates that the object module will be created in
                64-bit object format and that the 64-bit
                instruction set will be generated. Note that you
                may compile in a 32-bit environment to create 64-
                bit objects, but you must link them in a 64-bit
                environment with the -q64 option. Use -q32 and -q64
                options, along with the -qarch and -qtune compiler
                options, to optimize the output of the compiler to
                the architecture on which that output will be used.
                The suboptions are:

                largetype
                     The object file will use the 64-bit Large Data
                     Type (LDT) ABI. This object file may only be
                     used on versions of AIX greater than or equal
                     to 5.0.

         -qmoddir=<directory>
                Specifies the location for any .mod files that the
                compiler writes. By default .mod files are placed
                in the current directory.

         -qpic[=<suboption>] | -qnopic
                Generates Position Independent Code (PIC) that can
                be used in shared libraries.  The suboptions are:

                large
                     Allows the size of the Table of Contents to be
                     larger than 64K. This suboption allows for
                     more addresses to be stored in the Table of
                     Contents and generates larger code.
                small
                     Assumes that the size of the Table of Contents
                     can be at most 64K.

                The default is -qpic=small.

  Optimization Options
         -NS<bytes>
                Specifies the size (in bytes) of the register spill
                space; the internal program storage areas used by
                the optimizer for register spills to storage.  The
                default is -NS512.

         -O[<level>]
                Specifies whether to optimize code during
                compilation and, if so, at which level. -O<level>
                is equivalent to -qoptimize=<level>. <level> can
                be:

                (not specified)
                     This is equivalent to -O2.
                0
                     Almost all optimizations are disabled. This is
                     equivalent to -qnooptimize.
                1
                     Reserved for future use. Ignored by compiler.
                2
                     Performs a set of optimizations that are
                     intended to offer improved performance without
                     an unreasonable increase in time or storage
                     that is required for compilation.
                3
                     Performs additional optimizations that are
                     memory intensive, compile-time intensive, and
                     may change the semantics of the program
                     slightly, unless -qstrict is specified. We
                     recommend these optimizations when the desire
                     for run-time speed improvements outweighs the
                     concern for limiting compile-time resources.
                     This level of optimization also affects the
                     setting of the -qfloat option, turning on the
                     'fltint' and 'rsqrt' suboptions by default,
                     and setting -qmaxmem=-1.  This option implies
                     -qhot=level=0.
                4
                     Aggressively optimizes the source program,
                     trading off additional compile time for
                     potential improvements in the generated code.
                     You can specify the option at compile time or
                     at link time. if you specify it at link time,
                     it will have no effect unless you also specify
                     it at compile time for at least the file that
                     contains the main program. -O4 implies the
                     following other options:
                     -qhot
                     -qipa
                     -O3
                     -qarch=auto
                     -qtune=auto
                     -qcache=auto
                5
                     Performs all optimizations from -O4, and also
                     sets -qipa=level=2 to perform full inter-
                     procedural data flow and alias analysis.

                -O4 and -O5 perform whole-program analysis and
                should be specified at both compilation and link
                time to have maximal effect.  The default is -O0.

         -p[g]  Sets up the object file for profiling. Specifying
                '-pg' will produce more extensive statistics. The
                default is no profiling.

         -Q[<suboption>]
                Specifies whether Fortran 90 or Fortran 95
                procedures are inlined and/or the names of
                particular procedures that should or should not be
                inlined. names is a list of procedure names that
                are separated by colons. This option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions,
                     subject to limits on the number of inlined
                     calls and the amount of code size increase as
                     a result.
                -Q!
                     Turns off inlining.
                -Q+<names_list>
                     Inlines the functions listed in <names_list>
                     and any other appropriate functions, where
                     <names_list> is a colon-separated list.
                -Q-<names_list>
                     Does not inline functions listed in
                     <names_list>, where <names_list> is a colon-
                     separated list. All other appropriate
                     functions are inlined.

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qalias=<suboptions_list>
                Indicates whether a program contains certain
                categories of aliasing. The compiler limits the
                scope of some optimizations when there is a
                possibility that different names are aliases for
                the same storage locations. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                aryovrlp | noaryovrlp
                     Indicates whether the compilation units
                     contain any array assignments between
                     storage-associated arrays. If not, specify
                     noaryovrlp to improve performance.
                intptr | nointptr
                     Indicates whether the compilation units
                     contain any integer POINTER statements. If so,
                     specify intptr.
                pteovrlp | nopteovrlp
                     Indicates whether any pointee variables may be
                     used to refer to any data objects that are not
                     pointee variables, or whether two pointee
                     variables may be used to refer to the same
                     storage location. If not, specify nopteovrlp.
                std | nostd
                     Indicates whether the compilation units
                     contain any non-standard aliasing (see
                     Compiler Reference for more information). If
                     so, specify nostd.  (-qalias=nostd replaces
                     the obsolete -qxflag=xalias option.)

                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90 and f95 commands, the default
                suboptions are: aryovrlp, nointptr, pteovrlp, and
                std. For the xlf, xlf_r, xlf_r7, f77, and fort77
                commands, the default suboptions are: aryovrlp,
                intptr, pteovrlp, and std.

         -qalign=<suboptions_list>
                Specifies the alignment of data objects in storage
                to avoid performance problems with misaligned data.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                4k | no4k
                     Specifies whether large arrays and structures
                     (at least 4096 bytes in size) will be aligned
                     on a 4K (4096-byte, or page) boundary.  Use of
                     this option may help to improve the
                     performance of programs using data striping.
                bindc=<suboption>
                     Specifies that the alignment and padding for
                     an XL Fortran derived type with the BIND(C)
                     attribute are compatible with a C struct type
                     that is compiled with the corresponding XL C
                     alignment option. The compatible alignment
                     options are:
                     -qalign=bindc=bit_packed
                     -qalign=bindc={full|power}
                     -qalign=bindc=packed
                     -qalign=bindc={twobyte|mac68k}
                     -qalign=bindc=natural
                     Each of these "-qalign=bindc=" sub-suboptions
                     is equivalent to the XL C "-qalign=" suboption
                     of the same name.  (ie: For
                     -qalign=bindc=bit_packed, the corresponding XL
                     C option is -qalign=bit_packed)
                struct=<option>
                     Specifies how objects or arrays of a derived
                     type (declared using a record structure) are
                     stored, and whether or not padding is used
                     between components. The options are:
                     natural
                          Objects of a derived type are stored with
                          sufficient padding such that components
                          will be stored on their natural alignment
                          boundaries, unless storage association
                          requires otherwise.
                     packed
                          Objects of a derived type are stored with
                          no padding between components, other than
                          any padding represented by %FILL
                          components.
                     port
                          Storage padding is the same as described
                          above for the struct=natural suboption,
                          except that the alignment of components
                          of type complex is the same as the
                          alignment of components of type real of
                          the same kind. The padding for an object
                          that is immediately followed by a union
                          is inserted at the beginning of the first
                          map component for each map in that union.

                The default activated suboptions are: no4k,
                struct=natural, and bindc=power.

         -qarch=<suboption>
                Specifies which instructions the compiler can
                generate.  The suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                com
                     You can run the executable file that the
                     compiler generated on any hardware platform
                     supported by the compiler, because the file
                     contains only instructions that are common to
                     all machines.
                p2sc
                     The executable file can be executed on any
                     POWER2 Super Chip hardware platform.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms. Using -q64 with ppc upgrades the
                     architecture to ppc64grsq.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.  In 64-bit mode,
                     produces object code containing optional
                     graphics instructions that will run on 64-bit
                     PowerPC platforms, but not on 32-bit-only
                     platforms.  Using -q64 with ppcgr upgrades the
                     architecture to ppc64grsq.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                pwr
                     Produces an object that contains instructions
                     that run on any of the POWER or POWER2
                     hardware platforms.
                pwr2s
                     The executable file can be executed on any
                     desktop implementation of the POWER2 chip.
                pwr2
                     Produces an object that contains instructions
                     that run on the POWER2 hardware platforms.
                pwrx
                     Equivalent to pwr2.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3, POWER4, POWER5,
                     POWER5+ or PowerPC 970 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4, POWER5, POWER5+ or
                     PowerPC 970 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 or POWER5+ hardware
                     platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on any POWER5+ hardware platform.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.
                601
                     Produces an object that contains instructions
                     that run on PowerPC 601 systems.
                603
                     Produces an object that contains instructions
                     that run on PowerPC 603 systems.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                ppc64v
                     Generates instructions for any 64-bit PowerPC
                     processor (like PowerPC 970) with VMX.

                The default is -qarch=com.

         -qassert=<suboptions_list>
                Provides information about the program to help
                fine-tune optimizations. <suboptions_list> is a
                colon-separated list of one or both of the
                following suboptions:

                deps | nodeps
                     Loops can contain loop-carried dependencies.
                itercnt=<n>
                     The iteration count of a typical loop is <n>.

                The default is -qassert=deps:itercnt=1024.

         -qcache=<suboptions_list>
                Specifies the cache configuration for a specific
                execution machine. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                assoc=<n>
                     Specifies the set-associativity of the cache:
                     0   = Directly-mapped
                     1   = Fully associative
                     (n > 1) = <n>-way set-associative
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty resulting
                     from a cache miss.
                level=<level>
                     Specifies which level of cache is affected:
                     1 = Basic cache
                     2 = Level-2 cache, or the table lookaside
                     buffer (TLB) if the machine has no level-2
                     cache
                     3 = TLB, in a machine that does have a level-2
                     cache
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<type>
                     Specifies the type of cache that the settings
                     apply to:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The default is determined by the -qtune and -qarch
                settings.

         -qcompact | -qnocompact
                Reduces optimizations that increase code size.  The
                default is -qnocompact.

         -qdirectstorage | -qnodirectstorage
                Specifies that a compilation unit might reference
                write-through-enabled or cache-inhibited storage.
                The default is -qnodirectstorage.

         -qenablevmx | -qnoenablevmx
                Enables generation of Vector Multimedia Extension
                (VMX) instructions.  The default is -qnoenablevmx.

         -qessl | -qnoessl
                Allows the use of the Engineering and Scientific
                Subroutine Library (ESSL) routines in place of
                Fortran 90 intrinsic procedures.  The default is
                -qnoessl.

         -qfdpr | -qnofdpr
                Provides object files with information that the AIX
                Feedback Directed Program Restructuring (fdpr)
                performance-tuning utility needs to optimize the
                resulting executable file.  The default is
                -qnofdpr.

         -qhot[=<suboptions>] | -qnohot
                Performs high-order loop analysis and
                transformations during optimization. This option is
                a powerful alternative to hand-tuning that provides
                opportunities to optimize loops and array language.
                The suboptions are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value. When <n> is not
                     specified, the compiler will pad any arrays
                     where it infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. See the XL Fortran
                     Compiler Reference for more information.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a VMX (Vector Multimedia Extension)
                     instruction.  If you specify -qhot=nosimd, the
                     compiler performs optimizations on loops and
                     arrays, but avoids replacing certain code with
                     VMX instructions.
                vector | novector
                     Specifies whether to allow the compiler to
                     optimize by replacing code with calls to
                     vector library routines.  Only takes effect
                     when specified with -qnostrict or -O3 or
                     higher optimization level.

                The default is -qnohot. If -qhot is specified
                without parameters, the default is -qhot=vector.

         -qipa[=<suboptions_list>] | -qnoipa
                Enhances -O optimization by performing detailed
                analysis across procedures. Optimization level -O2
                or higher is required when using -qipa.
                <suboptions_list> is a colon-separated list of
                suboptions. Regular expressions are supported when
                specifying <procedure_names_list> in the following
                -qipa suboptions: exits, inline, noinline, lowfreq,
                pure, safe, and unknown. <procedure_names_list> is
                a comma-separated list. The suboptions are:

                exits=<procedure_names_list>
                     Specifies a selected set of procedures which
                     always end the program.
                clonearch=<architecture_list> | noclonearch
                     Allows you to specify multiple architectures
                     in the event that you want to compile your
                     application for multiple architectures with a
                     single binary file. <architecture_list> is a
                     comma-separated list of one or more of the
                     following architectures: pwr4, pwr5, ppc970,
                     and pwr5x. This must be specified during link
                     time.  The default is noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of the mangled names of the functions that you
                     wish to clone (or not clone). Please note that
                     this suboption has no effect unless
                     -qipa=clonearch=<arch> is specified. You can
                     use regular expression syntax when specifying
                     function names.  The default is nocloneproc.
                inline=<options_list>
                     Specifies a colon-separated list of inline
                     options, which are as follows:
                     auto | noauto
                          Specifies whether to automatically
                          perform inline expansion.  The default is
                          auto.
                     limit=<n>
                          Changes the size limits that the
                          inline=auto option uses to determine how
                          much inline expansion to do. <n> is the
                          optimizers approximation of the number of
                          bytes of code that will be generated.
                     <procedure_names_list>
                          Specifies the procedures to attempt to
                          inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This argument is
                          implemented only when inline=auto is on.
                noinline=<procedure_names_list>
                     Specifies the procedures which are not to be
                     inlined.
                isolated=<procedure_names_list>
                     Specifies the procedures that are not compiled
                     with -qipa and do not directly refer to any
                     global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization to perform:
                     0
                          Performs minimal inter-procedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full inter-procedural data flow and alias
                          analysis.
                     The default level is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, in the event that an object
                     listing has been requested using the -qlist or
                     -qipa=list option. The default name is
                     "a.lst". Specifying 'long' or 'short'
                     determines which listing sections will be
                     included. The default is short.
                lowfreq=<procedure_names_list>
                     Specifies the procedures that are likely to be
                     called infrequently during the course of a
                     typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the interprocedural behavior for
                     procedures not compiled with -qipa.  The
                     default is 'unknown'.
                object | noobject
                     Includes standard object code in the object
                     files. If the noobject option is specified, it
                     can substantially reduce overall compilation
                     time by not generating object code during the
                     first IPA phase. The default is object. Note,
                     this is a compile-time suboption.
                partition={small|medium|large}
                     Specifies the size of the regions within the
                     program to analyze. Larger partitions contain
                     more procedures, which result in better
                     interprocedural analysis but require more
                     storage to optimize.  The default is medium.
                pdfname=<filename>
                     Specifies the name of the profile data file
                     that contains the PDF profiling information.
                     The default filename is __pdf.
                pure=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "pure" must be "isolated" and
                     "safe". It must not alter the internal state
                     nor have side-effects, which are defined as
                     potentially altering any data object visible
                     to the caller.
                safe=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "safe" may modify global
                     variables and dummy arguments.
                stdexits | nostdexits
                     Specifies that certain predefined routines can
                     be optimized as with the exits suboption. The
                     procedures are abort, exit, _exit, and
                     _assert.  The default is nostdexits.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure specified
                     as "unknown" may make calls to other parts of
                     the program compiled with -qipa and modify
                     global variables and dummy arguments.

                Options intended for use by the link-time phase of
                -qipa are -qlibansi, -qlibessl, -qlibposix and
                -qthreaded.  The default is -qnoipa.

         -qkeepparm | -qnokeepparm
                Ensures that the incoming parameters are stored on
                the stack even when optimizing. This may negatively
                impact execution performance. This option then
                provides access to the values of incoming
                parameters to tools, such as debuggers, simply by
                preserving those values on the stack.  The default
                is -qnokeepparm.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large 16 MB pages provided on POWER4 and higher
                based systems.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are in fact the library
                functions.  The default is -qnolibansi.

         -qlibessl | -qnolibessl
                Assumes that all functions with the name of an ESSL
                defined library function are, in fact, the library
                functions.  The default is -qnolibessl.

         -qlibposix | -qnolibposix
                Assumes that all functions with the name of a POSIX
                1003.1 defined library function are, in fact, the
                system functions.  The default is -qnolibposix.

         -qmaxmem=<kbytes>
                Limits the amount of memory that the compiler
                allocates while performing specific, memory-
                intensive optimizations. If <kbytes> is -1, the
                compiler will take as much memory as it needs
                without checking for limits. The default is
                -qmaxmem=2048 when using optimization level -O2,
                and -qmaxmem=-1 when using -O3 or greater.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 Produces an object that is instrumented to collect
                run-time execution information. This is phase 1 of
                the profile-directed feedback optimization process.

         -qpdf2 Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

         -qprefetch | -qnoprefetch
                Automatically inserts prefetch instructions where
                the optimizer perceives a benefit.  The default is
                -qprefetch.

         -qrecur | -qnorecur
                Not recommended. Allows external subprograms to be
                called recursively. For new programs, use the
                RECURSIVE keyword, which provides a standard-
                conforming way of using recursive procedures.  The
                default is -qnorecur.

         -qshowpdf | -qnoshowpdf
                Adds additional call and block count profiling
                information to an executable. This option is used
                together with the -qpdf1 option.  The default is
                -qnoshowpdf.

         -qsmallstack[=<suboption>] | -qnosmallstack
                Specifies that the compiler will minimize stack
                usage where possible. This option can take the
                form:

                -qsmallstack
                     Enables only general small stack
                     transformations.
                -qsmallstack=dynlenonheap
                     Asserts that automatic variables which are
                     dynamically-sized are allocated from the heap
                     and enables general small stack
                     transformations.
                -qsmallstack=nodynlenonheap
                     Disables dynamic-length variable allocation.
                -qnosmallstack
                     Disables only the general small stack
                     transformations.

                The default is -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Specifies that code should be produced for an SMP
                system.  <suboptions_list> is a colon-separated
                list of one or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization.
                nested_par | nonested_par
                     Specifies that prescriptive nested parallel
                     constructs should be parallelized by the
                     compiler.
                omp | noomp
                     Enforces compliance with the OpenMP Fortran
                     API.
                opt | noopt
                     Controls optimization for parallelization.
                     -qsmp=noopt specifies that the compiler should
                     do the least amount of optimization that is
                     required to parallelize the code and preserve
                     maximum debugability.
                rec_locks | norec_locks
                     Allows recursive locks to be used to avoid
                     problems associated with CRITICAL constructs.
                     If -qsmp=norec_locks is specified, recursive
                     locks will not be used to implement critical
                     sections.
                schedule=<suboptions>
                     The schedule suboption can take any of the
                     following sub-suboptions:
                     affinity[=<n>]
                     dynamic[=<n>]
                     guided[=<n>]
                     runtime
                     static[=<n>]
                     For their descriptions, refer to the XL
                     Fortran Compiler Reference.
                threshold=<n>
                     Controls the amount of automatic loop
                     parallelization that occurs. The value of <n>
                     represents the lower limit allowed for
                     parallelization of a loop, based on the level
                     of "work" present in a loop.

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, opt, noomp, norec_locks, nonested_par,
                schedule=runtime, and threshold=100.

         -qspillsize=<bytes>
                The long form of -NS. See the -NS option.  The
                default is -qspillsize=512.

         -qstacktemp=<num>
                Determines where to allocate applicable compiler
                temporaries at run time. The allocation depends on
                the value of <num>. The values are:

                0
                     Indicates that the compiler will decide
                     whether to allocate the applicable compiler
                     temporaries on the heap or the stack.
                -1
                     Indicates that applicable compiler temporaries
                     are to be always allocated on the stack. This
                     is the best-performing setting but uses the
                     most amount of stack storage.
                (1 or greater)
                     Indicates that applicable compiler temporaries
                     less than this value (bytes) should be
                     allocated on the stack and those greater than
                     or equal to this value should be allocated on
                     the heap.

                The default is -qstacktemp=0.

         -qstrict | -qnostrict
                Ensures that optimizations done by the -O3 and
                greater (and optionally -O2) options do not alter
                the semantics of a program. This option is ignored
                for -qnoopt.  For -O3 and greater, the default is
                -qnostrict. Otherwise the default is -qstrict.

         -qstrict_induction | -qnostrict_induction
                Prevents the compiler from performing induction
                (loop counter) variable optimizations that could
                alter the semantics of a program.  The default is
                -qnostrict_induction.

         -qthreaded
                Asserts that the compiler will generate thread-safe
                code when generating its own code or allocating
                compiler-created temporary data. User-written code
                that is algorithmically not thread-safe is
                unaffected by this option and will remain non-
                thread-safe. The default is -qthreaded when using
                xlf_r, xlf_r7, xlf90_r, xlf90_r7, xlf95_r, or
                xlf95_r7 invocation commands.

         -qtune=<suboption>
                Tunes instruction selection, scheduling, and other
                implementation-dependent performance enhancements
                for a specific implementation of a hardware
                architecture.  -qtune will not alter the ability of
                a program to run on a processor but will produce
                optimal code sequences tuned to a particular
                processor.  The suboptions are:

                auto
                     Automatically detects the specific processor
                     type of the compiling machine and produces an
                     object optimized for that processor.
                601
                     Produces an object optimized for all the
                     PowerPC 601 processors.
                603
                     Produces an object optimized for all the
                     PowerPC 603 processors.
                604
                     Produces an object optimized for all the
                     PowerPC 604 processors.
                pwr
                     Produces an object optimized for the POWER
                     hardware platforms.
                p2sc
                     The optimizations are tuned for the POWER2
                     Super Chip.
                pwr2
                     Produces an object optimized for the POWER2
                     hardware platforms.
                pwrx
                     This is equivalent to pwr2.
                pwr2s
                     The optimizations are tuned for the desktop
                     implementation of the POWER2 architecture,
                     which has a narrower processor-to-memory bus
                     than other POWER2 implementations.
                pwr3
                     Produces an object optimized for the POWER3
                     hardware platforms.
                pwr4
                     Produces an object optimized for the POWER4
                     hardware platforms.
                pwr5
                     Produces an object optimized for the POWER5
                     hardware platforms.
                rs64a
                     Produces an object optimized for the RS64I
                     processor.
                rs64b
                     Produces an object optimized for the RS64II
                     processor.
                rs64c
                     Produces an object optimized for the RS64III
                     processor.
                ppc970
                     Produces an object optimized for PowerPC 970
                     processors.

                The compiler uses -qtune setting that is compatible
                with the target architecture, which is controlled
                by the -qarch, -q32, and -q64 options.  The default
                setting is determined by the setting of -qarch.

         -qunroll[={auto|yes}] | -qnounroll
                Specifies whether unrolling DO loops is allowed in
                a program. Unrolling is allowed on outer and inner
                DO loops.  The suboptions are:

                auto
                     The compiler performs basic loop unrolling.
                yes
                     The compiler looks for more opportunities to
                     perform loop unrolling than is done with the
                     -qunroll=auto option. Specifying -qunroll with
                     no suboptions is equivalent to -qunroll=yes.

                The default is -qunroll=auto.

         -qunwind | -qnounwind
                Specifies that the compiler will preserve the
                default behavior for saves and restores to volatile
                registers during a procedure call.  If you specify
                -qnounwind, the compiler rearranges subprograms to
                minimize saves and restores to volatile registers.
                This rearrangement may make it impossible for the
                program or debuggers to walk through or "unwind"
                subprogram stack frame chains.  The default is
                -qunwind.

         -qvecnvol | -qnovecnvol
                Asserts that the compiled application will use both
                volatile and non-volatile vector registers. You
                should use this option only after understanding
                interoperability with old binaries. If you are
                compiling C/C++ code in Fortran which calls any of
                the following subroutines: setjmp(),longjmp(),
                sigsetjmp(), siglongjmp(), _setjmp(), _longjmp(),
                getcontext(), setcontext(), makecontext(), and
                swapcontext(), then you should set -qnovecnvol.
                bos.adt.include version 5.3.0.30 or greater should
                be installed to use -qvecnvol on the host system.
                The default is -qnovecnvol.

         -qzerosize | -qnozerosize
                Improves performance of Fortran 77 and some Fortran
                90 and Fortran 95 programs by preventing checking
                for zero-sized character strings and arrays.
                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90, and f95 commands, the default is
                -qzerosize.  For the xlf, xlf_r, xlf_r7, f77, and
                fort77 commands, the default is -qnozerosize.

  Error Checking and Debugging Options
         -C     Checks each reference to an array element, array
                section, or character substring for correctness.
                This is the short form of -qcheck.

         -D     Specifies whether the compiler compiles fixed
                source form lines with a D in column 1 or treats
                them as comments. Please note that in order to pass
                C-style -D macro definitions to the C preprocessor
                (e.g. compiling a file that ends with .F) use the
                -W option. For example:
                -WF,-DDEFINE_THIS
                -D is the short form of -qdlines.

         -g     Generates debug information for use by a symbolic
                debugger.

         -qcheck | -qnocheck
                The long form of the -C option. See -C for details.
                The default is -qnocheck.

         -qdbg | -qnodbg
                The long form of the -g option. See -g for details.
                The default is -qnodbg.

         -qdpcl | -qnodpcl
                Generates symbols that tools based on the Dynamic
                Probe Class Library (DPCL) API can use to see the
                structure of an executable file. You must also
                specify the -g option when you specify -qdpcl.
                This option has no effect when optimization (-O) is
                enabled. The default is -qnodpcl.

         -qextchk | -qnoextchk
                Sets up type-checking information for common
                blocks, procedure definitions, procedure
                references, and module data. Later, the linker can
                detect mismatches across compilation units using
                this information.  The default is -qnoextchk.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Determines what types of floating-point exception
                conditions to detect at run time. The program
                receives a SIGTRAP signal when the corresponding
                exception occurs.  <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                enable
                     Turn on checking for the specified exceptions
                     in the main program so that the exceptions
                     generate SIGTRAP signals.
                imprecise
                     Only check for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detect and trap on floating-point inexact, if
                     exception checking is enabled.
                invalid
                     Detect and trap on floating-point invalid
                     operations.
                nanq
                     Detect and trap all quiet not-a-number (NaNQ)
                     values and signaling not-a-number (NaNS)
                     values.
                overflow
                     Detect and trap on floating-point overflow.
                underflow
                     Detect and trap on floating-point underflow.
                zerodivide
                     Detect and trap on floating-point division by
                     zero.

                The default is -qnoflttrap. When -qflttrap is
                specified with no suboptions, the default activated
                suboptions are: overflow, underflow, zerodivide,
                invalid, and inexact.

         -qfullpath | -qnofullpath
                Records the full (or absolute) path names of source
                and include files in object files compiled with
                debugging information (-g option).  The default is
                -qnofullpath.

         -qhalt=<sev>
                Stops before producing any object, executable, or
                assembler source files if the maximum severity of
                compile-time messages equals or exceeds the
                specified severity <sev>, where the severity levels
                are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                The default is -qhalt=s.

         -qinitauto[=<hex_value>] | -qnoinitauto
                Initializes each byte or word (4 bytes) of storage
                for automatic variables to a specific value,
                depending on the length specified in <hex_value>.
                This helps you to locate variables that are
                referenced before they are defined. <hex_value> is
                a 1 to 8 digit hexadecimal number.  The default is
                -qnoinitauto. If you specify -qinitauto without a
                <hex_value>, the compiler initializes the value of
                each byte of automatic storage to zero. This option
                should be used for debugging purposes only.

         -qlanglvl=<suboption>
                Determines which language standard (or
                subset/superset of a standard) to check against for
                nonconformance. This option will only produce
                messages; all code valid in extended mode will
                compile regardless of which suboption is specified.
                The suboptions are:

                77std
                     Accepts the language specified by the ANSI
                     Fortran 77 standard.
                90std
                     Accepts the language specified by the ISO
                     Fortran 90 standard.
                90pure
                     Same as 90std, except that it reports errors
                     for any obsolescent Fortran 90 features used.
                90ext
                     Obsolete suboption that is equivalent to
                     extended.
                95std
                     Accepts the language specified by the ISO
                     Fortran 95 standard.
                95pure
                     Same as 95std, except that it also reports
                     errors for any obsolescent Fortran 95 features
                     used.
                2003std
                     Accepts the language that the ISO Fortran 95
                     standard specifies, as well as all Fortran
                     2003 features supported by XL Fortran, and
                     reports anything else as an error.
                2003pure
                     The same as 2003std except that it also
                     reports errors for any obsolescent Fortran
                     2003 features used.
                extended
                     Accepts the full Fortran 95 language standard,
                     all Fortran 2003 features supported by XL
                     Fortran, and all extensions, effectively
                     turning off language-level checking.

                The default is -qlanglvl=extended.

         -qlinedebug | -qnolinedebug
                Generates line number and source file name
                information for the debugger. This option produces
                minimal debugging information, so the resulting
                object size is smaller than what is produced if the
                -g debugging option is specified. The default is
                -qnolinedebug.

         -qobject | -qnoobject
                Specifies whether to produce an object file or to
                stop immediately after checking the syntax of the
                source files.  The default is -qobject.

         -qsaa | -qnosaa
                Checks for conformance to the SAA Fortran language
                definition. It identifies nonconforming source code
                and also options that allow such nonconformances.
                The default is -qnosaa.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, and other information, in the
                corresponding object file. The compilation must
                produce an object file for this option to take
                effect.  The default is -qnosaveopt.

         -qsigtrap[=<trap_handler>]
                When you are compiling a file that contains a main
                program, this option sets up the specified trap
                handler to catch SIGTRAP exceptions. This option
                enables you to install a handler for SIGTRAP
                signals without calling the SIGNAL subprogram in
                the program. Specifying -qsigtrap with no
                <trap_handler> is equivalent to -qsigtrap=xl__trce.

         -qtbtable=<suboption>
                Limits the amount of debugging traceback
                information in object files, which reduces the size
                of the program. The suboptions are:

                none
                     Includes no traceback information.
                small
                     Includes traceback information but not the
                     names of procedures or information about
                     procedure parameters.
                full
                     Includes complete traceback information.

                The default is full traceback information in the
                object file when compiling non-optimized (without
                -O) or for debugging (with -g).  Otherwise, the
                default is -qtbtable=small.

         -qwarn64 | -qnowarn64
                Assists in porting code from a 32-bit environment
                to a 64-bit environment by detecting the truncation
                of an 8-byte integer pointer to 4 bytes. The
                -qwarn64 option uses informational messages to
                identify statements that may cause problems with
                the 32-bit to 64-bit migration.  The default is
                -qnowarn64.

         -qxflag=<suboption>
                Specifies rarely-needed compiler behaviors.  The
                suboptions are:

                oldtab
                     For fixed source form programs, interprets a
                     tab in columns 1 to 5 as a single character.
                     The source statement still starts immediately
                     after the tab, but the tab character is
                     treated as a single character for counting
                     columns. This setting allows up to 71
                     characters of input, depending on where the
                     tab character occurs.
                dvz
                     Specifying -qxflag=dvz causes the compiler to
                     generate code to detect floating-point
                     divide-by-zero operations. With this option
                     on, the extra code calls the external handler
                     function __xl_dzx when the divisor is zero.
                xalias
                     This is obsolete. Please use -qalias=nostd in
                     your new applications.

         -qxlines | -qnoxlines
                Specifies whether fixed source form lines with a X
                in column 1 are compiled or treated as comments.
                The default is -qnoxlines.

  Listing and Message Options
         -#     Generates information on the progress of the
                compilation without actually running the individual
                components.

         -S     Produces one or more .s files, showing equivalent
                assembler source for each Fortran source file.

         -V     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes. This is the
                same as -v except that you can cut and paste
                directly from the display to create a command.

         -v     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes.

         -w     Suppresses informational, language-level, and
                warning messages. This option sets -qflag=e:e.

         -qattr[=full] | -qnoattr
                Specifies whether to produce the attribute
                component of the attribute and cross-reference
                section of the listing.  The listing contains all
                identifiers (-qattr=full) or only the names that
                are referenced (-qattr).  The default is -qnoattr.

         -qflag=<listing_severity>:<terminal_severity>
                Specifies the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> determines
                the minimum level for the listing file, and
                <terminal_severity> determines the minimum level
                for the terminal.  The severity levels are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                Note that both <listing_severity> and
                <terminal_severity> must be specified.  The default
                is -qflag=i:i.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                Specifying -qlist with no suboptions is equivalent
                to specifying -qlist=nooffset.  The default is
                -qnolist.

         -qlistopt | -qnolistopt
                Determines whether to show the setting of every
                compiler option in the listing file or only
                selected options. These selected options include
                those specified on the command line or directives
                plus some that are always put in the listing.  The
                default is -qnolistopt.

         -qnoprint
                Prevents the compiler from creating the listing
                file, regardless of the settings of other listing
                options.

         -qphsinfo | -qnophsinfo
                Determines whether timing information is displayed
                on the terminal for each compiler phase.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qreport[=<suboptions>] | -qnoreport
                Determines whether to produce transformation
                reports showing how the program is parallelized and
                how loops are optimized.  The suboptions are:

                hotlist
                     Produces a report showing how loops are
                     transformed.
                smplist
                     Produces a report showing how the program is
                     parallelized.

                The default is -qnoreport.

         -qsource | -qnosource
                Determines whether to produce the source section of
                the listing.  The default is -qnosource.

         -qsuppress[={<msg_nums_list>|cmpmsg}] | -qnosuppress
                Determines which messages to suppress from the
                output stream.  The suboptions are:

                <msg_nums_list>
                     A colon-separated list of 7-digit compiler
                     message numbers.
                cmpmsg
                     Suppresses the informational messages that
                     report compilation progress and a successful
                     completion.

                The default is -qnosuppress.

         -qversion
                Displays the version and release of the invoking
                compiler. Specify this option on its own with the
                compiler command.

         -qxref[=full] | -qnoxref
                Determines whether to produce the cross-reference
                component of the attribute and cross-reference
                section of the listing.  If you specify only
                -qxref, only identifiers that are used are
                reported. If you specify -qxref=full, the listing
                contains information about all identifiers that
                appear in the program, whether they are used or
                not.  The default is -qnoxref.

  Compatibility Options
         -1     Executes each DO loop in the compiled program at
                least once if its DO statement is executed, even if
                the iteration count is 0. This option provides
                compatibility with Fortran 66. The default is to
                follow the behavior of later Fortran standards,
                where DO loops are not performed if the iteration
                count is 0. This is the short form of the -qonetrip
                option.

         -u     Specifies that no implicit typing of variable names
                is permitted. It has the same effect as using the
                IMPLICIT NONE statement in each scope that allows
                implicit statements. By default, implicit typing is
                allowed.

         -qautodbl=<setting>
                Converts single-precision floating-point
                calculations to double-precision or converts
                double-precision calculations to extended-
                precision.  <setting> can be:

                none
                     Does not promote or pad any objects that share
                     storage.
                dbl4
                     Promotes floating-point objects that are
                     single precision or are composed of such
                     objects.
                dbl8
                     Promotes floating-point objects that are
                     double-precision or are composed of such
                     objects.
                dbl
                     Combines the promotions done by dbl4 and dbl8.
                dblpad4
                     Performs the same promotions as dbl4, and pads
                     objects of other types (except CHARACTER) that
                     can share storage with promoted objects.
                dblpad8
                     Performs the same promotions as dbl8, and also
                     pads objects of other types (except CHARACTER)
                     if they can share storage with promoted
                     objects.
                dblpad
                     Combines the promotions done by dbl4 and dbl8,
                     and also pads objects of other types (except
                     CHARACTER) if they can share storage with
                     promoted objects.

                The default is -qautodbl=none.

         -qcclines | -qnocclines
                Enables recognition of conditional compilation
                lines in fixed source form and F90 free source
                form. IBM free source form is not supported.  The
                default is -qcclines if -qsmp=omp is specified.
                Otherwise, the default is -qnocclines.

         -qctyplss[={arg|noarg}] | -qnoctyplss
                Specifies whether character constant expressions
                are allowed wherever typeless constants may be
                used. Specifying -qctyplss=arg allows character
                constant expressions, but if a Hollerith constant
                is used as an actual argument, it is passed to the
                procedure as if it was an integer actual argument.
                The default is -qnoctyplss. If -qctypless is
                specified with no suboption, the default is
                -qctyplss=noarg.

         -qddim | -qnoddim
                Specifies that the bounds of pointee arrays are
                re-evaluated each time the arrays are referenced
                and removes some restrictions on the bounds
                expressions for pointee arrays.  The default is
                -qnoddim.

         -qdpc[=<e>] | -qnodpc
                Increases the precision of real constants, for
                maximum accuracy, when assigning real constants to
                DOUBLE PRECISION variables. -qdpc=<e> also promotes
                constants with an <e> exponent.  The default is
                -qnodpc.

         -qescape | -qnoescape
                Specifies whether the backslash is treated as an
                escape character in character strings, Hollerith
                constants, H edit descriptors, and character string
                edit descriptors.  The default is -qescape.

         -qextern=<procedure_names_list>
                Allows user-written procedures to be called instead
                of XL Fortran intrinsics. <procedure_names_list> is
                a colon-separated list of procedure names.  The
                procedure names are treated as if they appear in an
                EXTERNAL statement in each compilation unit being
                compiled.

         -qextname[=<names_list>] | -qnoextname
                Adds an underscore to the names of all global
                entities, which helps in porting programs from
                systems where this is a convention for mixed-
                language programs. <names_list> is a colon-
                separated list of global entity names.  The default
                is -qnoextname.

         -qinit=f90ptr
                Makes the initial association status of pointers
                disassociated instead of undefined. The default
                association status of pointers is undefined.

         -qintlog | -qnointlog
                Allows mixture of integer and logical data entities
                in expressions and statements. The default is
                -qnointlog.

         -qintsize={2|4|8}
                Sets the size (in bytes) of default INTEGER and
                LOGICAL data entities (that is, those for which no
                length or kind is specified).  The default is
                -qintsize=4.

         -qlog4 | -qnolog4
                Specifies whether the result of a logical operation
                with logical operands is a LOGICAL(4) or is a
                LOGICAL with the maximum length of the operands.
                The default is -qnolog4.

         -qmodule=mangle81
                Specifies that the compiler should use the XL
                Fortran Version 8.1 naming convention for non-
                intrinsic module files. This option allows you to
                produce modules and their associated object files
                with the Version 10.1 compiler and link these
                object files with others compiled with the Version
                8.1 compiler, or earlier.

         -qnullterm | -qnonullterm
                Appends a null character to each character constant
                expression that is passed as a dummy argument, to
                make it more convenient to pass strings to C
                functions. The default is -qnonullterm.

         -qonetrip | -qnoonetrip
                The long form of the -1 option. See -1 for details.
                The default is -qnoonetrip.

         -qport=<suboption> | -qnoport
                Increases flexibility when porting programs to XL
                Fortran, providing a number of options to
                accommodate Fortran language extensions.  The
                suboptions are:

                clogicals | noclogicals
                     Allows non-zero integers to be treated as true
                     when used as logicals. The change affects all
                     logical operators. This suboption only takes
                     effect if -qintlog is activated.  The default
                     is noclogicals.
                hexint | nohexint
                     Specifies that typeless constant hexadecimal
                     strings are converted to integers when passed
                     as actual arguments to the INT intrinsic
                     function. Typeless constant hexadecimal
                     strings which are not passed as actual
                     arguments to INT remain unaffected.  The
                     default is nohexint.
                mod | nomod
                     Relaxes existing constraints on the MOD
                     intrinsic function, allowing two arguments of
                     the same data type parameter to be of
                     different kind type parameters. The result
                     will be of the same type as the argument, but
                     with the larger kind type parameter value.
                     The default is nomod.
                nullarg | nonullarg
                     For an external or internal procedure
                     reference, this causes the compiler to treat
                     an empty argument (which is delimited by a
                     left parenthesis and a comma, two commas, or a
                     comma and a right parenthesis) as a null
                     argument. This suboption has no effect if the
                     argument list is empty.  The default is
                     nonullarg.
                sce | nosce
                     By default, the compiler performs short
                     circuit evaluation in selected logical
                     expressions using XL Fortran rules. Specifying
                     'sce' allows the compiler to use non-XL
                     Fortran rules. The compiler will perform short
                     circuit evaluation if the current rules allow
                     it.  The default is nosce.
                typestmt | notypestmt
                     The TYPE statement, which behaves in a manner
                     similar to the PRINT statement, is supported
                     whenever this option is specified. The default
                     is notypestmt.
                typlssarg | notyplssarg
                     Converts all typeless constants to default
                     integers if the constants are actual arguments
                     to an intrinsic procedure whose associated
                     dummy arguments are of integer type. Dummy
                     arguments associated with typeless actual
                     arguments of non-integer type remain
                     unaffected by this option.  The default is
                     notyplssarg.

                The default is -qnoport.

         -qposition={appendold|appendunknown}
                Positions the file pointer at the end of the file
                when data is written after an OPEN statement with
                no "POSITION=" specifier, and the corresponding
                "STATUS=" value (OLD or UNKNOWN) is specified.  The
                default depends on the I/O specifiers in the OPEN
                statement and on the compiler invocation command.
                The default is -qposition=appendold for the xlf,
                xlf_r, xlf_r7, and f77/fort77 commands and the
                defined Fortran 90 and Fortran 95 behaviors for the
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, xlf95_r7,
                f90 and f95 commands.

         -qqcount | -qnoqcount
                Accepts the character-count Q edit descriptor (Q)
                as well as the extended-precision Q edit descriptor
                (Qw.d). With -qnoqcount, all Q edit descriptors are
                interpreted as the extended-precision Q edit
                descriptor.  The default is -qnoqcount.

         -qrealsize=<bytes>
                Sets the default size of REAL, DOUBLE PRECISION,
                COMPLEX and DOUBLE COMPLEX values. The allowed
                values for <bytes> are 4 and 8.  The default is
                -qrealsize=4.

         -qsave[=<suboption>] | -qnosave
                Specifies the default storage class for local
                variables.  The suboptions are:

                all
                     The default storage class for all local
                     variables is STATIC. This is the default when
                     -qsave is specified without a suboption.
                defaultinit
                     The default storage class is STATIC for local
                     variables of derived type that have default
                     initialization specified.

                Specifying -qnosave sets the default storage class
                to AUTOMATIC.  The default is -qsave for xlf,
                xlf_r, xlf_r7, f77, or fort77 to duplicate the
                behavior of FORTRAN77 commands, and -qnosave
                otherwise.

         -qsclk[=<suboption>]
                Specifies the resolution that the SYSTEM_CLOCK
                intrinsic procedure uses in a program.  The
                suboptions are:

                centi
                     Uses centisecond resolution for the values
                     returned.
                micro
                     Uses microsecond resolution.

                The default is -qsclk=centi.

         -qswapomp | -qnoswapomp
                Specifies that the compiler should recognize and
                substitute OpenMP routines in XL Fortran programs.
                The default is -qswapomp.

         -qundef | -qnoundef
                The long form of the -u option. See -u for details.
                The default is -qnoundef.

         -qxlf77=<settings_list>
                Provides compatibility with Fortran 77 aspects of
                language semantics and I/O data format that have
                changed. Most of these changes are required by the
                Fortran 90 standard. <settings_list> is a colon-
                separated list of one or more of the following
                suboptions:

                blankpad | noblankpad
                     For internal, direct-access, and stream-access
                     files, uses a default setting equivalent to
                     pad='no'. This setting produces conversion
                     errors when reading from such a file if the
                     format requires more characters than the
                     record has, thus duplicating the XL Fortran
                     Version 2 behavior.
                gedit77 | nogedit77
                     Uses Fortran 77 semantics for the output of
                     REAL objects with the G edit descriptor.
                intarg | nointarg
                     Converts all the integer arguments of an
                     intrinsic procedure to the kind of the longest
                     argument, if they are of different kinds.
                intxor | nointxor
                     Treats .XOR. as a logical binary intrinsic
                     operator rather than a defined operator.
                leadzero | noleadzero
                     Produces a leading zero in real output under
                     the D, E, L, F and Q edit descriptors.
                oldboz | nooldboz
                     Turns blanks into zeros for data read by B, O,
                     and Z edit descriptors, regardless of the
                     "BLANK=" specifier or any BN or BZ control
                     edit descriptors.
                persistent | nopersistent
                     Saves the addresses of arguments to
                     subprograms with ENTRY statements in static
                     storage.
                softeof | nosofteof
                     Allows READ and WRITE operations when a unit
                     is positioned after its endfile record, unless
                     that position is the result of executing an
                     ENDFILE statement.

                The default suboptions are: blankpad, nogedit77,
                nointarg, nointxor, leadzero, nooldboz,
                nopersistent, and nosofteof for the f90, xlf90,
                xlf90_r, xlf90_r7, f95, xlf95, xlf95_r, and
                xlf95_r7 commands, and are the exact opposite for
                the xlf, xlf_r, xlf_r7, f77, and fort77 commands.

         -qxlf90=<settings_list>
                Provides backward compatibility with XL Fortran for
                AIX Version 5 and the Fortran 90 standard for
                certain aspects of the Fortran language.
                <settings_list> is a colon-separated list of one or
                both of the following suboptions:

                signedzero | nosignedzero
                     Determines how the SIGN(A,B) function handles
                     signed real 0.0. Prior to XL Fortran Version
                     6.1, SIGN(A,B) returned |A| when B=-0.0. This
                     behavior conformed with the Fortran 90
                     standard. Now, if you specify the
                     -qxlf90=signedzero compiler option, SIGN(A,B)
                     returns -|A| when B=-0.0. This behavior
                     conforms to the Fortran 95 standard and is
                     consistent with the IEEE standard for binary
                     floating-point arithmetic.
                autodealloc | noautodealloc
                     Determines whether the compiler deallocates
                     allocatable objects that are declared locally
                     without either the SAVE or the STATIC
                     attribute and have a status of currently
                     allocated when the subprogram terminates.

                The default suboptions are signedzero and
                autodealloc for the xlf95, xlf95_r, xlf95_r7 and
                f95 invocation commands. For all other invocation
                commands, the default suboptions are nosignedzero
                and noautodealloc.

  Linking Options
         -b64   The AIX operating system provides 64-bit shared
                object files in both libc.a and libm.a. In 64-bit
                mode, you can use the -b64 linker option to
                instruct ld to bind with 64-bit objects.

         -bdynamic, -bshared, -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                This is available on AIX 4.2 and above.

                -bdynamic
                     Specifies that shared objects are linked
                     dynamically.
                -bshared
                     Equivalent to -bdynamic.
                -bstatic
                     Specifies that shared objects are statically
                     linked into the output file.

                The default is -bdynamic.

         -bhalt:<error_level>
                Specifies the maximum error level that is allowed
                before the linker (ld) command halts. If any linker
                command has an error return value greater than the
                value that is specified by the <error_level>
                variable, linking stops.  The default value is 4,
                as specified in the configuration file.

         -bloadmap:<filename>
                Requests that a log of linker actions and messages
                be saved in file <filename>. You can use the log to
                help diagnose linking problems.

         -bmaxdata=<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint.  The default
                is -bmaxdata=0.

         -bmaxstack:<bytes>
                Specifies the maximum amount of space to reserve
                for the program stack segment for programs where
                the size of these regions is a constraint.

         -brtl | -bnortl
                Determines which algorithm will be used to find
                libraries that are specified with the -l option. If
                -brtl is specified, run-time linking is enabled.

         -bshared
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.
                This is equivalent to -bdynamic.

         -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.

         -L<dir>
                Searches in directory <dir> for libraries specified
                by -l<key>.

         -l<key>
                Searches the specified library file at link time,
                where <key> selects the library lib<key>.a.

  Compiler Customization Options
         -B<prefix>
                Determines a substitute path name for executable
                files used during compilation, such as the compiler
                of linker. <prefix> is the name of a directory
                where the alternative executable files reside. It
                is added to the beginning of the standard program
                names and must end in a slash (/). This option can
                be used in combination with the -t option, which
                determines which of these components are affected
                by -B.

         -F[<config_file>][:<stanza>]
                Specifies an alternative configuration file
                <config_file>, the command to be used (<stanza>)
                within the configuration file, or both. At least
                one of the arguments must be supplied.  The default
                stanza depends on the name of the command used to
                invoke the compiler.

         -P{v|k}[!]
                This option is obsolete and has no effect. Invokes
                the selected optimizing preprocessor.

         -P     Invokes the -Pv preprocessor before the compiler.

         -Pv    Invokes the -Pv preprocessor before the compiler.

         -Pk    Invokes the -Pk preprocessor before the compiler.

         -P!    Invokes the -Pv preprocessor only.

         -Pv!   Invokes the -Pv preprocessor only.

         -Pk!   Invokes the -Pk preprocessor only.

         -t<components_list>
                Applies the prefix from the -B option to the
                specified program, <components_list>, where
                <components_list> is a chain (with no separator
                character inbetween each <component>, ie: "-taFp")
                containing one or more of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

         -W<component>,<options_list>
                Passes the listed options to a component that is
                executed during compilation. <options_list> is a
                comma-separated list of one or more options, and
                <component> is one of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies compile-time rounding of constant
                floating-point expressions. It is equivalent to the
                -qieee option. <rounding_mode> is one of the
                following:

                n = Round to nearest
                m = Round toward minus infinity
                p = Round toward plus infinity
                z = Round toward zero

                The default is -yn.

         -qfloat=<suboptions_list>
                Determines different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using an inline sequence of
                     code instead of a call to a library function.
                fold | nofold
                     Evaluates constant floating-point expressions
                     at compile time.
                hsflt | nohsflt
                     Speeds up calculations by removing range-
                     checking on single-precision float results,
                     and on conversions from floating-point to
                     integer.
                hssngl | nohssngl
                     Speeds up calculations in a safer way than
                     hsflt, by rounding single-precision
                     expressions only when the results are stored
                     into REAL(4) memory locations
                maf | nomaf
                     Generates multiply-add instructions where
                     appropriate.
                nans | nonans
                     Allows you to use the -qflttrap=invalid:enable
                     option to detect and deal with exception
                     conditions that involve signaling NaN (not-a-
                     number) values.
                rndsngl | norndsngl
                     Rounds the result of each single-precision
                     (REAL(4)) operation to single-precision,
                     rather than waiting until the full expression
                     is evaluated. It sacrifices speed for
                     consistency with results from similar
                     calculations on other types of computers.
                rrm | norrm
                     Turns off compiler optimizations that require
                     the rounding mode to be the default, round-
                     to-nearest, at run time.
                rsqrt | norsqrt
                     Allows the optimizer to change a division by
                     the result of a square root operation into a
                     multiply by the reciprocal of the square root.
                strictnmaf | nostrictnmaf
                     Turns off floating-point transformations that
                     are used to introduce negative MAF
                     instructions, as these transformations do not
                     preserve the sign of a zero value.
                The default active suboptions are: nofltint, fold,
                nohsflt, nohssngl, maf, nonans, norelax, norndsngl,
                norrm, norsqrt, and nostrictnmaf.

         -qieee=<mode>
                Specifies the rounding mode for the compiler to use
                when evaluating constant floating-point expressions
                at compile time, where <mode> is one of:

                near = Round to nearest representable number
                minus = Round toward minus infinity
                plus = Round toward plus infinity
                zero = Round toward zero

                The default is -qieee=near.

         -qstrictieeemod | -qnostrictieeemod
                Specifies that the compiler will adhere to the
                Fortran 2003 IEEE arithmetic rules for the
                ieee_arithmetic and ieee_exceptions intrinsic
                modules.  The default is -qstrictieeemod.

  SEE ALSO
         xlfndi(1), showpdf(1), cleanpdf(1), mergepdf(1),
         resetpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/fortran/xlfortran/library/
         www.ibm.com/software/awdtools/fortran/xlfortran/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL Fortran Enterprise Edition V10.1 for AIX(R)

         5724-M13

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.









































configure:9196: $? = 249
configure:9198: xlf90 -v </dev/null >&5
exec: export(export,XL_CONFIG=/etc/xlf.cfg:xlf90,NULL) 
exec: pg(pg,/usr/lpp/xlf/bin/default_msg/xlf.txt,NULL) 



  xlf(1)                 IBM (October 2005)                  xlf(1)



  NAME
         xlf, xlf90, xlf95, xlf_r, xlf90_r, xlf95_r, f90, f95,
         xlf_r7, xlf90_r7, xlf95_r7, f77, fort77 - invoke the IBM
         XL Fortran compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

  DESCRIPTION
         xlf and related invocation commands compile Fortran source
         files.  They also process assembler source files and
         object files. Unless you specify the -c option, these
         commands call the link editor to produce a single object
         file.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/xlf.cfg).  For more information,
         refer to the XL Fortran Enterprise Edition Compiler
         Reference.

         The input file may have any of the following suffixes:
          .f - Fortran source file
          .f77 or .F77 - Fortran source file (fixed form) using
               f77 stanza configuration
          .f90 or .F90 - Fortran source file (free form) using
               xlf90 configuration
          .f95 or .F95 - Fortran source file (free form) using
               xlf95 configuration
          .o or .a - object file for ld command
          .s - assembler source file
          .F - Fortran source file with cpp preprocessor directives

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -I<dir>
                Adds a directory to the search path for include
                files and .mod files. If XL Fortran calls cpp, this
                option adds a directory to the search path for
                #include files. Before checking the default
                directories for include and .mod files, the
                compiler checks each directory in the search path.
                For include files, this path is only used if the
                file name in an INCLUDE line is not provided with
                an absolute path. By default, the following
                directories are searched in the following order:

                1) The current directory (where the compiler is
                executed)
                2) The directory where the source file is located

         -k     Specifies that the program is in free source form.
                This is the short form of -qfree=f90.

         -U     Makes the compiler case-sensitive to identifier
                names. By default the compiler interprets all names
                as if they were lower-case.

         -qci=<nums_list>
                Activates the specified INCLUDE lines. <nums_list>
                is a colon-separated list of identification numbers
                (from 1 to 255) of conditional includes.

         -qcr | -qnocr
                Allows you to control how the compiler interprets
                the CR (carriage return) character.  This allows
                you to compile code written using a MAC OS X or
                DOS/Windows editor.  The default is -qcr.

         -qdirective[=<list>] | -qnodirective[=<list>]
                Specifies target strings to be recognized in a
                comment directive. <list> is a colon-separated list
                of directives. If -qdirective is specified without
                any directives, it turns on the default trigger
                constant IBM* if it has been turned off by a
                previous -qnodirective.  The default is
                -qnodirective.

         -qdlines | -qnodlines
                This is the long form of the -D option. See -D for
                more information.  The default is -qnodlines.

         -qfixed[=<right_margin>]
                Indicates that the input source program is in fixed
                source form and optionally specifies the maximum
                line length, <right_margin>. The maximum
                <right_margin> value is 132.  The default is
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77
                invocation commands, and -qfree=f90 for f90, f95,
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, and
                xlf95_r7.

         -qfree[={f90|ibm}]
                Indicates that the source code is in free source
                form. The 'ibm' and 'f90' suboptions specify
                compatibility with the free source form defined for
                VS Fortran and Fortran 90, respectively. Note that
                the free source form defined for Fortran 90 also
                applies to Fortran 95.  The default is -qfree=f90
                for f90, f95, xlf90, xlf90_r, xlf90_r7, xlf95,
                xlf95_r, and xlf95_r7 invocation commands, and
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77.

         -qmbcs | -qnombcs
                Indicates to the compiler whether character literal
                constants, Hollerith constants, H edit descriptors,
                and character string edit descriptors can contain
                Multibyte Character Set (MBCS) or Unicode
                characters. The default is -qnombcs.

         -qmixed | -qnomixed
                The long form of the -U option. Makes the compiler
                case-sensitive to identifier names. The default is
                -qnomixed.

         -qsuffix=<option>=<suffix>
                Specifies the source file suffix, <suffix>, on the
                command line instead of in the .cfg file, where
                <option> can be:

                f
                     Specifies that <suffix> is the new source file
                     suffix.
                o
                     Specifies that <suffix> is the new object-file
                     suffix.
                s
                     Specifies that <suffix> is the new assembler
                     source file suffix.
                cpp
                     Specifies that <suffix> is the new
                     preprocessor source file suffix.

  Output Control Options
         -c     Produces an object file instead of an executable
                file.  Prevents the completed object file from
                being sent to the ld command for link-editing. With
                this option, the output is a .o file for each
                source file.

         -d     Causes preprocessed source files that are produced
                by cpp to be kept rather than to be deleted. By
                default temporary files produced by cpp are
                deleted.

         -o <name>
                Specifies a name for the output object, executable,
                or assembler source file.  The default name is
                a.out for executable files. The default name for an
                object source file is the same as the source file
                except that it has a '.o' extension.

         -q32   Selects 32-bit mode compilation mode. The -q32 and
                -qarch options determine the target machines that
                the 32-bit executable will run on. The default is
                -q32.

         -q64[=<suboption>]
                Selects 64-bit compilation mode. The -q64 option
                indicates that the object module will be created in
                64-bit object format and that the 64-bit
                instruction set will be generated. Note that you
                may compile in a 32-bit environment to create 64-
                bit objects, but you must link them in a 64-bit
                environment with the -q64 option. Use -q32 and -q64
                options, along with the -qarch and -qtune compiler
                options, to optimize the output of the compiler to
                the architecture on which that output will be used.
                The suboptions are:

                largetype
                     The object file will use the 64-bit Large Data
                     Type (LDT) ABI. This object file may only be
                     used on versions of AIX greater than or equal
                     to 5.0.

         -qmoddir=<directory>
                Specifies the location for any .mod files that the
                compiler writes. By default .mod files are placed
                in the current directory.

         -qpic[=<suboption>] | -qnopic
                Generates Position Independent Code (PIC) that can
                be used in shared libraries.  The suboptions are:

                large
                     Allows the size of the Table of Contents to be
                     larger than 64K. This suboption allows for
                     more addresses to be stored in the Table of
                     Contents and generates larger code.
                small
                     Assumes that the size of the Table of Contents
                     can be at most 64K.

                The default is -qpic=small.

  Optimization Options
         -NS<bytes>
                Specifies the size (in bytes) of the register spill
                space; the internal program storage areas used by
                the optimizer for register spills to storage.  The
                default is -NS512.

         -O[<level>]
                Specifies whether to optimize code during
                compilation and, if so, at which level. -O<level>
                is equivalent to -qoptimize=<level>. <level> can
                be:

                (not specified)
                     This is equivalent to -O2.
                0
                     Almost all optimizations are disabled. This is
                     equivalent to -qnooptimize.
                1
                     Reserved for future use. Ignored by compiler.
                2
                     Performs a set of optimizations that are
                     intended to offer improved performance without
                     an unreasonable increase in time or storage
                     that is required for compilation.
                3
                     Performs additional optimizations that are
                     memory intensive, compile-time intensive, and
                     may change the semantics of the program
                     slightly, unless -qstrict is specified. We
                     recommend these optimizations when the desire
                     for run-time speed improvements outweighs the
                     concern for limiting compile-time resources.
                     This level of optimization also affects the
                     setting of the -qfloat option, turning on the
                     'fltint' and 'rsqrt' suboptions by default,
                     and setting -qmaxmem=-1.  This option implies
                     -qhot=level=0.
                4
                     Aggressively optimizes the source program,
                     trading off additional compile time for
                     potential improvements in the generated code.
                     You can specify the option at compile time or
                     at link time. if you specify it at link time,
                     it will have no effect unless you also specify
                     it at compile time for at least the file that
                     contains the main program. -O4 implies the
                     following other options:
                     -qhot
                     -qipa
                     -O3
                     -qarch=auto
                     -qtune=auto
                     -qcache=auto
                5
                     Performs all optimizations from -O4, and also
                     sets -qipa=level=2 to perform full inter-
                     procedural data flow and alias analysis.

                -O4 and -O5 perform whole-program analysis and
                should be specified at both compilation and link
                time to have maximal effect.  The default is -O0.

         -p[g]  Sets up the object file for profiling. Specifying
                '-pg' will produce more extensive statistics. The
                default is no profiling.

         -Q[<suboption>]
                Specifies whether Fortran 90 or Fortran 95
                procedures are inlined and/or the names of
                particular procedures that should or should not be
                inlined. names is a list of procedure names that
                are separated by colons. This option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions,
                     subject to limits on the number of inlined
                     calls and the amount of code size increase as
                     a result.
                -Q!
                     Turns off inlining.
                -Q+<names_list>
                     Inlines the functions listed in <names_list>
                     and any other appropriate functions, where
                     <names_list> is a colon-separated list.
                -Q-<names_list>
                     Does not inline functions listed in
                     <names_list>, where <names_list> is a colon-
                     separated list. All other appropriate
                     functions are inlined.

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qalias=<suboptions_list>
                Indicates whether a program contains certain
                categories of aliasing. The compiler limits the
                scope of some optimizations when there is a
                possibility that different names are aliases for
                the same storage locations. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                aryovrlp | noaryovrlp
                     Indicates whether the compilation units
                     contain any array assignments between
                     storage-associated arrays. If not, specify
                     noaryovrlp to improve performance.
                intptr | nointptr
                     Indicates whether the compilation units
                     contain any integer POINTER statements. If so,
                     specify intptr.
                pteovrlp | nopteovrlp
                     Indicates whether any pointee variables may be
                     used to refer to any data objects that are not
                     pointee variables, or whether two pointee
                     variables may be used to refer to the same
                     storage location. If not, specify nopteovrlp.
                std | nostd
                     Indicates whether the compilation units
                     contain any non-standard aliasing (see
                     Compiler Reference for more information). If
                     so, specify nostd.  (-qalias=nostd replaces
                     the obsolete -qxflag=xalias option.)

                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90 and f95 commands, the default
                suboptions are: aryovrlp, nointptr, pteovrlp, and
                std. For the xlf, xlf_r, xlf_r7, f77, and fort77
                commands, the default suboptions are: aryovrlp,
                intptr, pteovrlp, and std.

         -qalign=<suboptions_list>
                Specifies the alignment of data objects in storage
                to avoid performance problems with misaligned data.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                4k | no4k
                     Specifies whether large arrays and structures
                     (at least 4096 bytes in size) will be aligned
                     on a 4K (4096-byte, or page) boundary.  Use of
                     this option may help to improve the
                     performance of programs using data striping.
                bindc=<suboption>
                     Specifies that the alignment and padding for
                     an XL Fortran derived type with the BIND(C)
                     attribute are compatible with a C struct type
                     that is compiled with the corresponding XL C
                     alignment option. The compatible alignment
                     options are:
                     -qalign=bindc=bit_packed
                     -qalign=bindc={full|power}
                     -qalign=bindc=packed
                     -qalign=bindc={twobyte|mac68k}
                     -qalign=bindc=natural
                     Each of these "-qalign=bindc=" sub-suboptions
                     is equivalent to the XL C "-qalign=" suboption
                     of the same name.  (ie: For
                     -qalign=bindc=bit_packed, the corresponding XL
                     C option is -qalign=bit_packed)
                struct=<option>
                     Specifies how objects or arrays of a derived
                     type (declared using a record structure) are
                     stored, and whether or not padding is used
                     between components. The options are:
                     natural
                          Objects of a derived type are stored with
                          sufficient padding such that components
                          will be stored on their natural alignment
                          boundaries, unless storage association
                          requires otherwise.
                     packed
                          Objects of a derived type are stored with
                          no padding between components, other than
                          any padding represented by %FILL
                          components.
                     port
                          Storage padding is the same as described
                          above for the struct=natural suboption,
                          except that the alignment of components
                          of type complex is the same as the
                          alignment of components of type real of
                          the same kind. The padding for an object
                          that is immediately followed by a union
                          is inserted at the beginning of the first
                          map component for each map in that union.

                The default activated suboptions are: no4k,
                struct=natural, and bindc=power.

         -qarch=<suboption>
                Specifies which instructions the compiler can
                generate.  The suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                com
                     You can run the executable file that the
                     compiler generated on any hardware platform
                     supported by the compiler, because the file
                     contains only instructions that are common to
                     all machines.
                p2sc
                     The executable file can be executed on any
                     POWER2 Super Chip hardware platform.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms. Using -q64 with ppc upgrades the
                     architecture to ppc64grsq.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.  In 64-bit mode,
                     produces object code containing optional
                     graphics instructions that will run on 64-bit
                     PowerPC platforms, but not on 32-bit-only
                     platforms.  Using -q64 with ppcgr upgrades the
                     architecture to ppc64grsq.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                pwr
                     Produces an object that contains instructions
                     that run on any of the POWER or POWER2
                     hardware platforms.
                pwr2s
                     The executable file can be executed on any
                     desktop implementation of the POWER2 chip.
                pwr2
                     Produces an object that contains instructions
                     that run on the POWER2 hardware platforms.
                pwrx
                     Equivalent to pwr2.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3, POWER4, POWER5,
                     POWER5+ or PowerPC 970 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4, POWER5, POWER5+ or
                     PowerPC 970 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 or POWER5+ hardware
                     platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on any POWER5+ hardware platform.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.
                601
                     Produces an object that contains instructions
                     that run on PowerPC 601 systems.
                603
                     Produces an object that contains instructions
                     that run on PowerPC 603 systems.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                ppc64v
                     Generates instructions for any 64-bit PowerPC
                     processor (like PowerPC 970) with VMX.

                The default is -qarch=com.

         -qassert=<suboptions_list>
                Provides information about the program to help
                fine-tune optimizations. <suboptions_list> is a
                colon-separated list of one or both of the
                following suboptions:

                deps | nodeps
                     Loops can contain loop-carried dependencies.
                itercnt=<n>
                     The iteration count of a typical loop is <n>.

                The default is -qassert=deps:itercnt=1024.

         -qcache=<suboptions_list>
                Specifies the cache configuration for a specific
                execution machine. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                assoc=<n>
                     Specifies the set-associativity of the cache:
                     0   = Directly-mapped
                     1   = Fully associative
                     (n > 1) = <n>-way set-associative
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty resulting
                     from a cache miss.
                level=<level>
                     Specifies which level of cache is affected:
                     1 = Basic cache
                     2 = Level-2 cache, or the table lookaside
                     buffer (TLB) if the machine has no level-2
                     cache
                     3 = TLB, in a machine that does have a level-2
                     cache
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<type>
                     Specifies the type of cache that the settings
                     apply to:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The default is determined by the -qtune and -qarch
                settings.

         -qcompact | -qnocompact
                Reduces optimizations that increase code size.  The
                default is -qnocompact.

         -qdirectstorage | -qnodirectstorage
                Specifies that a compilation unit might reference
                write-through-enabled or cache-inhibited storage.
                The default is -qnodirectstorage.

         -qenablevmx | -qnoenablevmx
                Enables generation of Vector Multimedia Extension
                (VMX) instructions.  The default is -qnoenablevmx.

         -qessl | -qnoessl
                Allows the use of the Engineering and Scientific
                Subroutine Library (ESSL) routines in place of
                Fortran 90 intrinsic procedures.  The default is
                -qnoessl.

         -qfdpr | -qnofdpr
                Provides object files with information that the AIX
                Feedback Directed Program Restructuring (fdpr)
                performance-tuning utility needs to optimize the
                resulting executable file.  The default is
                -qnofdpr.

         -qhot[=<suboptions>] | -qnohot
                Performs high-order loop analysis and
                transformations during optimization. This option is
                a powerful alternative to hand-tuning that provides
                opportunities to optimize loops and array language.
                The suboptions are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value. When <n> is not
                     specified, the compiler will pad any arrays
                     where it infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. See the XL Fortran
                     Compiler Reference for more information.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a VMX (Vector Multimedia Extension)
                     instruction.  If you specify -qhot=nosimd, the
                     compiler performs optimizations on loops and
                     arrays, but avoids replacing certain code with
                     VMX instructions.
                vector | novector
                     Specifies whether to allow the compiler to
                     optimize by replacing code with calls to
                     vector library routines.  Only takes effect
                     when specified with -qnostrict or -O3 or
                     higher optimization level.

                The default is -qnohot. If -qhot is specified
                without parameters, the default is -qhot=vector.

         -qipa[=<suboptions_list>] | -qnoipa
                Enhances -O optimization by performing detailed
                analysis across procedures. Optimization level -O2
                or higher is required when using -qipa.
                <suboptions_list> is a colon-separated list of
                suboptions. Regular expressions are supported when
                specifying <procedure_names_list> in the following
                -qipa suboptions: exits, inline, noinline, lowfreq,
                pure, safe, and unknown. <procedure_names_list> is
                a comma-separated list. The suboptions are:

                exits=<procedure_names_list>
                     Specifies a selected set of procedures which
                     always end the program.
                clonearch=<architecture_list> | noclonearch
                     Allows you to specify multiple architectures
                     in the event that you want to compile your
                     application for multiple architectures with a
                     single binary file. <architecture_list> is a
                     comma-separated list of one or more of the
                     following architectures: pwr4, pwr5, ppc970,
                     and pwr5x. This must be specified during link
                     time.  The default is noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of the mangled names of the functions that you
                     wish to clone (or not clone). Please note that
                     this suboption has no effect unless
                     -qipa=clonearch=<arch> is specified. You can
                     use regular expression syntax when specifying
                     function names.  The default is nocloneproc.
                inline=<options_list>
                     Specifies a colon-separated list of inline
                     options, which are as follows:
                     auto | noauto
                          Specifies whether to automatically
                          perform inline expansion.  The default is
                          auto.
                     limit=<n>
                          Changes the size limits that the
                          inline=auto option uses to determine how
                          much inline expansion to do. <n> is the
                          optimizers approximation of the number of
                          bytes of code that will be generated.
                     <procedure_names_list>
                          Specifies the procedures to attempt to
                          inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This argument is
                          implemented only when inline=auto is on.
                noinline=<procedure_names_list>
                     Specifies the procedures which are not to be
                     inlined.
                isolated=<procedure_names_list>
                     Specifies the procedures that are not compiled
                     with -qipa and do not directly refer to any
                     global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization to perform:
                     0
                          Performs minimal inter-procedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full inter-procedural data flow and alias
                          analysis.
                     The default level is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, in the event that an object
                     listing has been requested using the -qlist or
                     -qipa=list option. The default name is
                     "a.lst". Specifying 'long' or 'short'
                     determines which listing sections will be
                     included. The default is short.
                lowfreq=<procedure_names_list>
                     Specifies the procedures that are likely to be
                     called infrequently during the course of a
                     typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the interprocedural behavior for
                     procedures not compiled with -qipa.  The
                     default is 'unknown'.
                object | noobject
                     Includes standard object code in the object
                     files. If the noobject option is specified, it
                     can substantially reduce overall compilation
                     time by not generating object code during the
                     first IPA phase. The default is object. Note,
                     this is a compile-time suboption.
                partition={small|medium|large}
                     Specifies the size of the regions within the
                     program to analyze. Larger partitions contain
                     more procedures, which result in better
                     interprocedural analysis but require more
                     storage to optimize.  The default is medium.
                pdfname=<filename>
                     Specifies the name of the profile data file
                     that contains the PDF profiling information.
                     The default filename is __pdf.
                pure=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "pure" must be "isolated" and
                     "safe". It must not alter the internal state
                     nor have side-effects, which are defined as
                     potentially altering any data object visible
                     to the caller.
                safe=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "safe" may modify global
                     variables and dummy arguments.
                stdexits | nostdexits
                     Specifies that certain predefined routines can
                     be optimized as with the exits suboption. The
                     procedures are abort, exit, _exit, and
                     _assert.  The default is nostdexits.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure specified
                     as "unknown" may make calls to other parts of
                     the program compiled with -qipa and modify
                     global variables and dummy arguments.

                Options intended for use by the link-time phase of
                -qipa are -qlibansi, -qlibessl, -qlibposix and
                -qthreaded.  The default is -qnoipa.

         -qkeepparm | -qnokeepparm
                Ensures that the incoming parameters are stored on
                the stack even when optimizing. This may negatively
                impact execution performance. This option then
                provides access to the values of incoming
                parameters to tools, such as debuggers, simply by
                preserving those values on the stack.  The default
                is -qnokeepparm.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large 16 MB pages provided on POWER4 and higher
                based systems.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are in fact the library
                functions.  The default is -qnolibansi.

         -qlibessl | -qnolibessl
                Assumes that all functions with the name of an ESSL
                defined library function are, in fact, the library
                functions.  The default is -qnolibessl.

         -qlibposix | -qnolibposix
                Assumes that all functions with the name of a POSIX
                1003.1 defined library function are, in fact, the
                system functions.  The default is -qnolibposix.

         -qmaxmem=<kbytes>
                Limits the amount of memory that the compiler
                allocates while performing specific, memory-
                intensive optimizations. If <kbytes> is -1, the
                compiler will take as much memory as it needs
                without checking for limits. The default is
                -qmaxmem=2048 when using optimization level -O2,
                and -qmaxmem=-1 when using -O3 or greater.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 Produces an object that is instrumented to collect
                run-time execution information. This is phase 1 of
                the profile-directed feedback optimization process.

         -qpdf2 Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

         -qprefetch | -qnoprefetch
                Automatically inserts prefetch instructions where
                the optimizer perceives a benefit.  The default is
                -qprefetch.

         -qrecur | -qnorecur
                Not recommended. Allows external subprograms to be
                called recursively. For new programs, use the
                RECURSIVE keyword, which provides a standard-
                conforming way of using recursive procedures.  The
                default is -qnorecur.

         -qshowpdf | -qnoshowpdf
                Adds additional call and block count profiling
                information to an executable. This option is used
                together with the -qpdf1 option.  The default is
                -qnoshowpdf.

         -qsmallstack[=<suboption>] | -qnosmallstack
                Specifies that the compiler will minimize stack
                usage where possible. This option can take the
                form:

                -qsmallstack
                     Enables only general small stack
                     transformations.
                -qsmallstack=dynlenonheap
                     Asserts that automatic variables which are
                     dynamically-sized are allocated from the heap
                     and enables general small stack
                     transformations.
                -qsmallstack=nodynlenonheap
                     Disables dynamic-length variable allocation.
                -qnosmallstack
                     Disables only the general small stack
                     transformations.

                The default is -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Specifies that code should be produced for an SMP
                system.  <suboptions_list> is a colon-separated
                list of one or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization.
                nested_par | nonested_par
                     Specifies that prescriptive nested parallel
                     constructs should be parallelized by the
                     compiler.
                omp | noomp
                     Enforces compliance with the OpenMP Fortran
                     API.
                opt | noopt
                     Controls optimization for parallelization.
                     -qsmp=noopt specifies that the compiler should
                     do the least amount of optimization that is
                     required to parallelize the code and preserve
                     maximum debugability.
                rec_locks | norec_locks
                     Allows recursive locks to be used to avoid
                     problems associated with CRITICAL constructs.
                     If -qsmp=norec_locks is specified, recursive
                     locks will not be used to implement critical
                     sections.
                schedule=<suboptions>
                     The schedule suboption can take any of the
                     following sub-suboptions:
                     affinity[=<n>]
                     dynamic[=<n>]
                     guided[=<n>]
                     runtime
                     static[=<n>]
                     For their descriptions, refer to the XL
                     Fortran Compiler Reference.
                threshold=<n>
                     Controls the amount of automatic loop
                     parallelization that occurs. The value of <n>
                     represents the lower limit allowed for
                     parallelization of a loop, based on the level
                     of "work" present in a loop.

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, opt, noomp, norec_locks, nonested_par,
                schedule=runtime, and threshold=100.

         -qspillsize=<bytes>
                The long form of -NS. See the -NS option.  The
                default is -qspillsize=512.

         -qstacktemp=<num>
                Determines where to allocate applicable compiler
                temporaries at run time. The allocation depends on
                the value of <num>. The values are:

                0
                     Indicates that the compiler will decide
                     whether to allocate the applicable compiler
                     temporaries on the heap or the stack.
                -1
                     Indicates that applicable compiler temporaries
                     are to be always allocated on the stack. This
                     is the best-performing setting but uses the
                     most amount of stack storage.
                (1 or greater)
                     Indicates that applicable compiler temporaries
                     less than this value (bytes) should be
                     allocated on the stack and those greater than
                     or equal to this value should be allocated on
                     the heap.

                The default is -qstacktemp=0.

         -qstrict | -qnostrict
                Ensures that optimizations done by the -O3 and
                greater (and optionally -O2) options do not alter
                the semantics of a program. This option is ignored
                for -qnoopt.  For -O3 and greater, the default is
                -qnostrict. Otherwise the default is -qstrict.

         -qstrict_induction | -qnostrict_induction
                Prevents the compiler from performing induction
                (loop counter) variable optimizations that could
                alter the semantics of a program.  The default is
                -qnostrict_induction.

         -qthreaded
                Asserts that the compiler will generate thread-safe
                code when generating its own code or allocating
                compiler-created temporary data. User-written code
                that is algorithmically not thread-safe is
                unaffected by this option and will remain non-
                thread-safe. The default is -qthreaded when using
                xlf_r, xlf_r7, xlf90_r, xlf90_r7, xlf95_r, or
                xlf95_r7 invocation commands.

         -qtune=<suboption>
                Tunes instruction selection, scheduling, and other
                implementation-dependent performance enhancements
                for a specific implementation of a hardware
                architecture.  -qtune will not alter the ability of
                a program to run on a processor but will produce
                optimal code sequences tuned to a particular
                processor.  The suboptions are:

                auto
                     Automatically detects the specific processor
                     type of the compiling machine and produces an
                     object optimized for that processor.
                601
                     Produces an object optimized for all the
                     PowerPC 601 processors.
                603
                     Produces an object optimized for all the
                     PowerPC 603 processors.
                604
                     Produces an object optimized for all the
                     PowerPC 604 processors.
                pwr
                     Produces an object optimized for the POWER
                     hardware platforms.
                p2sc
                     The optimizations are tuned for the POWER2
                     Super Chip.
                pwr2
                     Produces an object optimized for the POWER2
                     hardware platforms.
                pwrx
                     This is equivalent to pwr2.
                pwr2s
                     The optimizations are tuned for the desktop
                     implementation of the POWER2 architecture,
                     which has a narrower processor-to-memory bus
                     than other POWER2 implementations.
                pwr3
                     Produces an object optimized for the POWER3
                     hardware platforms.
                pwr4
                     Produces an object optimized for the POWER4
                     hardware platforms.
                pwr5
                     Produces an object optimized for the POWER5
                     hardware platforms.
                rs64a
                     Produces an object optimized for the RS64I
                     processor.
                rs64b
                     Produces an object optimized for the RS64II
                     processor.
                rs64c
                     Produces an object optimized for the RS64III
                     processor.
                ppc970
                     Produces an object optimized for PowerPC 970
                     processors.

                The compiler uses -qtune setting that is compatible
                with the target architecture, which is controlled
                by the -qarch, -q32, and -q64 options.  The default
                setting is determined by the setting of -qarch.

         -qunroll[={auto|yes}] | -qnounroll
                Specifies whether unrolling DO loops is allowed in
                a program. Unrolling is allowed on outer and inner
                DO loops.  The suboptions are:

                auto
                     The compiler performs basic loop unrolling.
                yes
                     The compiler looks for more opportunities to
                     perform loop unrolling than is done with the
                     -qunroll=auto option. Specifying -qunroll with
                     no suboptions is equivalent to -qunroll=yes.

                The default is -qunroll=auto.

         -qunwind | -qnounwind
                Specifies that the compiler will preserve the
                default behavior for saves and restores to volatile
                registers during a procedure call.  If you specify
                -qnounwind, the compiler rearranges subprograms to
                minimize saves and restores to volatile registers.
                This rearrangement may make it impossible for the
                program or debuggers to walk through or "unwind"
                subprogram stack frame chains.  The default is
                -qunwind.

         -qvecnvol | -qnovecnvol
                Asserts that the compiled application will use both
                volatile and non-volatile vector registers. You
                should use this option only after understanding
                interoperability with old binaries. If you are
                compiling C/C++ code in Fortran which calls any of
                the following subroutines: setjmp(),longjmp(),
                sigsetjmp(), siglongjmp(), _setjmp(), _longjmp(),
                getcontext(), setcontext(), makecontext(), and
                swapcontext(), then you should set -qnovecnvol.
                bos.adt.include version 5.3.0.30 or greater should
                be installed to use -qvecnvol on the host system.
                The default is -qnovecnvol.

         -qzerosize | -qnozerosize
                Improves performance of Fortran 77 and some Fortran
                90 and Fortran 95 programs by preventing checking
                for zero-sized character strings and arrays.
                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90, and f95 commands, the default is
                -qzerosize.  For the xlf, xlf_r, xlf_r7, f77, and
                fort77 commands, the default is -qnozerosize.

  Error Checking and Debugging Options
         -C     Checks each reference to an array element, array
                section, or character substring for correctness.
                This is the short form of -qcheck.

         -D     Specifies whether the compiler compiles fixed
                source form lines with a D in column 1 or treats
                them as comments. Please note that in order to pass
                C-style -D macro definitions to the C preprocessor
                (e.g. compiling a file that ends with .F) use the
                -W option. For example:
                -WF,-DDEFINE_THIS
                -D is the short form of -qdlines.

         -g     Generates debug information for use by a symbolic
                debugger.

         -qcheck | -qnocheck
                The long form of the -C option. See -C for details.
                The default is -qnocheck.

         -qdbg | -qnodbg
                The long form of the -g option. See -g for details.
                The default is -qnodbg.

         -qdpcl | -qnodpcl
                Generates symbols that tools based on the Dynamic
                Probe Class Library (DPCL) API can use to see the
                structure of an executable file. You must also
                specify the -g option when you specify -qdpcl.
                This option has no effect when optimization (-O) is
                enabled. The default is -qnodpcl.

         -qextchk | -qnoextchk
                Sets up type-checking information for common
                blocks, procedure definitions, procedure
                references, and module data. Later, the linker can
                detect mismatches across compilation units using
                this information.  The default is -qnoextchk.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Determines what types of floating-point exception
                conditions to detect at run time. The program
                receives a SIGTRAP signal when the corresponding
                exception occurs.  <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                enable
                     Turn on checking for the specified exceptions
                     in the main program so that the exceptions
                     generate SIGTRAP signals.
                imprecise
                     Only check for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detect and trap on floating-point inexact, if
                     exception checking is enabled.
                invalid
                     Detect and trap on floating-point invalid
                     operations.
                nanq
                     Detect and trap all quiet not-a-number (NaNQ)
                     values and signaling not-a-number (NaNS)
                     values.
                overflow
                     Detect and trap on floating-point overflow.
                underflow
                     Detect and trap on floating-point underflow.
                zerodivide
                     Detect and trap on floating-point division by
                     zero.

                The default is -qnoflttrap. When -qflttrap is
                specified with no suboptions, the default activated
                suboptions are: overflow, underflow, zerodivide,
                invalid, and inexact.

         -qfullpath | -qnofullpath
                Records the full (or absolute) path names of source
                and include files in object files compiled with
                debugging information (-g option).  The default is
                -qnofullpath.

         -qhalt=<sev>
                Stops before producing any object, executable, or
                assembler source files if the maximum severity of
                compile-time messages equals or exceeds the
                specified severity <sev>, where the severity levels
                are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                The default is -qhalt=s.

         -qinitauto[=<hex_value>] | -qnoinitauto
                Initializes each byte or word (4 bytes) of storage
                for automatic variables to a specific value,
                depending on the length specified in <hex_value>.
                This helps you to locate variables that are
                referenced before they are defined. <hex_value> is
                a 1 to 8 digit hexadecimal number.  The default is
                -qnoinitauto. If you specify -qinitauto without a
                <hex_value>, the compiler initializes the value of
                each byte of automatic storage to zero. This option
                should be used for debugging purposes only.

         -qlanglvl=<suboption>
                Determines which language standard (or
                subset/superset of a standard) to check against for
                nonconformance. This option will only produce
                messages; all code valid in extended mode will
                compile regardless of which suboption is specified.
                The suboptions are:

                77std
                     Accepts the language specified by the ANSI
                     Fortran 77 standard.
                90std
                     Accepts the language specified by the ISO
                     Fortran 90 standard.
                90pure
                     Same as 90std, except that it reports errors
                     for any obsolescent Fortran 90 features used.
                90ext
                     Obsolete suboption that is equivalent to
                     extended.
                95std
                     Accepts the language specified by the ISO
                     Fortran 95 standard.
                95pure
                     Same as 95std, except that it also reports
                     errors for any obsolescent Fortran 95 features
                     used.
                2003std
                     Accepts the language that the ISO Fortran 95
                     standard specifies, as well as all Fortran
                     2003 features supported by XL Fortran, and
                     reports anything else as an error.
                2003pure
                     The same as 2003std except that it also
                     reports errors for any obsolescent Fortran
                     2003 features used.
                extended
                     Accepts the full Fortran 95 language standard,
                     all Fortran 2003 features supported by XL
                     Fortran, and all extensions, effectively
                     turning off language-level checking.

                The default is -qlanglvl=extended.

         -qlinedebug | -qnolinedebug
                Generates line number and source file name
                information for the debugger. This option produces
                minimal debugging information, so the resulting
                object size is smaller than what is produced if the
                -g debugging option is specified. The default is
                -qnolinedebug.

         -qobject | -qnoobject
                Specifies whether to produce an object file or to
                stop immediately after checking the syntax of the
                source files.  The default is -qobject.

         -qsaa | -qnosaa
                Checks for conformance to the SAA Fortran language
                definition. It identifies nonconforming source code
                and also options that allow such nonconformances.
                The default is -qnosaa.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, and other information, in the
                corresponding object file. The compilation must
                produce an object file for this option to take
                effect.  The default is -qnosaveopt.

         -qsigtrap[=<trap_handler>]
                When you are compiling a file that contains a main
                program, this option sets up the specified trap
                handler to catch SIGTRAP exceptions. This option
                enables you to install a handler for SIGTRAP
                signals without calling the SIGNAL subprogram in
                the program. Specifying -qsigtrap with no
                <trap_handler> is equivalent to -qsigtrap=xl__trce.

         -qtbtable=<suboption>
                Limits the amount of debugging traceback
                information in object files, which reduces the size
                of the program. The suboptions are:

                none
                     Includes no traceback information.
                small
                     Includes traceback information but not the
                     names of procedures or information about
                     procedure parameters.
                full
                     Includes complete traceback information.

                The default is full traceback information in the
                object file when compiling non-optimized (without
                -O) or for debugging (with -g).  Otherwise, the
                default is -qtbtable=small.

         -qwarn64 | -qnowarn64
                Assists in porting code from a 32-bit environment
                to a 64-bit environment by detecting the truncation
                of an 8-byte integer pointer to 4 bytes. The
                -qwarn64 option uses informational messages to
                identify statements that may cause problems with
                the 32-bit to 64-bit migration.  The default is
                -qnowarn64.

         -qxflag=<suboption>
                Specifies rarely-needed compiler behaviors.  The
                suboptions are:

                oldtab
                     For fixed source form programs, interprets a
                     tab in columns 1 to 5 as a single character.
                     The source statement still starts immediately
                     after the tab, but the tab character is
                     treated as a single character for counting
                     columns. This setting allows up to 71
                     characters of input, depending on where the
                     tab character occurs.
                dvz
                     Specifying -qxflag=dvz causes the compiler to
                     generate code to detect floating-point
                     divide-by-zero operations. With this option
                     on, the extra code calls the external handler
                     function __xl_dzx when the divisor is zero.
                xalias
                     This is obsolete. Please use -qalias=nostd in
                     your new applications.

         -qxlines | -qnoxlines
                Specifies whether fixed source form lines with a X
                in column 1 are compiled or treated as comments.
                The default is -qnoxlines.

  Listing and Message Options
         -#     Generates information on the progress of the
                compilation without actually running the individual
                components.

         -S     Produces one or more .s files, showing equivalent
                assembler source for each Fortran source file.

         -V     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes. This is the
                same as -v except that you can cut and paste
                directly from the display to create a command.

         -v     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes.

         -w     Suppresses informational, language-level, and
                warning messages. This option sets -qflag=e:e.

         -qattr[=full] | -qnoattr
                Specifies whether to produce the attribute
                component of the attribute and cross-reference
                section of the listing.  The listing contains all
                identifiers (-qattr=full) or only the names that
                are referenced (-qattr).  The default is -qnoattr.

         -qflag=<listing_severity>:<terminal_severity>
                Specifies the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> determines
                the minimum level for the listing file, and
                <terminal_severity> determines the minimum level
                for the terminal.  The severity levels are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                Note that both <listing_severity> and
                <terminal_severity> must be specified.  The default
                is -qflag=i:i.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                Specifying -qlist with no suboptions is equivalent
                to specifying -qlist=nooffset.  The default is
                -qnolist.

         -qlistopt | -qnolistopt
                Determines whether to show the setting of every
                compiler option in the listing file or only
                selected options. These selected options include
                those specified on the command line or directives
                plus some that are always put in the listing.  The
                default is -qnolistopt.

         -qnoprint
                Prevents the compiler from creating the listing
                file, regardless of the settings of other listing
                options.

         -qphsinfo | -qnophsinfo
                Determines whether timing information is displayed
                on the terminal for each compiler phase.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qreport[=<suboptions>] | -qnoreport
                Determines whether to produce transformation
                reports showing how the program is parallelized and
                how loops are optimized.  The suboptions are:

                hotlist
                     Produces a report showing how loops are
                     transformed.
                smplist
                     Produces a report showing how the program is
                     parallelized.

                The default is -qnoreport.

         -qsource | -qnosource
                Determines whether to produce the source section of
                the listing.  The default is -qnosource.

         -qsuppress[={<msg_nums_list>|cmpmsg}] | -qnosuppress
                Determines which messages to suppress from the
                output stream.  The suboptions are:

                <msg_nums_list>
                     A colon-separated list of 7-digit compiler
                     message numbers.
                cmpmsg
                     Suppresses the informational messages that
                     report compilation progress and a successful
                     completion.

                The default is -qnosuppress.

         -qversion
                Displays the version and release of the invoking
                compiler. Specify this option on its own with the
                compiler command.

         -qxref[=full] | -qnoxref
                Determines whether to produce the cross-reference
                component of the attribute and cross-reference
                section of the listing.  If you specify only
                -qxref, only identifiers that are used are
                reported. If you specify -qxref=full, the listing
                contains information about all identifiers that
                appear in the program, whether they are used or
                not.  The default is -qnoxref.

  Compatibility Options
         -1     Executes each DO loop in the compiled program at
                least once if its DO statement is executed, even if
                the iteration count is 0. This option provides
                compatibility with Fortran 66. The default is to
                follow the behavior of later Fortran standards,
                where DO loops are not performed if the iteration
                count is 0. This is the short form of the -qonetrip
                option.

         -u     Specifies that no implicit typing of variable names
                is permitted. It has the same effect as using the
                IMPLICIT NONE statement in each scope that allows
                implicit statements. By default, implicit typing is
                allowed.

         -qautodbl=<setting>
                Converts single-precision floating-point
                calculations to double-precision or converts
                double-precision calculations to extended-
                precision.  <setting> can be:

                none
                     Does not promote or pad any objects that share
                     storage.
                dbl4
                     Promotes floating-point objects that are
                     single precision or are composed of such
                     objects.
                dbl8
                     Promotes floating-point objects that are
                     double-precision or are composed of such
                     objects.
                dbl
                     Combines the promotions done by dbl4 and dbl8.
                dblpad4
                     Performs the same promotions as dbl4, and pads
                     objects of other types (except CHARACTER) that
                     can share storage with promoted objects.
                dblpad8
                     Performs the same promotions as dbl8, and also
                     pads objects of other types (except CHARACTER)
                     if they can share storage with promoted
                     objects.
                dblpad
                     Combines the promotions done by dbl4 and dbl8,
                     and also pads objects of other types (except
                     CHARACTER) if they can share storage with
                     promoted objects.

                The default is -qautodbl=none.

         -qcclines | -qnocclines
                Enables recognition of conditional compilation
                lines in fixed source form and F90 free source
                form. IBM free source form is not supported.  The
                default is -qcclines if -qsmp=omp is specified.
                Otherwise, the default is -qnocclines.

         -qctyplss[={arg|noarg}] | -qnoctyplss
                Specifies whether character constant expressions
                are allowed wherever typeless constants may be
                used. Specifying -qctyplss=arg allows character
                constant expressions, but if a Hollerith constant
                is used as an actual argument, it is passed to the
                procedure as if it was an integer actual argument.
                The default is -qnoctyplss. If -qctypless is
                specified with no suboption, the default is
                -qctyplss=noarg.

         -qddim | -qnoddim
                Specifies that the bounds of pointee arrays are
                re-evaluated each time the arrays are referenced
                and removes some restrictions on the bounds
                expressions for pointee arrays.  The default is
                -qnoddim.

         -qdpc[=<e>] | -qnodpc
                Increases the precision of real constants, for
                maximum accuracy, when assigning real constants to
                DOUBLE PRECISION variables. -qdpc=<e> also promotes
                constants with an <e> exponent.  The default is
                -qnodpc.

         -qescape | -qnoescape
                Specifies whether the backslash is treated as an
                escape character in character strings, Hollerith
                constants, H edit descriptors, and character string
                edit descriptors.  The default is -qescape.

         -qextern=<procedure_names_list>
                Allows user-written procedures to be called instead
                of XL Fortran intrinsics. <procedure_names_list> is
                a colon-separated list of procedure names.  The
                procedure names are treated as if they appear in an
                EXTERNAL statement in each compilation unit being
                compiled.

         -qextname[=<names_list>] | -qnoextname
                Adds an underscore to the names of all global
                entities, which helps in porting programs from
                systems where this is a convention for mixed-
                language programs. <names_list> is a colon-
                separated list of global entity names.  The default
                is -qnoextname.

         -qinit=f90ptr
                Makes the initial association status of pointers
                disassociated instead of undefined. The default
                association status of pointers is undefined.

         -qintlog | -qnointlog
                Allows mixture of integer and logical data entities
                in expressions and statements. The default is
                -qnointlog.

         -qintsize={2|4|8}
                Sets the size (in bytes) of default INTEGER and
                LOGICAL data entities (that is, those for which no
                length or kind is specified).  The default is
                -qintsize=4.

         -qlog4 | -qnolog4
                Specifies whether the result of a logical operation
                with logical operands is a LOGICAL(4) or is a
                LOGICAL with the maximum length of the operands.
                The default is -qnolog4.

         -qmodule=mangle81
                Specifies that the compiler should use the XL
                Fortran Version 8.1 naming convention for non-
                intrinsic module files. This option allows you to
                produce modules and their associated object files
                with the Version 10.1 compiler and link these
                object files with others compiled with the Version
                8.1 compiler, or earlier.

         -qnullterm | -qnonullterm
                Appends a null character to each character constant
                expression that is passed as a dummy argument, to
                make it more convenient to pass strings to C
                functions. The default is -qnonullterm.

         -qonetrip | -qnoonetrip
                The long form of the -1 option. See -1 for details.
                The default is -qnoonetrip.

         -qport=<suboption> | -qnoport
                Increases flexibility when porting programs to XL
                Fortran, providing a number of options to
                accommodate Fortran language extensions.  The
                suboptions are:

                clogicals | noclogicals
                     Allows non-zero integers to be treated as true
                     when used as logicals. The change affects all
                     logical operators. This suboption only takes
                     effect if -qintlog is activated.  The default
                     is noclogicals.
                hexint | nohexint
                     Specifies that typeless constant hexadecimal
                     strings are converted to integers when passed
                     as actual arguments to the INT intrinsic
                     function. Typeless constant hexadecimal
                     strings which are not passed as actual
                     arguments to INT remain unaffected.  The
                     default is nohexint.
                mod | nomod
                     Relaxes existing constraints on the MOD
                     intrinsic function, allowing two arguments of
                     the same data type parameter to be of
                     different kind type parameters. The result
                     will be of the same type as the argument, but
                     with the larger kind type parameter value.
                     The default is nomod.
                nullarg | nonullarg
                     For an external or internal procedure
                     reference, this causes the compiler to treat
                     an empty argument (which is delimited by a
                     left parenthesis and a comma, two commas, or a
                     comma and a right parenthesis) as a null
                     argument. This suboption has no effect if the
                     argument list is empty.  The default is
                     nonullarg.
                sce | nosce
                     By default, the compiler performs short
                     circuit evaluation in selected logical
                     expressions using XL Fortran rules. Specifying
                     'sce' allows the compiler to use non-XL
                     Fortran rules. The compiler will perform short
                     circuit evaluation if the current rules allow
                     it.  The default is nosce.
                typestmt | notypestmt
                     The TYPE statement, which behaves in a manner
                     similar to the PRINT statement, is supported
                     whenever this option is specified. The default
                     is notypestmt.
                typlssarg | notyplssarg
                     Converts all typeless constants to default
                     integers if the constants are actual arguments
                     to an intrinsic procedure whose associated
                     dummy arguments are of integer type. Dummy
                     arguments associated with typeless actual
                     arguments of non-integer type remain
                     unaffected by this option.  The default is
                     notyplssarg.

                The default is -qnoport.

         -qposition={appendold|appendunknown}
                Positions the file pointer at the end of the file
                when data is written after an OPEN statement with
                no "POSITION=" specifier, and the corresponding
                "STATUS=" value (OLD or UNKNOWN) is specified.  The
                default depends on the I/O specifiers in the OPEN
                statement and on the compiler invocation command.
                The default is -qposition=appendold for the xlf,
                xlf_r, xlf_r7, and f77/fort77 commands and the
                defined Fortran 90 and Fortran 95 behaviors for the
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, xlf95_r7,
                f90 and f95 commands.

         -qqcount | -qnoqcount
                Accepts the character-count Q edit descriptor (Q)
                as well as the extended-precision Q edit descriptor
                (Qw.d). With -qnoqcount, all Q edit descriptors are
                interpreted as the extended-precision Q edit
                descriptor.  The default is -qnoqcount.

         -qrealsize=<bytes>
                Sets the default size of REAL, DOUBLE PRECISION,
                COMPLEX and DOUBLE COMPLEX values. The allowed
                values for <bytes> are 4 and 8.  The default is
                -qrealsize=4.

         -qsave[=<suboption>] | -qnosave
                Specifies the default storage class for local
                variables.  The suboptions are:

                all
                     The default storage class for all local
                     variables is STATIC. This is the default when
                     -qsave is specified without a suboption.
                defaultinit
                     The default storage class is STATIC for local
                     variables of derived type that have default
                     initialization specified.

                Specifying -qnosave sets the default storage class
                to AUTOMATIC.  The default is -qsave for xlf,
                xlf_r, xlf_r7, f77, or fort77 to duplicate the
                behavior of FORTRAN77 commands, and -qnosave
                otherwise.

         -qsclk[=<suboption>]
                Specifies the resolution that the SYSTEM_CLOCK
                intrinsic procedure uses in a program.  The
                suboptions are:

                centi
                     Uses centisecond resolution for the values
                     returned.
                micro
                     Uses microsecond resolution.

                The default is -qsclk=centi.

         -qswapomp | -qnoswapomp
                Specifies that the compiler should recognize and
                substitute OpenMP routines in XL Fortran programs.
                The default is -qswapomp.

         -qundef | -qnoundef
                The long form of the -u option. See -u for details.
                The default is -qnoundef.

         -qxlf77=<settings_list>
                Provides compatibility with Fortran 77 aspects of
                language semantics and I/O data format that have
                changed. Most of these changes are required by the
                Fortran 90 standard. <settings_list> is a colon-
                separated list of one or more of the following
                suboptions:

                blankpad | noblankpad
                     For internal, direct-access, and stream-access
                     files, uses a default setting equivalent to
                     pad='no'. This setting produces conversion
                     errors when reading from such a file if the
                     format requires more characters than the
                     record has, thus duplicating the XL Fortran
                     Version 2 behavior.
                gedit77 | nogedit77
                     Uses Fortran 77 semantics for the output of
                     REAL objects with the G edit descriptor.
                intarg | nointarg
                     Converts all the integer arguments of an
                     intrinsic procedure to the kind of the longest
                     argument, if they are of different kinds.
                intxor | nointxor
                     Treats .XOR. as a logical binary intrinsic
                     operator rather than a defined operator.
                leadzero | noleadzero
                     Produces a leading zero in real output under
                     the D, E, L, F and Q edit descriptors.
                oldboz | nooldboz
                     Turns blanks into zeros for data read by B, O,
                     and Z edit descriptors, regardless of the
                     "BLANK=" specifier or any BN or BZ control
                     edit descriptors.
                persistent | nopersistent
                     Saves the addresses of arguments to
                     subprograms with ENTRY statements in static
                     storage.
                softeof | nosofteof
                     Allows READ and WRITE operations when a unit
                     is positioned after its endfile record, unless
                     that position is the result of executing an
                     ENDFILE statement.

                The default suboptions are: blankpad, nogedit77,
                nointarg, nointxor, leadzero, nooldboz,
                nopersistent, and nosofteof for the f90, xlf90,
                xlf90_r, xlf90_r7, f95, xlf95, xlf95_r, and
                xlf95_r7 commands, and are the exact opposite for
                the xlf, xlf_r, xlf_r7, f77, and fort77 commands.

         -qxlf90=<settings_list>
                Provides backward compatibility with XL Fortran for
                AIX Version 5 and the Fortran 90 standard for
                certain aspects of the Fortran language.
                <settings_list> is a colon-separated list of one or
                both of the following suboptions:

                signedzero | nosignedzero
                     Determines how the SIGN(A,B) function handles
                     signed real 0.0. Prior to XL Fortran Version
                     6.1, SIGN(A,B) returned |A| when B=-0.0. This
                     behavior conformed with the Fortran 90
                     standard. Now, if you specify the
                     -qxlf90=signedzero compiler option, SIGN(A,B)
                     returns -|A| when B=-0.0. This behavior
                     conforms to the Fortran 95 standard and is
                     consistent with the IEEE standard for binary
                     floating-point arithmetic.
                autodealloc | noautodealloc
                     Determines whether the compiler deallocates
                     allocatable objects that are declared locally
                     without either the SAVE or the STATIC
                     attribute and have a status of currently
                     allocated when the subprogram terminates.

                The default suboptions are signedzero and
                autodealloc for the xlf95, xlf95_r, xlf95_r7 and
                f95 invocation commands. For all other invocation
                commands, the default suboptions are nosignedzero
                and noautodealloc.

  Linking Options
         -b64   The AIX operating system provides 64-bit shared
                object files in both libc.a and libm.a. In 64-bit
                mode, you can use the -b64 linker option to
                instruct ld to bind with 64-bit objects.

         -bdynamic, -bshared, -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                This is available on AIX 4.2 and above.

                -bdynamic
                     Specifies that shared objects are linked
                     dynamically.
                -bshared
                     Equivalent to -bdynamic.
                -bstatic
                     Specifies that shared objects are statically
                     linked into the output file.

                The default is -bdynamic.

         -bhalt:<error_level>
                Specifies the maximum error level that is allowed
                before the linker (ld) command halts. If any linker
                command has an error return value greater than the
                value that is specified by the <error_level>
                variable, linking stops.  The default value is 4,
                as specified in the configuration file.

         -bloadmap:<filename>
                Requests that a log of linker actions and messages
                be saved in file <filename>. You can use the log to
                help diagnose linking problems.

         -bmaxdata=<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint.  The default
                is -bmaxdata=0.

         -bmaxstack:<bytes>
                Specifies the maximum amount of space to reserve
                for the program stack segment for programs where
                the size of these regions is a constraint.

         -brtl | -bnortl
                Determines which algorithm will be used to find
                libraries that are specified with the -l option. If
                -brtl is specified, run-time linking is enabled.

         -bshared
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.
                This is equivalent to -bdynamic.

         -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.

         -L<dir>
                Searches in directory <dir> for libraries specified
                by -l<key>.

         -l<key>
                Searches the specified library file at link time,
                where <key> selects the library lib<key>.a.

  Compiler Customization Options
         -B<prefix>
                Determines a substitute path name for executable
                files used during compilation, such as the compiler
                of linker. <prefix> is the name of a directory
                where the alternative executable files reside. It
                is added to the beginning of the standard program
                names and must end in a slash (/). This option can
                be used in combination with the -t option, which
                determines which of these components are affected
                by -B.

         -F[<config_file>][:<stanza>]
                Specifies an alternative configuration file
                <config_file>, the command to be used (<stanza>)
                within the configuration file, or both. At least
                one of the arguments must be supplied.  The default
                stanza depends on the name of the command used to
                invoke the compiler.

         -P{v|k}[!]
                This option is obsolete and has no effect. Invokes
                the selected optimizing preprocessor.

         -P     Invokes the -Pv preprocessor before the compiler.

         -Pv    Invokes the -Pv preprocessor before the compiler.

         -Pk    Invokes the -Pk preprocessor before the compiler.

         -P!    Invokes the -Pv preprocessor only.

         -Pv!   Invokes the -Pv preprocessor only.

         -Pk!   Invokes the -Pk preprocessor only.

         -t<components_list>
                Applies the prefix from the -B option to the
                specified program, <components_list>, where
                <components_list> is a chain (with no separator
                character inbetween each <component>, ie: "-taFp")
                containing one or more of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

         -W<component>,<options_list>
                Passes the listed options to a component that is
                executed during compilation. <options_list> is a
                comma-separated list of one or more options, and
                <component> is one of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies compile-time rounding of constant
                floating-point expressions. It is equivalent to the
                -qieee option. <rounding_mode> is one of the
                following:

                n = Round to nearest
                m = Round toward minus infinity
                p = Round toward plus infinity
                z = Round toward zero

                The default is -yn.

         -qfloat=<suboptions_list>
                Determines different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using an inline sequence of
                     code instead of a call to a library function.
                fold | nofold
                     Evaluates constant floating-point expressions
                     at compile time.
                hsflt | nohsflt
                     Speeds up calculations by removing range-
                     checking on single-precision float results,
                     and on conversions from floating-point to
                     integer.
                hssngl | nohssngl
                     Speeds up calculations in a safer way than
                     hsflt, by rounding single-precision
                     expressions only when the results are stored
                     into REAL(4) memory locations
                maf | nomaf
                     Generates multiply-add instructions where
                     appropriate.
                nans | nonans
                     Allows you to use the -qflttrap=invalid:enable
                     option to detect and deal with exception
                     conditions that involve signaling NaN (not-a-
                     number) values.
                rndsngl | norndsngl
                     Rounds the result of each single-precision
                     (REAL(4)) operation to single-precision,
                     rather than waiting until the full expression
                     is evaluated. It sacrifices speed for
                     consistency with results from similar
                     calculations on other types of computers.
                rrm | norrm
                     Turns off compiler optimizations that require
                     the rounding mode to be the default, round-
                     to-nearest, at run time.
                rsqrt | norsqrt
                     Allows the optimizer to change a division by
                     the result of a square root operation into a
                     multiply by the reciprocal of the square root.
                strictnmaf | nostrictnmaf
                     Turns off floating-point transformations that
                     are used to introduce negative MAF
                     instructions, as these transformations do not
                     preserve the sign of a zero value.
                The default active suboptions are: nofltint, fold,
                nohsflt, nohssngl, maf, nonans, norelax, norndsngl,
                norrm, norsqrt, and nostrictnmaf.

         -qieee=<mode>
                Specifies the rounding mode for the compiler to use
                when evaluating constant floating-point expressions
                at compile time, where <mode> is one of:

                near = Round to nearest representable number
                minus = Round toward minus infinity
                plus = Round toward plus infinity
                zero = Round toward zero

                The default is -qieee=near.

         -qstrictieeemod | -qnostrictieeemod
                Specifies that the compiler will adhere to the
                Fortran 2003 IEEE arithmetic rules for the
                ieee_arithmetic and ieee_exceptions intrinsic
                modules.  The default is -qstrictieeemod.

  SEE ALSO
         xlfndi(1), showpdf(1), cleanpdf(1), mergepdf(1),
         resetpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/fortran/xlfortran/library/
         www.ibm.com/software/awdtools/fortran/xlfortran/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL Fortran Enterprise Edition V10.1 for AIX(R)

         5724-M13

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.









































configure:9201: $? = 249
configure:9203: xlf90 -V </dev/null >&5
export XL_CONFIG=/etc/xlf.cfg:xlf90 
pg /usr/lpp/xlf/bin/default_msg/xlf.txt 



  xlf(1)                 IBM (October 2005)                  xlf(1)



  NAME
         xlf, xlf90, xlf95, xlf_r, xlf90_r, xlf95_r, f90, f95,
         xlf_r7, xlf90_r7, xlf95_r7, f77, fort77 - invoke the IBM
         XL Fortran compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

  DESCRIPTION
         xlf and related invocation commands compile Fortran source
         files.  They also process assembler source files and
         object files. Unless you specify the -c option, these
         commands call the link editor to produce a single object
         file.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/xlf.cfg).  For more information,
         refer to the XL Fortran Enterprise Edition Compiler
         Reference.

         The input file may have any of the following suffixes:
          .f - Fortran source file
          .f77 or .F77 - Fortran source file (fixed form) using
               f77 stanza configuration
          .f90 or .F90 - Fortran source file (free form) using
               xlf90 configuration
          .f95 or .F95 - Fortran source file (free form) using
               xlf95 configuration
          .o or .a - object file for ld command
          .s - assembler source file
          .F - Fortran source file with cpp preprocessor directives

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -I<dir>
                Adds a directory to the search path for include
                files and .mod files. If XL Fortran calls cpp, this
                option adds a directory to the search path for
                #include files. Before checking the default
                directories for include and .mod files, the
                compiler checks each directory in the search path.
                For include files, this path is only used if the
                file name in an INCLUDE line is not provided with
                an absolute path. By default, the following
                directories are searched in the following order:

                1) The current directory (where the compiler is
                executed)
                2) The directory where the source file is located

         -k     Specifies that the program is in free source form.
                This is the short form of -qfree=f90.

         -U     Makes the compiler case-sensitive to identifier
                names. By default the compiler interprets all names
                as if they were lower-case.

         -qci=<nums_list>
                Activates the specified INCLUDE lines. <nums_list>
                is a colon-separated list of identification numbers
                (from 1 to 255) of conditional includes.

         -qcr | -qnocr
                Allows you to control how the compiler interprets
                the CR (carriage return) character.  This allows
                you to compile code written using a MAC OS X or
                DOS/Windows editor.  The default is -qcr.

         -qdirective[=<list>] | -qnodirective[=<list>]
                Specifies target strings to be recognized in a
                comment directive. <list> is a colon-separated list
                of directives. If -qdirective is specified without
                any directives, it turns on the default trigger
                constant IBM* if it has been turned off by a
                previous -qnodirective.  The default is
                -qnodirective.

         -qdlines | -qnodlines
                This is the long form of the -D option. See -D for
                more information.  The default is -qnodlines.

         -qfixed[=<right_margin>]
                Indicates that the input source program is in fixed
                source form and optionally specifies the maximum
                line length, <right_margin>. The maximum
                <right_margin> value is 132.  The default is
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77
                invocation commands, and -qfree=f90 for f90, f95,
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, and
                xlf95_r7.

         -qfree[={f90|ibm}]
                Indicates that the source code is in free source
                form. The 'ibm' and 'f90' suboptions specify
                compatibility with the free source form defined for
                VS Fortran and Fortran 90, respectively. Note that
                the free source form defined for Fortran 90 also
                applies to Fortran 95.  The default is -qfree=f90
                for f90, f95, xlf90, xlf90_r, xlf90_r7, xlf95,
                xlf95_r, and xlf95_r7 invocation commands, and
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77.

         -qmbcs | -qnombcs
                Indicates to the compiler whether character literal
                constants, Hollerith constants, H edit descriptors,
                and character string edit descriptors can contain
                Multibyte Character Set (MBCS) or Unicode
                characters. The default is -qnombcs.

         -qmixed | -qnomixed
                The long form of the -U option. Makes the compiler
                case-sensitive to identifier names. The default is
                -qnomixed.

         -qsuffix=<option>=<suffix>
                Specifies the source file suffix, <suffix>, on the
                command line instead of in the .cfg file, where
                <option> can be:

                f
                     Specifies that <suffix> is the new source file
                     suffix.
                o
                     Specifies that <suffix> is the new object-file
                     suffix.
                s
                     Specifies that <suffix> is the new assembler
                     source file suffix.
                cpp
                     Specifies that <suffix> is the new
                     preprocessor source file suffix.

  Output Control Options
         -c     Produces an object file instead of an executable
                file.  Prevents the completed object file from
                being sent to the ld command for link-editing. With
                this option, the output is a .o file for each
                source file.

         -d     Causes preprocessed source files that are produced
                by cpp to be kept rather than to be deleted. By
                default temporary files produced by cpp are
                deleted.

         -o <name>
                Specifies a name for the output object, executable,
                or assembler source file.  The default name is
                a.out for executable files. The default name for an
                object source file is the same as the source file
                except that it has a '.o' extension.

         -q32   Selects 32-bit mode compilation mode. The -q32 and
                -qarch options determine the target machines that
                the 32-bit executable will run on. The default is
                -q32.

         -q64[=<suboption>]
                Selects 64-bit compilation mode. The -q64 option
                indicates that the object module will be created in
                64-bit object format and that the 64-bit
                instruction set will be generated. Note that you
                may compile in a 32-bit environment to create 64-
                bit objects, but you must link them in a 64-bit
                environment with the -q64 option. Use -q32 and -q64
                options, along with the -qarch and -qtune compiler
                options, to optimize the output of the compiler to
                the architecture on which that output will be used.
                The suboptions are:

                largetype
                     The object file will use the 64-bit Large Data
                     Type (LDT) ABI. This object file may only be
                     used on versions of AIX greater than or equal
                     to 5.0.

         -qmoddir=<directory>
                Specifies the location for any .mod files that the
                compiler writes. By default .mod files are placed
                in the current directory.

         -qpic[=<suboption>] | -qnopic
                Generates Position Independent Code (PIC) that can
                be used in shared libraries.  The suboptions are:

                large
                     Allows the size of the Table of Contents to be
                     larger than 64K. This suboption allows for
                     more addresses to be stored in the Table of
                     Contents and generates larger code.
                small
                     Assumes that the size of the Table of Contents
                     can be at most 64K.

                The default is -qpic=small.

  Optimization Options
         -NS<bytes>
                Specifies the size (in bytes) of the register spill
                space; the internal program storage areas used by
                the optimizer for register spills to storage.  The
                default is -NS512.

         -O[<level>]
                Specifies whether to optimize code during
                compilation and, if so, at which level. -O<level>
                is equivalent to -qoptimize=<level>. <level> can
                be:

                (not specified)
                     This is equivalent to -O2.
                0
                     Almost all optimizations are disabled. This is
                     equivalent to -qnooptimize.
                1
                     Reserved for future use. Ignored by compiler.
                2
                     Performs a set of optimizations that are
                     intended to offer improved performance without
                     an unreasonable increase in time or storage
                     that is required for compilation.
                3
                     Performs additional optimizations that are
                     memory intensive, compile-time intensive, and
                     may change the semantics of the program
                     slightly, unless -qstrict is specified. We
                     recommend these optimizations when the desire
                     for run-time speed improvements outweighs the
                     concern for limiting compile-time resources.
                     This level of optimization also affects the
                     setting of the -qfloat option, turning on the
                     'fltint' and 'rsqrt' suboptions by default,
                     and setting -qmaxmem=-1.  This option implies
                     -qhot=level=0.
                4
                     Aggressively optimizes the source program,
                     trading off additional compile time for
                     potential improvements in the generated code.
                     You can specify the option at compile time or
                     at link time. if you specify it at link time,
                     it will have no effect unless you also specify
                     it at compile time for at least the file that
                     contains the main program. -O4 implies the
                     following other options:
                     -qhot
                     -qipa
                     -O3
                     -qarch=auto
                     -qtune=auto
                     -qcache=auto
                5
                     Performs all optimizations from -O4, and also
                     sets -qipa=level=2 to perform full inter-
                     procedural data flow and alias analysis.

                -O4 and -O5 perform whole-program analysis and
                should be specified at both compilation and link
                time to have maximal effect.  The default is -O0.

         -p[g]  Sets up the object file for profiling. Specifying
                '-pg' will produce more extensive statistics. The
                default is no profiling.

         -Q[<suboption>]
                Specifies whether Fortran 90 or Fortran 95
                procedures are inlined and/or the names of
                particular procedures that should or should not be
                inlined. names is a list of procedure names that
                are separated by colons. This option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions,
                     subject to limits on the number of inlined
                     calls and the amount of code size increase as
                     a result.
                -Q!
                     Turns off inlining.
                -Q+<names_list>
                     Inlines the functions listed in <names_list>
                     and any other appropriate functions, where
                     <names_list> is a colon-separated list.
                -Q-<names_list>
                     Does not inline functions listed in
                     <names_list>, where <names_list> is a colon-
                     separated list. All other appropriate
                     functions are inlined.

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qalias=<suboptions_list>
                Indicates whether a program contains certain
                categories of aliasing. The compiler limits the
                scope of some optimizations when there is a
                possibility that different names are aliases for
                the same storage locations. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                aryovrlp | noaryovrlp
                     Indicates whether the compilation units
                     contain any array assignments between
                     storage-associated arrays. If not, specify
                     noaryovrlp to improve performance.
                intptr | nointptr
                     Indicates whether the compilation units
                     contain any integer POINTER statements. If so,
                     specify intptr.
                pteovrlp | nopteovrlp
                     Indicates whether any pointee variables may be
                     used to refer to any data objects that are not
                     pointee variables, or whether two pointee
                     variables may be used to refer to the same
                     storage location. If not, specify nopteovrlp.
                std | nostd
                     Indicates whether the compilation units
                     contain any non-standard aliasing (see
                     Compiler Reference for more information). If
                     so, specify nostd.  (-qalias=nostd replaces
                     the obsolete -qxflag=xalias option.)

                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90 and f95 commands, the default
                suboptions are: aryovrlp, nointptr, pteovrlp, and
                std. For the xlf, xlf_r, xlf_r7, f77, and fort77
                commands, the default suboptions are: aryovrlp,
                intptr, pteovrlp, and std.

         -qalign=<suboptions_list>
                Specifies the alignment of data objects in storage
                to avoid performance problems with misaligned data.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                4k | no4k
                     Specifies whether large arrays and structures
                     (at least 4096 bytes in size) will be aligned
                     on a 4K (4096-byte, or page) boundary.  Use of
                     this option may help to improve the
                     performance of programs using data striping.
                bindc=<suboption>
                     Specifies that the alignment and padding for
                     an XL Fortran derived type with the BIND(C)
                     attribute are compatible with a C struct type
                     that is compiled with the corresponding XL C
                     alignment option. The compatible alignment
                     options are:
                     -qalign=bindc=bit_packed
                     -qalign=bindc={full|power}
                     -qalign=bindc=packed
                     -qalign=bindc={twobyte|mac68k}
                     -qalign=bindc=natural
                     Each of these "-qalign=bindc=" sub-suboptions
                     is equivalent to the XL C "-qalign=" suboption
                     of the same name.  (ie: For
                     -qalign=bindc=bit_packed, the corresponding XL
                     C option is -qalign=bit_packed)
                struct=<option>
                     Specifies how objects or arrays of a derived
                     type (declared using a record structure) are
                     stored, and whether or not padding is used
                     between components. The options are:
                     natural
                          Objects of a derived type are stored with
                          sufficient padding such that components
                          will be stored on their natural alignment
                          boundaries, unless storage association
                          requires otherwise.
                     packed
                          Objects of a derived type are stored with
                          no padding between components, other than
                          any padding represented by %FILL
                          components.
                     port
                          Storage padding is the same as described
                          above for the struct=natural suboption,
                          except that the alignment of components
                          of type complex is the same as the
                          alignment of components of type real of
                          the same kind. The padding for an object
                          that is immediately followed by a union
                          is inserted at the beginning of the first
                          map component for each map in that union.

                The default activated suboptions are: no4k,
                struct=natural, and bindc=power.

         -qarch=<suboption>
                Specifies which instructions the compiler can
                generate.  The suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                com
                     You can run the executable file that the
                     compiler generated on any hardware platform
                     supported by the compiler, because the file
                     contains only instructions that are common to
                     all machines.
                p2sc
                     The executable file can be executed on any
                     POWER2 Super Chip hardware platform.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms. Using -q64 with ppc upgrades the
                     architecture to ppc64grsq.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.  In 64-bit mode,
                     produces object code containing optional
                     graphics instructions that will run on 64-bit
                     PowerPC platforms, but not on 32-bit-only
                     platforms.  Using -q64 with ppcgr upgrades the
                     architecture to ppc64grsq.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                pwr
                     Produces an object that contains instructions
                     that run on any of the POWER or POWER2
                     hardware platforms.
                pwr2s
                     The executable file can be executed on any
                     desktop implementation of the POWER2 chip.
                pwr2
                     Produces an object that contains instructions
                     that run on the POWER2 hardware platforms.
                pwrx
                     Equivalent to pwr2.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3, POWER4, POWER5,
                     POWER5+ or PowerPC 970 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4, POWER5, POWER5+ or
                     PowerPC 970 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 or POWER5+ hardware
                     platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on any POWER5+ hardware platform.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.
                601
                     Produces an object that contains instructions
                     that run on PowerPC 601 systems.
                603
                     Produces an object that contains instructions
                     that run on PowerPC 603 systems.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                ppc64v
                     Generates instructions for any 64-bit PowerPC
                     processor (like PowerPC 970) with VMX.

                The default is -qarch=com.

         -qassert=<suboptions_list>
                Provides information about the program to help
                fine-tune optimizations. <suboptions_list> is a
                colon-separated list of one or both of the
                following suboptions:

                deps | nodeps
                     Loops can contain loop-carried dependencies.
                itercnt=<n>
                     The iteration count of a typical loop is <n>.

                The default is -qassert=deps:itercnt=1024.

         -qcache=<suboptions_list>
                Specifies the cache configuration for a specific
                execution machine. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                assoc=<n>
                     Specifies the set-associativity of the cache:
                     0   = Directly-mapped
                     1   = Fully associative
                     (n > 1) = <n>-way set-associative
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty resulting
                     from a cache miss.
                level=<level>
                     Specifies which level of cache is affected:
                     1 = Basic cache
                     2 = Level-2 cache, or the table lookaside
                     buffer (TLB) if the machine has no level-2
                     cache
                     3 = TLB, in a machine that does have a level-2
                     cache
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<type>
                     Specifies the type of cache that the settings
                     apply to:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The default is determined by the -qtune and -qarch
                settings.

         -qcompact | -qnocompact
                Reduces optimizations that increase code size.  The
                default is -qnocompact.

         -qdirectstorage | -qnodirectstorage
                Specifies that a compilation unit might reference
                write-through-enabled or cache-inhibited storage.
                The default is -qnodirectstorage.

         -qenablevmx | -qnoenablevmx
                Enables generation of Vector Multimedia Extension
                (VMX) instructions.  The default is -qnoenablevmx.

         -qessl | -qnoessl
                Allows the use of the Engineering and Scientific
                Subroutine Library (ESSL) routines in place of
                Fortran 90 intrinsic procedures.  The default is
                -qnoessl.

         -qfdpr | -qnofdpr
                Provides object files with information that the AIX
                Feedback Directed Program Restructuring (fdpr)
                performance-tuning utility needs to optimize the
                resulting executable file.  The default is
                -qnofdpr.

         -qhot[=<suboptions>] | -qnohot
                Performs high-order loop analysis and
                transformations during optimization. This option is
                a powerful alternative to hand-tuning that provides
                opportunities to optimize loops and array language.
                The suboptions are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value. When <n> is not
                     specified, the compiler will pad any arrays
                     where it infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. See the XL Fortran
                     Compiler Reference for more information.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a VMX (Vector Multimedia Extension)
                     instruction.  If you specify -qhot=nosimd, the
                     compiler performs optimizations on loops and
                     arrays, but avoids replacing certain code with
                     VMX instructions.
                vector | novector
                     Specifies whether to allow the compiler to
                     optimize by replacing code with calls to
                     vector library routines.  Only takes effect
                     when specified with -qnostrict or -O3 or
                     higher optimization level.

                The default is -qnohot. If -qhot is specified
                without parameters, the default is -qhot=vector.

         -qipa[=<suboptions_list>] | -qnoipa
                Enhances -O optimization by performing detailed
                analysis across procedures. Optimization level -O2
                or higher is required when using -qipa.
                <suboptions_list> is a colon-separated list of
                suboptions. Regular expressions are supported when
                specifying <procedure_names_list> in the following
                -qipa suboptions: exits, inline, noinline, lowfreq,
                pure, safe, and unknown. <procedure_names_list> is
                a comma-separated list. The suboptions are:

                exits=<procedure_names_list>
                     Specifies a selected set of procedures which
                     always end the program.
                clonearch=<architecture_list> | noclonearch
                     Allows you to specify multiple architectures
                     in the event that you want to compile your
                     application for multiple architectures with a
                     single binary file. <architecture_list> is a
                     comma-separated list of one or more of the
                     following architectures: pwr4, pwr5, ppc970,
                     and pwr5x. This must be specified during link
                     time.  The default is noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of the mangled names of the functions that you
                     wish to clone (or not clone). Please note that
                     this suboption has no effect unless
                     -qipa=clonearch=<arch> is specified. You can
                     use regular expression syntax when specifying
                     function names.  The default is nocloneproc.
                inline=<options_list>
                     Specifies a colon-separated list of inline
                     options, which are as follows:
                     auto | noauto
                          Specifies whether to automatically
                          perform inline expansion.  The default is
                          auto.
                     limit=<n>
                          Changes the size limits that the
                          inline=auto option uses to determine how
                          much inline expansion to do. <n> is the
                          optimizers approximation of the number of
                          bytes of code that will be generated.
                     <procedure_names_list>
                          Specifies the procedures to attempt to
                          inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This argument is
                          implemented only when inline=auto is on.
                noinline=<procedure_names_list>
                     Specifies the procedures which are not to be
                     inlined.
                isolated=<procedure_names_list>
                     Specifies the procedures that are not compiled
                     with -qipa and do not directly refer to any
                     global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization to perform:
                     0
                          Performs minimal inter-procedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full inter-procedural data flow and alias
                          analysis.
                     The default level is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, in the event that an object
                     listing has been requested using the -qlist or
                     -qipa=list option. The default name is
                     "a.lst". Specifying 'long' or 'short'
                     determines which listing sections will be
                     included. The default is short.
                lowfreq=<procedure_names_list>
                     Specifies the procedures that are likely to be
                     called infrequently during the course of a
                     typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the interprocedural behavior for
                     procedures not compiled with -qipa.  The
                     default is 'unknown'.
                object | noobject
                     Includes standard object code in the object
                     files. If the noobject option is specified, it
                     can substantially reduce overall compilation
                     time by not generating object code during the
                     first IPA phase. The default is object. Note,
                     this is a compile-time suboption.
                partition={small|medium|large}
                     Specifies the size of the regions within the
                     program to analyze. Larger partitions contain
                     more procedures, which result in better
                     interprocedural analysis but require more
                     storage to optimize.  The default is medium.
                pdfname=<filename>
                     Specifies the name of the profile data file
                     that contains the PDF profiling information.
                     The default filename is __pdf.
                pure=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "pure" must be "isolated" and
                     "safe". It must not alter the internal state
                     nor have side-effects, which are defined as
                     potentially altering any data object visible
                     to the caller.
                safe=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "safe" may modify global
                     variables and dummy arguments.
                stdexits | nostdexits
                     Specifies that certain predefined routines can
                     be optimized as with the exits suboption. The
                     procedures are abort, exit, _exit, and
                     _assert.  The default is nostdexits.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure specified
                     as "unknown" may make calls to other parts of
                     the program compiled with -qipa and modify
                     global variables and dummy arguments.

                Options intended for use by the link-time phase of
                -qipa are -qlibansi, -qlibessl, -qlibposix and
                -qthreaded.  The default is -qnoipa.

         -qkeepparm | -qnokeepparm
                Ensures that the incoming parameters are stored on
                the stack even when optimizing. This may negatively
                impact execution performance. This option then
                provides access to the values of incoming
                parameters to tools, such as debuggers, simply by
                preserving those values on the stack.  The default
                is -qnokeepparm.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large 16 MB pages provided on POWER4 and higher
                based systems.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are in fact the library
                functions.  The default is -qnolibansi.

         -qlibessl | -qnolibessl
                Assumes that all functions with the name of an ESSL
                defined library function are, in fact, the library
                functions.  The default is -qnolibessl.

         -qlibposix | -qnolibposix
                Assumes that all functions with the name of a POSIX
                1003.1 defined library function are, in fact, the
                system functions.  The default is -qnolibposix.

         -qmaxmem=<kbytes>
                Limits the amount of memory that the compiler
                allocates while performing specific, memory-
                intensive optimizations. If <kbytes> is -1, the
                compiler will take as much memory as it needs
                without checking for limits. The default is
                -qmaxmem=2048 when using optimization level -O2,
                and -qmaxmem=-1 when using -O3 or greater.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 Produces an object that is instrumented to collect
                run-time execution information. This is phase 1 of
                the profile-directed feedback optimization process.

         -qpdf2 Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

         -qprefetch | -qnoprefetch
                Automatically inserts prefetch instructions where
                the optimizer perceives a benefit.  The default is
                -qprefetch.

         -qrecur | -qnorecur
                Not recommended. Allows external subprograms to be
                called recursively. For new programs, use the
                RECURSIVE keyword, which provides a standard-
                conforming way of using recursive procedures.  The
                default is -qnorecur.

         -qshowpdf | -qnoshowpdf
                Adds additional call and block count profiling
                information to an executable. This option is used
                together with the -qpdf1 option.  The default is
                -qnoshowpdf.

         -qsmallstack[=<suboption>] | -qnosmallstack
                Specifies that the compiler will minimize stack
                usage where possible. This option can take the
                form:

                -qsmallstack
                     Enables only general small stack
                     transformations.
                -qsmallstack=dynlenonheap
                     Asserts that automatic variables which are
                     dynamically-sized are allocated from the heap
                     and enables general small stack
                     transformations.
                -qsmallstack=nodynlenonheap
                     Disables dynamic-length variable allocation.
                -qnosmallstack
                     Disables only the general small stack
                     transformations.

                The default is -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Specifies that code should be produced for an SMP
                system.  <suboptions_list> is a colon-separated
                list of one or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization.
                nested_par | nonested_par
                     Specifies that prescriptive nested parallel
                     constructs should be parallelized by the
                     compiler.
                omp | noomp
                     Enforces compliance with the OpenMP Fortran
                     API.
                opt | noopt
                     Controls optimization for parallelization.
                     -qsmp=noopt specifies that the compiler should
                     do the least amount of optimization that is
                     required to parallelize the code and preserve
                     maximum debugability.
                rec_locks | norec_locks
                     Allows recursive locks to be used to avoid
                     problems associated with CRITICAL constructs.
                     If -qsmp=norec_locks is specified, recursive
                     locks will not be used to implement critical
                     sections.
                schedule=<suboptions>
                     The schedule suboption can take any of the
                     following sub-suboptions:
                     affinity[=<n>]
                     dynamic[=<n>]
                     guided[=<n>]
                     runtime
                     static[=<n>]
                     For their descriptions, refer to the XL
                     Fortran Compiler Reference.
                threshold=<n>
                     Controls the amount of automatic loop
                     parallelization that occurs. The value of <n>
                     represents the lower limit allowed for
                     parallelization of a loop, based on the level
                     of "work" present in a loop.

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, opt, noomp, norec_locks, nonested_par,
                schedule=runtime, and threshold=100.

         -qspillsize=<bytes>
                The long form of -NS. See the -NS option.  The
                default is -qspillsize=512.

         -qstacktemp=<num>
                Determines where to allocate applicable compiler
                temporaries at run time. The allocation depends on
                the value of <num>. The values are:

                0
                     Indicates that the compiler will decide
                     whether to allocate the applicable compiler
                     temporaries on the heap or the stack.
                -1
                     Indicates that applicable compiler temporaries
                     are to be always allocated on the stack. This
                     is the best-performing setting but uses the
                     most amount of stack storage.
                (1 or greater)
                     Indicates that applicable compiler temporaries
                     less than this value (bytes) should be
                     allocated on the stack and those greater than
                     or equal to this value should be allocated on
                     the heap.

                The default is -qstacktemp=0.

         -qstrict | -qnostrict
                Ensures that optimizations done by the -O3 and
                greater (and optionally -O2) options do not alter
                the semantics of a program. This option is ignored
                for -qnoopt.  For -O3 and greater, the default is
                -qnostrict. Otherwise the default is -qstrict.

         -qstrict_induction | -qnostrict_induction
                Prevents the compiler from performing induction
                (loop counter) variable optimizations that could
                alter the semantics of a program.  The default is
                -qnostrict_induction.

         -qthreaded
                Asserts that the compiler will generate thread-safe
                code when generating its own code or allocating
                compiler-created temporary data. User-written code
                that is algorithmically not thread-safe is
                unaffected by this option and will remain non-
                thread-safe. The default is -qthreaded when using
                xlf_r, xlf_r7, xlf90_r, xlf90_r7, xlf95_r, or
                xlf95_r7 invocation commands.

         -qtune=<suboption>
                Tunes instruction selection, scheduling, and other
                implementation-dependent performance enhancements
                for a specific implementation of a hardware
                architecture.  -qtune will not alter the ability of
                a program to run on a processor but will produce
                optimal code sequences tuned to a particular
                processor.  The suboptions are:

                auto
                     Automatically detects the specific processor
                     type of the compiling machine and produces an
                     object optimized for that processor.
                601
                     Produces an object optimized for all the
                     PowerPC 601 processors.
                603
                     Produces an object optimized for all the
                     PowerPC 603 processors.
                604
                     Produces an object optimized for all the
                     PowerPC 604 processors.
                pwr
                     Produces an object optimized for the POWER
                     hardware platforms.
                p2sc
                     The optimizations are tuned for the POWER2
                     Super Chip.
                pwr2
                     Produces an object optimized for the POWER2
                     hardware platforms.
                pwrx
                     This is equivalent to pwr2.
                pwr2s
                     The optimizations are tuned for the desktop
                     implementation of the POWER2 architecture,
                     which has a narrower processor-to-memory bus
                     than other POWER2 implementations.
                pwr3
                     Produces an object optimized for the POWER3
                     hardware platforms.
                pwr4
                     Produces an object optimized for the POWER4
                     hardware platforms.
                pwr5
                     Produces an object optimized for the POWER5
                     hardware platforms.
                rs64a
                     Produces an object optimized for the RS64I
                     processor.
                rs64b
                     Produces an object optimized for the RS64II
                     processor.
                rs64c
                     Produces an object optimized for the RS64III
                     processor.
                ppc970
                     Produces an object optimized for PowerPC 970
                     processors.

                The compiler uses -qtune setting that is compatible
                with the target architecture, which is controlled
                by the -qarch, -q32, and -q64 options.  The default
                setting is determined by the setting of -qarch.

         -qunroll[={auto|yes}] | -qnounroll
                Specifies whether unrolling DO loops is allowed in
                a program. Unrolling is allowed on outer and inner
                DO loops.  The suboptions are:

                auto
                     The compiler performs basic loop unrolling.
                yes
                     The compiler looks for more opportunities to
                     perform loop unrolling than is done with the
                     -qunroll=auto option. Specifying -qunroll with
                     no suboptions is equivalent to -qunroll=yes.

                The default is -qunroll=auto.

         -qunwind | -qnounwind
                Specifies that the compiler will preserve the
                default behavior for saves and restores to volatile
                registers during a procedure call.  If you specify
                -qnounwind, the compiler rearranges subprograms to
                minimize saves and restores to volatile registers.
                This rearrangement may make it impossible for the
                program or debuggers to walk through or "unwind"
                subprogram stack frame chains.  The default is
                -qunwind.

         -qvecnvol | -qnovecnvol
                Asserts that the compiled application will use both
                volatile and non-volatile vector registers. You
                should use this option only after understanding
                interoperability with old binaries. If you are
                compiling C/C++ code in Fortran which calls any of
                the following subroutines: setjmp(),longjmp(),
                sigsetjmp(), siglongjmp(), _setjmp(), _longjmp(),
                getcontext(), setcontext(), makecontext(), and
                swapcontext(), then you should set -qnovecnvol.
                bos.adt.include version 5.3.0.30 or greater should
                be installed to use -qvecnvol on the host system.
                The default is -qnovecnvol.

         -qzerosize | -qnozerosize
                Improves performance of Fortran 77 and some Fortran
                90 and Fortran 95 programs by preventing checking
                for zero-sized character strings and arrays.
                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90, and f95 commands, the default is
                -qzerosize.  For the xlf, xlf_r, xlf_r7, f77, and
                fort77 commands, the default is -qnozerosize.

  Error Checking and Debugging Options
         -C     Checks each reference to an array element, array
                section, or character substring for correctness.
                This is the short form of -qcheck.

         -D     Specifies whether the compiler compiles fixed
                source form lines with a D in column 1 or treats
                them as comments. Please note that in order to pass
                C-style -D macro definitions to the C preprocessor
                (e.g. compiling a file that ends with .F) use the
                -W option. For example:
                -WF,-DDEFINE_THIS
                -D is the short form of -qdlines.

         -g     Generates debug information for use by a symbolic
                debugger.

         -qcheck | -qnocheck
                The long form of the -C option. See -C for details.
                The default is -qnocheck.

         -qdbg | -qnodbg
                The long form of the -g option. See -g for details.
                The default is -qnodbg.

         -qdpcl | -qnodpcl
                Generates symbols that tools based on the Dynamic
                Probe Class Library (DPCL) API can use to see the
                structure of an executable file. You must also
                specify the -g option when you specify -qdpcl.
                This option has no effect when optimization (-O) is
                enabled. The default is -qnodpcl.

         -qextchk | -qnoextchk
                Sets up type-checking information for common
                blocks, procedure definitions, procedure
                references, and module data. Later, the linker can
                detect mismatches across compilation units using
                this information.  The default is -qnoextchk.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Determines what types of floating-point exception
                conditions to detect at run time. The program
                receives a SIGTRAP signal when the corresponding
                exception occurs.  <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                enable
                     Turn on checking for the specified exceptions
                     in the main program so that the exceptions
                     generate SIGTRAP signals.
                imprecise
                     Only check for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detect and trap on floating-point inexact, if
                     exception checking is enabled.
                invalid
                     Detect and trap on floating-point invalid
                     operations.
                nanq
                     Detect and trap all quiet not-a-number (NaNQ)
                     values and signaling not-a-number (NaNS)
                     values.
                overflow
                     Detect and trap on floating-point overflow.
                underflow
                     Detect and trap on floating-point underflow.
                zerodivide
                     Detect and trap on floating-point division by
                     zero.

                The default is -qnoflttrap. When -qflttrap is
                specified with no suboptions, the default activated
                suboptions are: overflow, underflow, zerodivide,
                invalid, and inexact.

         -qfullpath | -qnofullpath
                Records the full (or absolute) path names of source
                and include files in object files compiled with
                debugging information (-g option).  The default is
                -qnofullpath.

         -qhalt=<sev>
                Stops before producing any object, executable, or
                assembler source files if the maximum severity of
                compile-time messages equals or exceeds the
                specified severity <sev>, where the severity levels
                are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                The default is -qhalt=s.

         -qinitauto[=<hex_value>] | -qnoinitauto
                Initializes each byte or word (4 bytes) of storage
                for automatic variables to a specific value,
                depending on the length specified in <hex_value>.
                This helps you to locate variables that are
                referenced before they are defined. <hex_value> is
                a 1 to 8 digit hexadecimal number.  The default is
                -qnoinitauto. If you specify -qinitauto without a
                <hex_value>, the compiler initializes the value of
                each byte of automatic storage to zero. This option
                should be used for debugging purposes only.

         -qlanglvl=<suboption>
                Determines which language standard (or
                subset/superset of a standard) to check against for
                nonconformance. This option will only produce
                messages; all code valid in extended mode will
                compile regardless of which suboption is specified.
                The suboptions are:

                77std
                     Accepts the language specified by the ANSI
                     Fortran 77 standard.
                90std
                     Accepts the language specified by the ISO
                     Fortran 90 standard.
                90pure
                     Same as 90std, except that it reports errors
                     for any obsolescent Fortran 90 features used.
                90ext
                     Obsolete suboption that is equivalent to
                     extended.
                95std
                     Accepts the language specified by the ISO
                     Fortran 95 standard.
                95pure
                     Same as 95std, except that it also reports
                     errors for any obsolescent Fortran 95 features
                     used.
                2003std
                     Accepts the language that the ISO Fortran 95
                     standard specifies, as well as all Fortran
                     2003 features supported by XL Fortran, and
                     reports anything else as an error.
                2003pure
                     The same as 2003std except that it also
                     reports errors for any obsolescent Fortran
                     2003 features used.
                extended
                     Accepts the full Fortran 95 language standard,
                     all Fortran 2003 features supported by XL
                     Fortran, and all extensions, effectively
                     turning off language-level checking.

                The default is -qlanglvl=extended.

         -qlinedebug | -qnolinedebug
                Generates line number and source file name
                information for the debugger. This option produces
                minimal debugging information, so the resulting
                object size is smaller than what is produced if the
                -g debugging option is specified. The default is
                -qnolinedebug.

         -qobject | -qnoobject
                Specifies whether to produce an object file or to
                stop immediately after checking the syntax of the
                source files.  The default is -qobject.

         -qsaa | -qnosaa
                Checks for conformance to the SAA Fortran language
                definition. It identifies nonconforming source code
                and also options that allow such nonconformances.
                The default is -qnosaa.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, and other information, in the
                corresponding object file. The compilation must
                produce an object file for this option to take
                effect.  The default is -qnosaveopt.

         -qsigtrap[=<trap_handler>]
                When you are compiling a file that contains a main
                program, this option sets up the specified trap
                handler to catch SIGTRAP exceptions. This option
                enables you to install a handler for SIGTRAP
                signals without calling the SIGNAL subprogram in
                the program. Specifying -qsigtrap with no
                <trap_handler> is equivalent to -qsigtrap=xl__trce.

         -qtbtable=<suboption>
                Limits the amount of debugging traceback
                information in object files, which reduces the size
                of the program. The suboptions are:

                none
                     Includes no traceback information.
                small
                     Includes traceback information but not the
                     names of procedures or information about
                     procedure parameters.
                full
                     Includes complete traceback information.

                The default is full traceback information in the
                object file when compiling non-optimized (without
                -O) or for debugging (with -g).  Otherwise, the
                default is -qtbtable=small.

         -qwarn64 | -qnowarn64
                Assists in porting code from a 32-bit environment
                to a 64-bit environment by detecting the truncation
                of an 8-byte integer pointer to 4 bytes. The
                -qwarn64 option uses informational messages to
                identify statements that may cause problems with
                the 32-bit to 64-bit migration.  The default is
                -qnowarn64.

         -qxflag=<suboption>
                Specifies rarely-needed compiler behaviors.  The
                suboptions are:

                oldtab
                     For fixed source form programs, interprets a
                     tab in columns 1 to 5 as a single character.
                     The source statement still starts immediately
                     after the tab, but the tab character is
                     treated as a single character for counting
                     columns. This setting allows up to 71
                     characters of input, depending on where the
                     tab character occurs.
                dvz
                     Specifying -qxflag=dvz causes the compiler to
                     generate code to detect floating-point
                     divide-by-zero operations. With this option
                     on, the extra code calls the external handler
                     function __xl_dzx when the divisor is zero.
                xalias
                     This is obsolete. Please use -qalias=nostd in
                     your new applications.

         -qxlines | -qnoxlines
                Specifies whether fixed source form lines with a X
                in column 1 are compiled or treated as comments.
                The default is -qnoxlines.

  Listing and Message Options
         -#     Generates information on the progress of the
                compilation without actually running the individual
                components.

         -S     Produces one or more .s files, showing equivalent
                assembler source for each Fortran source file.

         -V     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes. This is the
                same as -v except that you can cut and paste
                directly from the display to create a command.

         -v     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes.

         -w     Suppresses informational, language-level, and
                warning messages. This option sets -qflag=e:e.

         -qattr[=full] | -qnoattr
                Specifies whether to produce the attribute
                component of the attribute and cross-reference
                section of the listing.  The listing contains all
                identifiers (-qattr=full) or only the names that
                are referenced (-qattr).  The default is -qnoattr.

         -qflag=<listing_severity>:<terminal_severity>
                Specifies the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> determines
                the minimum level for the listing file, and
                <terminal_severity> determines the minimum level
                for the terminal.  The severity levels are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                Note that both <listing_severity> and
                <terminal_severity> must be specified.  The default
                is -qflag=i:i.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                Specifying -qlist with no suboptions is equivalent
                to specifying -qlist=nooffset.  The default is
                -qnolist.

         -qlistopt | -qnolistopt
                Determines whether to show the setting of every
                compiler option in the listing file or only
                selected options. These selected options include
                those specified on the command line or directives
                plus some that are always put in the listing.  The
                default is -qnolistopt.

         -qnoprint
                Prevents the compiler from creating the listing
                file, regardless of the settings of other listing
                options.

         -qphsinfo | -qnophsinfo
                Determines whether timing information is displayed
                on the terminal for each compiler phase.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qreport[=<suboptions>] | -qnoreport
                Determines whether to produce transformation
                reports showing how the program is parallelized and
                how loops are optimized.  The suboptions are:

                hotlist
                     Produces a report showing how loops are
                     transformed.
                smplist
                     Produces a report showing how the program is
                     parallelized.

                The default is -qnoreport.

         -qsource | -qnosource
                Determines whether to produce the source section of
                the listing.  The default is -qnosource.

         -qsuppress[={<msg_nums_list>|cmpmsg}] | -qnosuppress
                Determines which messages to suppress from the
                output stream.  The suboptions are:

                <msg_nums_list>
                     A colon-separated list of 7-digit compiler
                     message numbers.
                cmpmsg
                     Suppresses the informational messages that
                     report compilation progress and a successful
                     completion.

                The default is -qnosuppress.

         -qversion
                Displays the version and release of the invoking
                compiler. Specify this option on its own with the
                compiler command.

         -qxref[=full] | -qnoxref
                Determines whether to produce the cross-reference
                component of the attribute and cross-reference
                section of the listing.  If you specify only
                -qxref, only identifiers that are used are
                reported. If you specify -qxref=full, the listing
                contains information about all identifiers that
                appear in the program, whether they are used or
                not.  The default is -qnoxref.

  Compatibility Options
         -1     Executes each DO loop in the compiled program at
                least once if its DO statement is executed, even if
                the iteration count is 0. This option provides
                compatibility with Fortran 66. The default is to
                follow the behavior of later Fortran standards,
                where DO loops are not performed if the iteration
                count is 0. This is the short form of the -qonetrip
                option.

         -u     Specifies that no implicit typing of variable names
                is permitted. It has the same effect as using the
                IMPLICIT NONE statement in each scope that allows
                implicit statements. By default, implicit typing is
                allowed.

         -qautodbl=<setting>
                Converts single-precision floating-point
                calculations to double-precision or converts
                double-precision calculations to extended-
                precision.  <setting> can be:

                none
                     Does not promote or pad any objects that share
                     storage.
                dbl4
                     Promotes floating-point objects that are
                     single precision or are composed of such
                     objects.
                dbl8
                     Promotes floating-point objects that are
                     double-precision or are composed of such
                     objects.
                dbl
                     Combines the promotions done by dbl4 and dbl8.
                dblpad4
                     Performs the same promotions as dbl4, and pads
                     objects of other types (except CHARACTER) that
                     can share storage with promoted objects.
                dblpad8
                     Performs the same promotions as dbl8, and also
                     pads objects of other types (except CHARACTER)
                     if they can share storage with promoted
                     objects.
                dblpad
                     Combines the promotions done by dbl4 and dbl8,
                     and also pads objects of other types (except
                     CHARACTER) if they can share storage with
                     promoted objects.

                The default is -qautodbl=none.

         -qcclines | -qnocclines
                Enables recognition of conditional compilation
                lines in fixed source form and F90 free source
                form. IBM free source form is not supported.  The
                default is -qcclines if -qsmp=omp is specified.
                Otherwise, the default is -qnocclines.

         -qctyplss[={arg|noarg}] | -qnoctyplss
                Specifies whether character constant expressions
                are allowed wherever typeless constants may be
                used. Specifying -qctyplss=arg allows character
                constant expressions, but if a Hollerith constant
                is used as an actual argument, it is passed to the
                procedure as if it was an integer actual argument.
                The default is -qnoctyplss. If -qctypless is
                specified with no suboption, the default is
                -qctyplss=noarg.

         -qddim | -qnoddim
                Specifies that the bounds of pointee arrays are
                re-evaluated each time the arrays are referenced
                and removes some restrictions on the bounds
                expressions for pointee arrays.  The default is
                -qnoddim.

         -qdpc[=<e>] | -qnodpc
                Increases the precision of real constants, for
                maximum accuracy, when assigning real constants to
                DOUBLE PRECISION variables. -qdpc=<e> also promotes
                constants with an <e> exponent.  The default is
                -qnodpc.

         -qescape | -qnoescape
                Specifies whether the backslash is treated as an
                escape character in character strings, Hollerith
                constants, H edit descriptors, and character string
                edit descriptors.  The default is -qescape.

         -qextern=<procedure_names_list>
                Allows user-written procedures to be called instead
                of XL Fortran intrinsics. <procedure_names_list> is
                a colon-separated list of procedure names.  The
                procedure names are treated as if they appear in an
                EXTERNAL statement in each compilation unit being
                compiled.

         -qextname[=<names_list>] | -qnoextname
                Adds an underscore to the names of all global
                entities, which helps in porting programs from
                systems where this is a convention for mixed-
                language programs. <names_list> is a colon-
                separated list of global entity names.  The default
                is -qnoextname.

         -qinit=f90ptr
                Makes the initial association status of pointers
                disassociated instead of undefined. The default
                association status of pointers is undefined.

         -qintlog | -qnointlog
                Allows mixture of integer and logical data entities
                in expressions and statements. The default is
                -qnointlog.

         -qintsize={2|4|8}
                Sets the size (in bytes) of default INTEGER and
                LOGICAL data entities (that is, those for which no
                length or kind is specified).  The default is
                -qintsize=4.

         -qlog4 | -qnolog4
                Specifies whether the result of a logical operation
                with logical operands is a LOGICAL(4) or is a
                LOGICAL with the maximum length of the operands.
                The default is -qnolog4.

         -qmodule=mangle81
                Specifies that the compiler should use the XL
                Fortran Version 8.1 naming convention for non-
                intrinsic module files. This option allows you to
                produce modules and their associated object files
                with the Version 10.1 compiler and link these
                object files with others compiled with the Version
                8.1 compiler, or earlier.

         -qnullterm | -qnonullterm
                Appends a null character to each character constant
                expression that is passed as a dummy argument, to
                make it more convenient to pass strings to C
                functions. The default is -qnonullterm.

         -qonetrip | -qnoonetrip
                The long form of the -1 option. See -1 for details.
                The default is -qnoonetrip.

         -qport=<suboption> | -qnoport
                Increases flexibility when porting programs to XL
                Fortran, providing a number of options to
                accommodate Fortran language extensions.  The
                suboptions are:

                clogicals | noclogicals
                     Allows non-zero integers to be treated as true
                     when used as logicals. The change affects all
                     logical operators. This suboption only takes
                     effect if -qintlog is activated.  The default
                     is noclogicals.
                hexint | nohexint
                     Specifies that typeless constant hexadecimal
                     strings are converted to integers when passed
                     as actual arguments to the INT intrinsic
                     function. Typeless constant hexadecimal
                     strings which are not passed as actual
                     arguments to INT remain unaffected.  The
                     default is nohexint.
                mod | nomod
                     Relaxes existing constraints on the MOD
                     intrinsic function, allowing two arguments of
                     the same data type parameter to be of
                     different kind type parameters. The result
                     will be of the same type as the argument, but
                     with the larger kind type parameter value.
                     The default is nomod.
                nullarg | nonullarg
                     For an external or internal procedure
                     reference, this causes the compiler to treat
                     an empty argument (which is delimited by a
                     left parenthesis and a comma, two commas, or a
                     comma and a right parenthesis) as a null
                     argument. This suboption has no effect if the
                     argument list is empty.  The default is
                     nonullarg.
                sce | nosce
                     By default, the compiler performs short
                     circuit evaluation in selected logical
                     expressions using XL Fortran rules. Specifying
                     'sce' allows the compiler to use non-XL
                     Fortran rules. The compiler will perform short
                     circuit evaluation if the current rules allow
                     it.  The default is nosce.
                typestmt | notypestmt
                     The TYPE statement, which behaves in a manner
                     similar to the PRINT statement, is supported
                     whenever this option is specified. The default
                     is notypestmt.
                typlssarg | notyplssarg
                     Converts all typeless constants to default
                     integers if the constants are actual arguments
                     to an intrinsic procedure whose associated
                     dummy arguments are of integer type. Dummy
                     arguments associated with typeless actual
                     arguments of non-integer type remain
                     unaffected by this option.  The default is
                     notyplssarg.

                The default is -qnoport.

         -qposition={appendold|appendunknown}
                Positions the file pointer at the end of the file
                when data is written after an OPEN statement with
                no "POSITION=" specifier, and the corresponding
                "STATUS=" value (OLD or UNKNOWN) is specified.  The
                default depends on the I/O specifiers in the OPEN
                statement and on the compiler invocation command.
                The default is -qposition=appendold for the xlf,
                xlf_r, xlf_r7, and f77/fort77 commands and the
                defined Fortran 90 and Fortran 95 behaviors for the
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, xlf95_r7,
                f90 and f95 commands.

         -qqcount | -qnoqcount
                Accepts the character-count Q edit descriptor (Q)
                as well as the extended-precision Q edit descriptor
                (Qw.d). With -qnoqcount, all Q edit descriptors are
                interpreted as the extended-precision Q edit
                descriptor.  The default is -qnoqcount.

         -qrealsize=<bytes>
                Sets the default size of REAL, DOUBLE PRECISION,
                COMPLEX and DOUBLE COMPLEX values. The allowed
                values for <bytes> are 4 and 8.  The default is
                -qrealsize=4.

         -qsave[=<suboption>] | -qnosave
                Specifies the default storage class for local
                variables.  The suboptions are:

                all
                     The default storage class for all local
                     variables is STATIC. This is the default when
                     -qsave is specified without a suboption.
                defaultinit
                     The default storage class is STATIC for local
                     variables of derived type that have default
                     initialization specified.

                Specifying -qnosave sets the default storage class
                to AUTOMATIC.  The default is -qsave for xlf,
                xlf_r, xlf_r7, f77, or fort77 to duplicate the
                behavior of FORTRAN77 commands, and -qnosave
                otherwise.

         -qsclk[=<suboption>]
                Specifies the resolution that the SYSTEM_CLOCK
                intrinsic procedure uses in a program.  The
                suboptions are:

                centi
                     Uses centisecond resolution for the values
                     returned.
                micro
                     Uses microsecond resolution.

                The default is -qsclk=centi.

         -qswapomp | -qnoswapomp
                Specifies that the compiler should recognize and
                substitute OpenMP routines in XL Fortran programs.
                The default is -qswapomp.

         -qundef | -qnoundef
                The long form of the -u option. See -u for details.
                The default is -qnoundef.

         -qxlf77=<settings_list>
                Provides compatibility with Fortran 77 aspects of
                language semantics and I/O data format that have
                changed. Most of these changes are required by the
                Fortran 90 standard. <settings_list> is a colon-
                separated list of one or more of the following
                suboptions:

                blankpad | noblankpad
                     For internal, direct-access, and stream-access
                     files, uses a default setting equivalent to
                     pad='no'. This setting produces conversion
                     errors when reading from such a file if the
                     format requires more characters than the
                     record has, thus duplicating the XL Fortran
                     Version 2 behavior.
                gedit77 | nogedit77
                     Uses Fortran 77 semantics for the output of
                     REAL objects with the G edit descriptor.
                intarg | nointarg
                     Converts all the integer arguments of an
                     intrinsic procedure to the kind of the longest
                     argument, if they are of different kinds.
                intxor | nointxor
                     Treats .XOR. as a logical binary intrinsic
                     operator rather than a defined operator.
                leadzero | noleadzero
                     Produces a leading zero in real output under
                     the D, E, L, F and Q edit descriptors.
                oldboz | nooldboz
                     Turns blanks into zeros for data read by B, O,
                     and Z edit descriptors, regardless of the
                     "BLANK=" specifier or any BN or BZ control
                     edit descriptors.
                persistent | nopersistent
                     Saves the addresses of arguments to
                     subprograms with ENTRY statements in static
                     storage.
                softeof | nosofteof
                     Allows READ and WRITE operations when a unit
                     is positioned after its endfile record, unless
                     that position is the result of executing an
                     ENDFILE statement.

                The default suboptions are: blankpad, nogedit77,
                nointarg, nointxor, leadzero, nooldboz,
                nopersistent, and nosofteof for the f90, xlf90,
                xlf90_r, xlf90_r7, f95, xlf95, xlf95_r, and
                xlf95_r7 commands, and are the exact opposite for
                the xlf, xlf_r, xlf_r7, f77, and fort77 commands.

         -qxlf90=<settings_list>
                Provides backward compatibility with XL Fortran for
                AIX Version 5 and the Fortran 90 standard for
                certain aspects of the Fortran language.
                <settings_list> is a colon-separated list of one or
                both of the following suboptions:

                signedzero | nosignedzero
                     Determines how the SIGN(A,B) function handles
                     signed real 0.0. Prior to XL Fortran Version
                     6.1, SIGN(A,B) returned |A| when B=-0.0. This
                     behavior conformed with the Fortran 90
                     standard. Now, if you specify the
                     -qxlf90=signedzero compiler option, SIGN(A,B)
                     returns -|A| when B=-0.0. This behavior
                     conforms to the Fortran 95 standard and is
                     consistent with the IEEE standard for binary
                     floating-point arithmetic.
                autodealloc | noautodealloc
                     Determines whether the compiler deallocates
                     allocatable objects that are declared locally
                     without either the SAVE or the STATIC
                     attribute and have a status of currently
                     allocated when the subprogram terminates.

                The default suboptions are signedzero and
                autodealloc for the xlf95, xlf95_r, xlf95_r7 and
                f95 invocation commands. For all other invocation
                commands, the default suboptions are nosignedzero
                and noautodealloc.

  Linking Options
         -b64   The AIX operating system provides 64-bit shared
                object files in both libc.a and libm.a. In 64-bit
                mode, you can use the -b64 linker option to
                instruct ld to bind with 64-bit objects.

         -bdynamic, -bshared, -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                This is available on AIX 4.2 and above.

                -bdynamic
                     Specifies that shared objects are linked
                     dynamically.
                -bshared
                     Equivalent to -bdynamic.
                -bstatic
                     Specifies that shared objects are statically
                     linked into the output file.

                The default is -bdynamic.

         -bhalt:<error_level>
                Specifies the maximum error level that is allowed
                before the linker (ld) command halts. If any linker
                command has an error return value greater than the
                value that is specified by the <error_level>
                variable, linking stops.  The default value is 4,
                as specified in the configuration file.

         -bloadmap:<filename>
                Requests that a log of linker actions and messages
                be saved in file <filename>. You can use the log to
                help diagnose linking problems.

         -bmaxdata=<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint.  The default
                is -bmaxdata=0.

         -bmaxstack:<bytes>
                Specifies the maximum amount of space to reserve
                for the program stack segment for programs where
                the size of these regions is a constraint.

         -brtl | -bnortl
                Determines which algorithm will be used to find
                libraries that are specified with the -l option. If
                -brtl is specified, run-time linking is enabled.

         -bshared
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.
                This is equivalent to -bdynamic.

         -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.

         -L<dir>
                Searches in directory <dir> for libraries specified
                by -l<key>.

         -l<key>
                Searches the specified library file at link time,
                where <key> selects the library lib<key>.a.

  Compiler Customization Options
         -B<prefix>
                Determines a substitute path name for executable
                files used during compilation, such as the compiler
                of linker. <prefix> is the name of a directory
                where the alternative executable files reside. It
                is added to the beginning of the standard program
                names and must end in a slash (/). This option can
                be used in combination with the -t option, which
                determines which of these components are affected
                by -B.

         -F[<config_file>][:<stanza>]
                Specifies an alternative configuration file
                <config_file>, the command to be used (<stanza>)
                within the configuration file, or both. At least
                one of the arguments must be supplied.  The default
                stanza depends on the name of the command used to
                invoke the compiler.

         -P{v|k}[!]
                This option is obsolete and has no effect. Invokes
                the selected optimizing preprocessor.

         -P     Invokes the -Pv preprocessor before the compiler.

         -Pv    Invokes the -Pv preprocessor before the compiler.

         -Pk    Invokes the -Pk preprocessor before the compiler.

         -P!    Invokes the -Pv preprocessor only.

         -Pv!   Invokes the -Pv preprocessor only.

         -Pk!   Invokes the -Pk preprocessor only.

         -t<components_list>
                Applies the prefix from the -B option to the
                specified program, <components_list>, where
                <components_list> is a chain (with no separator
                character inbetween each <component>, ie: "-taFp")
                containing one or more of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

         -W<component>,<options_list>
                Passes the listed options to a component that is
                executed during compilation. <options_list> is a
                comma-separated list of one or more options, and
                <component> is one of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies compile-time rounding of constant
                floating-point expressions. It is equivalent to the
                -qieee option. <rounding_mode> is one of the
                following:

                n = Round to nearest
                m = Round toward minus infinity
                p = Round toward plus infinity
                z = Round toward zero

                The default is -yn.

         -qfloat=<suboptions_list>
                Determines different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using an inline sequence of
                     code instead of a call to a library function.
                fold | nofold
                     Evaluates constant floating-point expressions
                     at compile time.
                hsflt | nohsflt
                     Speeds up calculations by removing range-
                     checking on single-precision float results,
                     and on conversions from floating-point to
                     integer.
                hssngl | nohssngl
                     Speeds up calculations in a safer way than
                     hsflt, by rounding single-precision
                     expressions only when the results are stored
                     into REAL(4) memory locations
                maf | nomaf
                     Generates multiply-add instructions where
                     appropriate.
                nans | nonans
                     Allows you to use the -qflttrap=invalid:enable
                     option to detect and deal with exception
                     conditions that involve signaling NaN (not-a-
                     number) values.
                rndsngl | norndsngl
                     Rounds the result of each single-precision
                     (REAL(4)) operation to single-precision,
                     rather than waiting until the full expression
                     is evaluated. It sacrifices speed for
                     consistency with results from similar
                     calculations on other types of computers.
                rrm | norrm
                     Turns off compiler optimizations that require
                     the rounding mode to be the default, round-
                     to-nearest, at run time.
                rsqrt | norsqrt
                     Allows the optimizer to change a division by
                     the result of a square root operation into a
                     multiply by the reciprocal of the square root.
                strictnmaf | nostrictnmaf
                     Turns off floating-point transformations that
                     are used to introduce negative MAF
                     instructions, as these transformations do not
                     preserve the sign of a zero value.
                The default active suboptions are: nofltint, fold,
                nohsflt, nohssngl, maf, nonans, norelax, norndsngl,
                norrm, norsqrt, and nostrictnmaf.

         -qieee=<mode>
                Specifies the rounding mode for the compiler to use
                when evaluating constant floating-point expressions
                at compile time, where <mode> is one of:

                near = Round to nearest representable number
                minus = Round toward minus infinity
                plus = Round toward plus infinity
                zero = Round toward zero

                The default is -qieee=near.

         -qstrictieeemod | -qnostrictieeemod
                Specifies that the compiler will adhere to the
                Fortran 2003 IEEE arithmetic rules for the
                ieee_arithmetic and ieee_exceptions intrinsic
                modules.  The default is -qstrictieeemod.

  SEE ALSO
         xlfndi(1), showpdf(1), cleanpdf(1), mergepdf(1),
         resetpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/fortran/xlfortran/library/
         www.ibm.com/software/awdtools/fortran/xlfortran/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL Fortran Enterprise Edition V10.1 for AIX(R)

         5724-M13

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.









































configure:9206: $? = 249
configure:9214: checking whether we are using the GNU Fortran 90 compiler
configure:9233: xlf90 -c -q64 conftest.F >&5
"conftest.F", line 3.14: 1515-019 (S) Syntax is incorrect.
** main   === End of Compilation 1 ===
1501-511  Compilation failed for file conftest.F.
configure:9240: $? = 1
configure: failed program was:
|       program main
| #ifndef __GNUC__
|        choke me
| #endif
| 
|       end
configure:9257: result: no
configure:9264: checking whether xlf90 accepts -g
configure:9281: xlf90 -c -g conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:9288: $? = 0
configure:9304: result: yes
configure:9614: checking for extension for Fortran 90 programs
configure:9622: xlf90 -c -q64 conftest.f90 1>&5
** conftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f90.
configure:9625: $? = 0
configure:9627: result: f90
configure:9650: checking whether the Fortran 90 compiler (xlf90 -q64 ) works
configure:9667: xlf90 -o conftest -q64  conftest.f90  1>&5
** conftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f90.
configure:9670: $? = 0
configure:9694: result: yes
configure:9700: checking whether the Fortran 90 compiler (xlf90 -q64 ) is a cross-compiler
configure:9702: result: no
configure:9707: checking whether Fortran 90 works with Fortran 77
configure:9742: xlf -c -q64 -O2 conftest2.f 1>&5
** t1_2   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest2.f.
configure:9745: $? = 0
configure:9747: xlf90 -o conftest -q64  conftest1.f90 conftest2.o  1>&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest1.f90.
configure:9750: $? = 0
configure:9770: result: yes
configure:9812: checking whether Fortran accepts ! for comments
configure:9835: xlf -c -q64 -O2 conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:9842: $? = 0
configure:9863: result: yes
configure:9873: checking for include directory flag for Fortran
configure:9893: xlf -c -q64 -O2 -Isrc conftest.f 1>&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:9896: $? = 0
configure:9908: result: -I
configure:9926: checking for Fortran 77 flag for library directories
configure:9944: xlf -c -q64 -O2 conftest1.f 1>&5
** f1conf   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest1.f.
configure:9947: $? = 0
configure:9955: ar -X64 cr conftest2/libconftest.a conftest1.o
configure:9958: $? = 0
configure:9961: ranlib conftest2/libconftest.a
configure:9964: $? = 0
configure:9968: xlf -o conftest -q64 -O2 -Lconftest2 conftest.f -lconftest  1>&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:9971: $? = 0
configure:9987: result: -L
configure:10064: checking for which Fortran libraries are needed to link C with Fortran
configure:10077: xlf -c -q64 -O2 conftest.f 1>&5
** ftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:10080: $? = 0
configure:10121: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c mconftestf.o  >&5
configure:10128: $? = 0
configure:10297: result: none
configure:10391: checking whether Fortran compiler processes .F files with C preprocessor
configure:10402: xlf -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.F 1>&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.F.
configure:10405: $? = 0
configure:10427: result: yes
configure:10587: checking that f works as the extension for Fortran 90 program
configure:10593: xlf90 -c -q64 conftest.f >&5
** conftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:10596: $? = 0
configure:10598: result: yes
configure:10650: checking for Fortran 90 compiler version
configure:10653: xlf90 --version </dev/null >&5
xlf90: 1501-216 command option --version is not recognized - passed to ld



  xlf(1)                 IBM (October 2005)                  xlf(1)



  NAME
         xlf, xlf90, xlf95, xlf_r, xlf90_r, xlf95_r, f90, f95,
         xlf_r7, xlf90_r7, xlf95_r7, f77, fort77 - invoke the IBM
         XL Fortran compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

  DESCRIPTION
         xlf and related invocation commands compile Fortran source
         files.  They also process assembler source files and
         object files. Unless you specify the -c option, these
         commands call the link editor to produce a single object
         file.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/xlf.cfg).  For more information,
         refer to the XL Fortran Enterprise Edition Compiler
         Reference.

         The input file may have any of the following suffixes:
          .f - Fortran source file
          .f77 or .F77 - Fortran source file (fixed form) using
               f77 stanza configuration
          .f90 or .F90 - Fortran source file (free form) using
               xlf90 configuration
          .f95 or .F95 - Fortran source file (free form) using
               xlf95 configuration
          .o or .a - object file for ld command
          .s - assembler source file
          .F - Fortran source file with cpp preprocessor directives

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -I<dir>
                Adds a directory to the search path for include
                files and .mod files. If XL Fortran calls cpp, this
                option adds a directory to the search path for
                #include files. Before checking the default
                directories for include and .mod files, the
                compiler checks each directory in the search path.
                For include files, this path is only used if the
                file name in an INCLUDE line is not provided with
                an absolute path. By default, the following
                directories are searched in the following order:

                1) The current directory (where the compiler is
                executed)
                2) The directory where the source file is located

         -k     Specifies that the program is in free source form.
                This is the short form of -qfree=f90.

         -U     Makes the compiler case-sensitive to identifier
                names. By default the compiler interprets all names
                as if they were lower-case.

         -qci=<nums_list>
                Activates the specified INCLUDE lines. <nums_list>
                is a colon-separated list of identification numbers
                (from 1 to 255) of conditional includes.

         -qcr | -qnocr
                Allows you to control how the compiler interprets
                the CR (carriage return) character.  This allows
                you to compile code written using a MAC OS X or
                DOS/Windows editor.  The default is -qcr.

         -qdirective[=<list>] | -qnodirective[=<list>]
                Specifies target strings to be recognized in a
                comment directive. <list> is a colon-separated list
                of directives. If -qdirective is specified without
                any directives, it turns on the default trigger
                constant IBM* if it has been turned off by a
                previous -qnodirective.  The default is
                -qnodirective.

         -qdlines | -qnodlines
                This is the long form of the -D option. See -D for
                more information.  The default is -qnodlines.

         -qfixed[=<right_margin>]
                Indicates that the input source program is in fixed
                source form and optionally specifies the maximum
                line length, <right_margin>. The maximum
                <right_margin> value is 132.  The default is
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77
                invocation commands, and -qfree=f90 for f90, f95,
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, and
                xlf95_r7.

         -qfree[={f90|ibm}]
                Indicates that the source code is in free source
                form. The 'ibm' and 'f90' suboptions specify
                compatibility with the free source form defined for
                VS Fortran and Fortran 90, respectively. Note that
                the free source form defined for Fortran 90 also
                applies to Fortran 95.  The default is -qfree=f90
                for f90, f95, xlf90, xlf90_r, xlf90_r7, xlf95,
                xlf95_r, and xlf95_r7 invocation commands, and
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77.

         -qmbcs | -qnombcs
                Indicates to the compiler whether character literal
                constants, Hollerith constants, H edit descriptors,
                and character string edit descriptors can contain
                Multibyte Character Set (MBCS) or Unicode
                characters. The default is -qnombcs.

         -qmixed | -qnomixed
                The long form of the -U option. Makes the compiler
                case-sensitive to identifier names. The default is
                -qnomixed.

         -qsuffix=<option>=<suffix>
                Specifies the source file suffix, <suffix>, on the
                command line instead of in the .cfg file, where
                <option> can be:

                f
                     Specifies that <suffix> is the new source file
                     suffix.
                o
                     Specifies that <suffix> is the new object-file
                     suffix.
                s
                     Specifies that <suffix> is the new assembler
                     source file suffix.
                cpp
                     Specifies that <suffix> is the new
                     preprocessor source file suffix.

  Output Control Options
         -c     Produces an object file instead of an executable
                file.  Prevents the completed object file from
                being sent to the ld command for link-editing. With
                this option, the output is a .o file for each
                source file.

         -d     Causes preprocessed source files that are produced
                by cpp to be kept rather than to be deleted. By
                default temporary files produced by cpp are
                deleted.

         -o <name>
                Specifies a name for the output object, executable,
                or assembler source file.  The default name is
                a.out for executable files. The default name for an
                object source file is the same as the source file
                except that it has a '.o' extension.

         -q32   Selects 32-bit mode compilation mode. The -q32 and
                -qarch options determine the target machines that
                the 32-bit executable will run on. The default is
                -q32.

         -q64[=<suboption>]
                Selects 64-bit compilation mode. The -q64 option
                indicates that the object module will be created in
                64-bit object format and that the 64-bit
                instruction set will be generated. Note that you
                may compile in a 32-bit environment to create 64-
                bit objects, but you must link them in a 64-bit
                environment with the -q64 option. Use -q32 and -q64
                options, along with the -qarch and -qtune compiler
                options, to optimize the output of the compiler to
                the architecture on which that output will be used.
                The suboptions are:

                largetype
                     The object file will use the 64-bit Large Data
                     Type (LDT) ABI. This object file may only be
                     used on versions of AIX greater than or equal
                     to 5.0.

         -qmoddir=<directory>
                Specifies the location for any .mod files that the
                compiler writes. By default .mod files are placed
                in the current directory.

         -qpic[=<suboption>] | -qnopic
                Generates Position Independent Code (PIC) that can
                be used in shared libraries.  The suboptions are:

                large
                     Allows the size of the Table of Contents to be
                     larger than 64K. This suboption allows for
                     more addresses to be stored in the Table of
                     Contents and generates larger code.
                small
                     Assumes that the size of the Table of Contents
                     can be at most 64K.

                The default is -qpic=small.

  Optimization Options
         -NS<bytes>
                Specifies the size (in bytes) of the register spill
                space; the internal program storage areas used by
                the optimizer for register spills to storage.  The
                default is -NS512.

         -O[<level>]
                Specifies whether to optimize code during
                compilation and, if so, at which level. -O<level>
                is equivalent to -qoptimize=<level>. <level> can
                be:

                (not specified)
                     This is equivalent to -O2.
                0
                     Almost all optimizations are disabled. This is
                     equivalent to -qnooptimize.
                1
                     Reserved for future use. Ignored by compiler.
                2
                     Performs a set of optimizations that are
                     intended to offer improved performance without
                     an unreasonable increase in time or storage
                     that is required for compilation.
                3
                     Performs additional optimizations that are
                     memory intensive, compile-time intensive, and
                     may change the semantics of the program
                     slightly, unless -qstrict is specified. We
                     recommend these optimizations when the desire
                     for run-time speed improvements outweighs the
                     concern for limiting compile-time resources.
                     This level of optimization also affects the
                     setting of the -qfloat option, turning on the
                     'fltint' and 'rsqrt' suboptions by default,
                     and setting -qmaxmem=-1.  This option implies
                     -qhot=level=0.
                4
                     Aggressively optimizes the source program,
                     trading off additional compile time for
                     potential improvements in the generated code.
                     You can specify the option at compile time or
                     at link time. if you specify it at link time,
                     it will have no effect unless you also specify
                     it at compile time for at least the file that
                     contains the main program. -O4 implies the
                     following other options:
                     -qhot
                     -qipa
                     -O3
                     -qarch=auto
                     -qtune=auto
                     -qcache=auto
                5
                     Performs all optimizations from -O4, and also
                     sets -qipa=level=2 to perform full inter-
                     procedural data flow and alias analysis.

                -O4 and -O5 perform whole-program analysis and
                should be specified at both compilation and link
                time to have maximal effect.  The default is -O0.

         -p[g]  Sets up the object file for profiling. Specifying
                '-pg' will produce more extensive statistics. The
                default is no profiling.

         -Q[<suboption>]
                Specifies whether Fortran 90 or Fortran 95
                procedures are inlined and/or the names of
                particular procedures that should or should not be
                inlined. names is a list of procedure names that
                are separated by colons. This option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions,
                     subject to limits on the number of inlined
                     calls and the amount of code size increase as
                     a result.
                -Q!
                     Turns off inlining.
                -Q+<names_list>
                     Inlines the functions listed in <names_list>
                     and any other appropriate functions, where
                     <names_list> is a colon-separated list.
                -Q-<names_list>
                     Does not inline functions listed in
                     <names_list>, where <names_list> is a colon-
                     separated list. All other appropriate
                     functions are inlined.

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qalias=<suboptions_list>
                Indicates whether a program contains certain
                categories of aliasing. The compiler limits the
                scope of some optimizations when there is a
                possibility that different names are aliases for
                the same storage locations. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                aryovrlp | noaryovrlp
                     Indicates whether the compilation units
                     contain any array assignments between
                     storage-associated arrays. If not, specify
                     noaryovrlp to improve performance.
                intptr | nointptr
                     Indicates whether the compilation units
                     contain any integer POINTER statements. If so,
                     specify intptr.
                pteovrlp | nopteovrlp
                     Indicates whether any pointee variables may be
                     used to refer to any data objects that are not
                     pointee variables, or whether two pointee
                     variables may be used to refer to the same
                     storage location. If not, specify nopteovrlp.
                std | nostd
                     Indicates whether the compilation units
                     contain any non-standard aliasing (see
                     Compiler Reference for more information). If
                     so, specify nostd.  (-qalias=nostd replaces
                     the obsolete -qxflag=xalias option.)

                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90 and f95 commands, the default
                suboptions are: aryovrlp, nointptr, pteovrlp, and
                std. For the xlf, xlf_r, xlf_r7, f77, and fort77
                commands, the default suboptions are: aryovrlp,
                intptr, pteovrlp, and std.

         -qalign=<suboptions_list>
                Specifies the alignment of data objects in storage
                to avoid performance problems with misaligned data.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                4k | no4k
                     Specifies whether large arrays and structures
                     (at least 4096 bytes in size) will be aligned
                     on a 4K (4096-byte, or page) boundary.  Use of
                     this option may help to improve the
                     performance of programs using data striping.
                bindc=<suboption>
                     Specifies that the alignment and padding for
                     an XL Fortran derived type with the BIND(C)
                     attribute are compatible with a C struct type
                     that is compiled with the corresponding XL C
                     alignment option. The compatible alignment
                     options are:
                     -qalign=bindc=bit_packed
                     -qalign=bindc={full|power}
                     -qalign=bindc=packed
                     -qalign=bindc={twobyte|mac68k}
                     -qalign=bindc=natural
                     Each of these "-qalign=bindc=" sub-suboptions
                     is equivalent to the XL C "-qalign=" suboption
                     of the same name.  (ie: For
                     -qalign=bindc=bit_packed, the corresponding XL
                     C option is -qalign=bit_packed)
                struct=<option>
                     Specifies how objects or arrays of a derived
                     type (declared using a record structure) are
                     stored, and whether or not padding is used
                     between components. The options are:
                     natural
                          Objects of a derived type are stored with
                          sufficient padding such that components
                          will be stored on their natural alignment
                          boundaries, unless storage association
                          requires otherwise.
                     packed
                          Objects of a derived type are stored with
                          no padding between components, other than
                          any padding represented by %FILL
                          components.
                     port
                          Storage padding is the same as described
                          above for the struct=natural suboption,
                          except that the alignment of components
                          of type complex is the same as the
                          alignment of components of type real of
                          the same kind. The padding for an object
                          that is immediately followed by a union
                          is inserted at the beginning of the first
                          map component for each map in that union.

                The default activated suboptions are: no4k,
                struct=natural, and bindc=power.

         -qarch=<suboption>
                Specifies which instructions the compiler can
                generate.  The suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                com
                     You can run the executable file that the
                     compiler generated on any hardware platform
                     supported by the compiler, because the file
                     contains only instructions that are common to
                     all machines.
                p2sc
                     The executable file can be executed on any
                     POWER2 Super Chip hardware platform.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms. Using -q64 with ppc upgrades the
                     architecture to ppc64grsq.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.  In 64-bit mode,
                     produces object code containing optional
                     graphics instructions that will run on 64-bit
                     PowerPC platforms, but not on 32-bit-only
                     platforms.  Using -q64 with ppcgr upgrades the
                     architecture to ppc64grsq.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                pwr
                     Produces an object that contains instructions
                     that run on any of the POWER or POWER2
                     hardware platforms.
                pwr2s
                     The executable file can be executed on any
                     desktop implementation of the POWER2 chip.
                pwr2
                     Produces an object that contains instructions
                     that run on the POWER2 hardware platforms.
                pwrx
                     Equivalent to pwr2.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3, POWER4, POWER5,
                     POWER5+ or PowerPC 970 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4, POWER5, POWER5+ or
                     PowerPC 970 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 or POWER5+ hardware
                     platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on any POWER5+ hardware platform.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.
                601
                     Produces an object that contains instructions
                     that run on PowerPC 601 systems.
                603
                     Produces an object that contains instructions
                     that run on PowerPC 603 systems.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                ppc64v
                     Generates instructions for any 64-bit PowerPC
                     processor (like PowerPC 970) with VMX.

                The default is -qarch=com.

         -qassert=<suboptions_list>
                Provides information about the program to help
                fine-tune optimizations. <suboptions_list> is a
                colon-separated list of one or both of the
                following suboptions:

                deps | nodeps
                     Loops can contain loop-carried dependencies.
                itercnt=<n>
                     The iteration count of a typical loop is <n>.

                The default is -qassert=deps:itercnt=1024.

         -qcache=<suboptions_list>
                Specifies the cache configuration for a specific
                execution machine. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                assoc=<n>
                     Specifies the set-associativity of the cache:
                     0   = Directly-mapped
                     1   = Fully associative
                     (n > 1) = <n>-way set-associative
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty resulting
                     from a cache miss.
                level=<level>
                     Specifies which level of cache is affected:
                     1 = Basic cache
                     2 = Level-2 cache, or the table lookaside
                     buffer (TLB) if the machine has no level-2
                     cache
                     3 = TLB, in a machine that does have a level-2
                     cache
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<type>
                     Specifies the type of cache that the settings
                     apply to:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The default is determined by the -qtune and -qarch
                settings.

         -qcompact | -qnocompact
                Reduces optimizations that increase code size.  The
                default is -qnocompact.

         -qdirectstorage | -qnodirectstorage
                Specifies that a compilation unit might reference
                write-through-enabled or cache-inhibited storage.
                The default is -qnodirectstorage.

         -qenablevmx | -qnoenablevmx
                Enables generation of Vector Multimedia Extension
                (VMX) instructions.  The default is -qnoenablevmx.

         -qessl | -qnoessl
                Allows the use of the Engineering and Scientific
                Subroutine Library (ESSL) routines in place of
                Fortran 90 intrinsic procedures.  The default is
                -qnoessl.

         -qfdpr | -qnofdpr
                Provides object files with information that the AIX
                Feedback Directed Program Restructuring (fdpr)
                performance-tuning utility needs to optimize the
                resulting executable file.  The default is
                -qnofdpr.

         -qhot[=<suboptions>] | -qnohot
                Performs high-order loop analysis and
                transformations during optimization. This option is
                a powerful alternative to hand-tuning that provides
                opportunities to optimize loops and array language.
                The suboptions are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value. When <n> is not
                     specified, the compiler will pad any arrays
                     where it infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. See the XL Fortran
                     Compiler Reference for more information.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a VMX (Vector Multimedia Extension)
                     instruction.  If you specify -qhot=nosimd, the
                     compiler performs optimizations on loops and
                     arrays, but avoids replacing certain code with
                     VMX instructions.
                vector | novector
                     Specifies whether to allow the compiler to
                     optimize by replacing code with calls to
                     vector library routines.  Only takes effect
                     when specified with -qnostrict or -O3 or
                     higher optimization level.

                The default is -qnohot. If -qhot is specified
                without parameters, the default is -qhot=vector.

         -qipa[=<suboptions_list>] | -qnoipa
                Enhances -O optimization by performing detailed
                analysis across procedures. Optimization level -O2
                or higher is required when using -qipa.
                <suboptions_list> is a colon-separated list of
                suboptions. Regular expressions are supported when
                specifying <procedure_names_list> in the following
                -qipa suboptions: exits, inline, noinline, lowfreq,
                pure, safe, and unknown. <procedure_names_list> is
                a comma-separated list. The suboptions are:

                exits=<procedure_names_list>
                     Specifies a selected set of procedures which
                     always end the program.
                clonearch=<architecture_list> | noclonearch
                     Allows you to specify multiple architectures
                     in the event that you want to compile your
                     application for multiple architectures with a
                     single binary file. <architecture_list> is a
                     comma-separated list of one or more of the
                     following architectures: pwr4, pwr5, ppc970,
                     and pwr5x. This must be specified during link
                     time.  The default is noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of the mangled names of the functions that you
                     wish to clone (or not clone). Please note that
                     this suboption has no effect unless
                     -qipa=clonearch=<arch> is specified. You can
                     use regular expression syntax when specifying
                     function names.  The default is nocloneproc.
                inline=<options_list>
                     Specifies a colon-separated list of inline
                     options, which are as follows:
                     auto | noauto
                          Specifies whether to automatically
                          perform inline expansion.  The default is
                          auto.
                     limit=<n>
                          Changes the size limits that the
                          inline=auto option uses to determine how
                          much inline expansion to do. <n> is the
                          optimizers approximation of the number of
                          bytes of code that will be generated.
                     <procedure_names_list>
                          Specifies the procedures to attempt to
                          inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This argument is
                          implemented only when inline=auto is on.
                noinline=<procedure_names_list>
                     Specifies the procedures which are not to be
                     inlined.
                isolated=<procedure_names_list>
                     Specifies the procedures that are not compiled
                     with -qipa and do not directly refer to any
                     global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization to perform:
                     0
                          Performs minimal inter-procedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full inter-procedural data flow and alias
                          analysis.
                     The default level is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, in the event that an object
                     listing has been requested using the -qlist or
                     -qipa=list option. The default name is
                     "a.lst". Specifying 'long' or 'short'
                     determines which listing sections will be
                     included. The default is short.
                lowfreq=<procedure_names_list>
                     Specifies the procedures that are likely to be
                     called infrequently during the course of a
                     typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the interprocedural behavior for
                     procedures not compiled with -qipa.  The
                     default is 'unknown'.
                object | noobject
                     Includes standard object code in the object
                     files. If the noobject option is specified, it
                     can substantially reduce overall compilation
                     time by not generating object code during the
                     first IPA phase. The default is object. Note,
                     this is a compile-time suboption.
                partition={small|medium|large}
                     Specifies the size of the regions within the
                     program to analyze. Larger partitions contain
                     more procedures, which result in better
                     interprocedural analysis but require more
                     storage to optimize.  The default is medium.
                pdfname=<filename>
                     Specifies the name of the profile data file
                     that contains the PDF profiling information.
                     The default filename is __pdf.
                pure=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "pure" must be "isolated" and
                     "safe". It must not alter the internal state
                     nor have side-effects, which are defined as
                     potentially altering any data object visible
                     to the caller.
                safe=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "safe" may modify global
                     variables and dummy arguments.
                stdexits | nostdexits
                     Specifies that certain predefined routines can
                     be optimized as with the exits suboption. The
                     procedures are abort, exit, _exit, and
                     _assert.  The default is nostdexits.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure specified
                     as "unknown" may make calls to other parts of
                     the program compiled with -qipa and modify
                     global variables and dummy arguments.

                Options intended for use by the link-time phase of
                -qipa are -qlibansi, -qlibessl, -qlibposix and
                -qthreaded.  The default is -qnoipa.

         -qkeepparm | -qnokeepparm
                Ensures that the incoming parameters are stored on
                the stack even when optimizing. This may negatively
                impact execution performance. This option then
                provides access to the values of incoming
                parameters to tools, such as debuggers, simply by
                preserving those values on the stack.  The default
                is -qnokeepparm.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large 16 MB pages provided on POWER4 and higher
                based systems.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are in fact the library
                functions.  The default is -qnolibansi.

         -qlibessl | -qnolibessl
                Assumes that all functions with the name of an ESSL
                defined library function are, in fact, the library
                functions.  The default is -qnolibessl.

         -qlibposix | -qnolibposix
                Assumes that all functions with the name of a POSIX
                1003.1 defined library function are, in fact, the
                system functions.  The default is -qnolibposix.

         -qmaxmem=<kbytes>
                Limits the amount of memory that the compiler
                allocates while performing specific, memory-
                intensive optimizations. If <kbytes> is -1, the
                compiler will take as much memory as it needs
                without checking for limits. The default is
                -qmaxmem=2048 when using optimization level -O2,
                and -qmaxmem=-1 when using -O3 or greater.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 Produces an object that is instrumented to collect
                run-time execution information. This is phase 1 of
                the profile-directed feedback optimization process.

         -qpdf2 Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

         -qprefetch | -qnoprefetch
                Automatically inserts prefetch instructions where
                the optimizer perceives a benefit.  The default is
                -qprefetch.

         -qrecur | -qnorecur
                Not recommended. Allows external subprograms to be
                called recursively. For new programs, use the
                RECURSIVE keyword, which provides a standard-
                conforming way of using recursive procedures.  The
                default is -qnorecur.

         -qshowpdf | -qnoshowpdf
                Adds additional call and block count profiling
                information to an executable. This option is used
                together with the -qpdf1 option.  The default is
                -qnoshowpdf.

         -qsmallstack[=<suboption>] | -qnosmallstack
                Specifies that the compiler will minimize stack
                usage where possible. This option can take the
                form:

                -qsmallstack
                     Enables only general small stack
                     transformations.
                -qsmallstack=dynlenonheap
                     Asserts that automatic variables which are
                     dynamically-sized are allocated from the heap
                     and enables general small stack
                     transformations.
                -qsmallstack=nodynlenonheap
                     Disables dynamic-length variable allocation.
                -qnosmallstack
                     Disables only the general small stack
                     transformations.

                The default is -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Specifies that code should be produced for an SMP
                system.  <suboptions_list> is a colon-separated
                list of one or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization.
                nested_par | nonested_par
                     Specifies that prescriptive nested parallel
                     constructs should be parallelized by the
                     compiler.
                omp | noomp
                     Enforces compliance with the OpenMP Fortran
                     API.
                opt | noopt
                     Controls optimization for parallelization.
                     -qsmp=noopt specifies that the compiler should
                     do the least amount of optimization that is
                     required to parallelize the code and preserve
                     maximum debugability.
                rec_locks | norec_locks
                     Allows recursive locks to be used to avoid
                     problems associated with CRITICAL constructs.
                     If -qsmp=norec_locks is specified, recursive
                     locks will not be used to implement critical
                     sections.
                schedule=<suboptions>
                     The schedule suboption can take any of the
                     following sub-suboptions:
                     affinity[=<n>]
                     dynamic[=<n>]
                     guided[=<n>]
                     runtime
                     static[=<n>]
                     For their descriptions, refer to the XL
                     Fortran Compiler Reference.
                threshold=<n>
                     Controls the amount of automatic loop
                     parallelization that occurs. The value of <n>
                     represents the lower limit allowed for
                     parallelization of a loop, based on the level
                     of "work" present in a loop.

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, opt, noomp, norec_locks, nonested_par,
                schedule=runtime, and threshold=100.

         -qspillsize=<bytes>
                The long form of -NS. See the -NS option.  The
                default is -qspillsize=512.

         -qstacktemp=<num>
                Determines where to allocate applicable compiler
                temporaries at run time. The allocation depends on
                the value of <num>. The values are:

                0
                     Indicates that the compiler will decide
                     whether to allocate the applicable compiler
                     temporaries on the heap or the stack.
                -1
                     Indicates that applicable compiler temporaries
                     are to be always allocated on the stack. This
                     is the best-performing setting but uses the
                     most amount of stack storage.
                (1 or greater)
                     Indicates that applicable compiler temporaries
                     less than this value (bytes) should be
                     allocated on the stack and those greater than
                     or equal to this value should be allocated on
                     the heap.

                The default is -qstacktemp=0.

         -qstrict | -qnostrict
                Ensures that optimizations done by the -O3 and
                greater (and optionally -O2) options do not alter
                the semantics of a program. This option is ignored
                for -qnoopt.  For -O3 and greater, the default is
                -qnostrict. Otherwise the default is -qstrict.

         -qstrict_induction | -qnostrict_induction
                Prevents the compiler from performing induction
                (loop counter) variable optimizations that could
                alter the semantics of a program.  The default is
                -qnostrict_induction.

         -qthreaded
                Asserts that the compiler will generate thread-safe
                code when generating its own code or allocating
                compiler-created temporary data. User-written code
                that is algorithmically not thread-safe is
                unaffected by this option and will remain non-
                thread-safe. The default is -qthreaded when using
                xlf_r, xlf_r7, xlf90_r, xlf90_r7, xlf95_r, or
                xlf95_r7 invocation commands.

         -qtune=<suboption>
                Tunes instruction selection, scheduling, and other
                implementation-dependent performance enhancements
                for a specific implementation of a hardware
                architecture.  -qtune will not alter the ability of
                a program to run on a processor but will produce
                optimal code sequences tuned to a particular
                processor.  The suboptions are:

                auto
                     Automatically detects the specific processor
                     type of the compiling machine and produces an
                     object optimized for that processor.
                601
                     Produces an object optimized for all the
                     PowerPC 601 processors.
                603
                     Produces an object optimized for all the
                     PowerPC 603 processors.
                604
                     Produces an object optimized for all the
                     PowerPC 604 processors.
                pwr
                     Produces an object optimized for the POWER
                     hardware platforms.
                p2sc
                     The optimizations are tuned for the POWER2
                     Super Chip.
                pwr2
                     Produces an object optimized for the POWER2
                     hardware platforms.
                pwrx
                     This is equivalent to pwr2.
                pwr2s
                     The optimizations are tuned for the desktop
                     implementation of the POWER2 architecture,
                     which has a narrower processor-to-memory bus
                     than other POWER2 implementations.
                pwr3
                     Produces an object optimized for the POWER3
                     hardware platforms.
                pwr4
                     Produces an object optimized for the POWER4
                     hardware platforms.
                pwr5
                     Produces an object optimized for the POWER5
                     hardware platforms.
                rs64a
                     Produces an object optimized for the RS64I
                     processor.
                rs64b
                     Produces an object optimized for the RS64II
                     processor.
                rs64c
                     Produces an object optimized for the RS64III
                     processor.
                ppc970
                     Produces an object optimized for PowerPC 970
                     processors.

                The compiler uses -qtune setting that is compatible
                with the target architecture, which is controlled
                by the -qarch, -q32, and -q64 options.  The default
                setting is determined by the setting of -qarch.

         -qunroll[={auto|yes}] | -qnounroll
                Specifies whether unrolling DO loops is allowed in
                a program. Unrolling is allowed on outer and inner
                DO loops.  The suboptions are:

                auto
                     The compiler performs basic loop unrolling.
                yes
                     The compiler looks for more opportunities to
                     perform loop unrolling than is done with the
                     -qunroll=auto option. Specifying -qunroll with
                     no suboptions is equivalent to -qunroll=yes.

                The default is -qunroll=auto.

         -qunwind | -qnounwind
                Specifies that the compiler will preserve the
                default behavior for saves and restores to volatile
                registers during a procedure call.  If you specify
                -qnounwind, the compiler rearranges subprograms to
                minimize saves and restores to volatile registers.
                This rearrangement may make it impossible for the
                program or debuggers to walk through or "unwind"
                subprogram stack frame chains.  The default is
                -qunwind.

         -qvecnvol | -qnovecnvol
                Asserts that the compiled application will use both
                volatile and non-volatile vector registers. You
                should use this option only after understanding
                interoperability with old binaries. If you are
                compiling C/C++ code in Fortran which calls any of
                the following subroutines: setjmp(),longjmp(),
                sigsetjmp(), siglongjmp(), _setjmp(), _longjmp(),
                getcontext(), setcontext(), makecontext(), and
                swapcontext(), then you should set -qnovecnvol.
                bos.adt.include version 5.3.0.30 or greater should
                be installed to use -qvecnvol on the host system.
                The default is -qnovecnvol.

         -qzerosize | -qnozerosize
                Improves performance of Fortran 77 and some Fortran
                90 and Fortran 95 programs by preventing checking
                for zero-sized character strings and arrays.
                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90, and f95 commands, the default is
                -qzerosize.  For the xlf, xlf_r, xlf_r7, f77, and
                fort77 commands, the default is -qnozerosize.

  Error Checking and Debugging Options
         -C     Checks each reference to an array element, array
                section, or character substring for correctness.
                This is the short form of -qcheck.

         -D     Specifies whether the compiler compiles fixed
                source form lines with a D in column 1 or treats
                them as comments. Please note that in order to pass
                C-style -D macro definitions to the C preprocessor
                (e.g. compiling a file that ends with .F) use the
                -W option. For example:
                -WF,-DDEFINE_THIS
                -D is the short form of -qdlines.

         -g     Generates debug information for use by a symbolic
                debugger.

         -qcheck | -qnocheck
                The long form of the -C option. See -C for details.
                The default is -qnocheck.

         -qdbg | -qnodbg
                The long form of the -g option. See -g for details.
                The default is -qnodbg.

         -qdpcl | -qnodpcl
                Generates symbols that tools based on the Dynamic
                Probe Class Library (DPCL) API can use to see the
                structure of an executable file. You must also
                specify the -g option when you specify -qdpcl.
                This option has no effect when optimization (-O) is
                enabled. The default is -qnodpcl.

         -qextchk | -qnoextchk
                Sets up type-checking information for common
                blocks, procedure definitions, procedure
                references, and module data. Later, the linker can
                detect mismatches across compilation units using
                this information.  The default is -qnoextchk.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Determines what types of floating-point exception
                conditions to detect at run time. The program
                receives a SIGTRAP signal when the corresponding
                exception occurs.  <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                enable
                     Turn on checking for the specified exceptions
                     in the main program so that the exceptions
                     generate SIGTRAP signals.
                imprecise
                     Only check for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detect and trap on floating-point inexact, if
                     exception checking is enabled.
                invalid
                     Detect and trap on floating-point invalid
                     operations.
                nanq
                     Detect and trap all quiet not-a-number (NaNQ)
                     values and signaling not-a-number (NaNS)
                     values.
                overflow
                     Detect and trap on floating-point overflow.
                underflow
                     Detect and trap on floating-point underflow.
                zerodivide
                     Detect and trap on floating-point division by
                     zero.

                The default is -qnoflttrap. When -qflttrap is
                specified with no suboptions, the default activated
                suboptions are: overflow, underflow, zerodivide,
                invalid, and inexact.

         -qfullpath | -qnofullpath
                Records the full (or absolute) path names of source
                and include files in object files compiled with
                debugging information (-g option).  The default is
                -qnofullpath.

         -qhalt=<sev>
                Stops before producing any object, executable, or
                assembler source files if the maximum severity of
                compile-time messages equals or exceeds the
                specified severity <sev>, where the severity levels
                are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                The default is -qhalt=s.

         -qinitauto[=<hex_value>] | -qnoinitauto
                Initializes each byte or word (4 bytes) of storage
                for automatic variables to a specific value,
                depending on the length specified in <hex_value>.
                This helps you to locate variables that are
                referenced before they are defined. <hex_value> is
                a 1 to 8 digit hexadecimal number.  The default is
                -qnoinitauto. If you specify -qinitauto without a
                <hex_value>, the compiler initializes the value of
                each byte of automatic storage to zero. This option
                should be used for debugging purposes only.

         -qlanglvl=<suboption>
                Determines which language standard (or
                subset/superset of a standard) to check against for
                nonconformance. This option will only produce
                messages; all code valid in extended mode will
                compile regardless of which suboption is specified.
                The suboptions are:

                77std
                     Accepts the language specified by the ANSI
                     Fortran 77 standard.
                90std
                     Accepts the language specified by the ISO
                     Fortran 90 standard.
                90pure
                     Same as 90std, except that it reports errors
                     for any obsolescent Fortran 90 features used.
                90ext
                     Obsolete suboption that is equivalent to
                     extended.
                95std
                     Accepts the language specified by the ISO
                     Fortran 95 standard.
                95pure
                     Same as 95std, except that it also reports
                     errors for any obsolescent Fortran 95 features
                     used.
                2003std
                     Accepts the language that the ISO Fortran 95
                     standard specifies, as well as all Fortran
                     2003 features supported by XL Fortran, and
                     reports anything else as an error.
                2003pure
                     The same as 2003std except that it also
                     reports errors for any obsolescent Fortran
                     2003 features used.
                extended
                     Accepts the full Fortran 95 language standard,
                     all Fortran 2003 features supported by XL
                     Fortran, and all extensions, effectively
                     turning off language-level checking.

                The default is -qlanglvl=extended.

         -qlinedebug | -qnolinedebug
                Generates line number and source file name
                information for the debugger. This option produces
                minimal debugging information, so the resulting
                object size is smaller than what is produced if the
                -g debugging option is specified. The default is
                -qnolinedebug.

         -qobject | -qnoobject
                Specifies whether to produce an object file or to
                stop immediately after checking the syntax of the
                source files.  The default is -qobject.

         -qsaa | -qnosaa
                Checks for conformance to the SAA Fortran language
                definition. It identifies nonconforming source code
                and also options that allow such nonconformances.
                The default is -qnosaa.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, and other information, in the
                corresponding object file. The compilation must
                produce an object file for this option to take
                effect.  The default is -qnosaveopt.

         -qsigtrap[=<trap_handler>]
                When you are compiling a file that contains a main
                program, this option sets up the specified trap
                handler to catch SIGTRAP exceptions. This option
                enables you to install a handler for SIGTRAP
                signals without calling the SIGNAL subprogram in
                the program. Specifying -qsigtrap with no
                <trap_handler> is equivalent to -qsigtrap=xl__trce.

         -qtbtable=<suboption>
                Limits the amount of debugging traceback
                information in object files, which reduces the size
                of the program. The suboptions are:

                none
                     Includes no traceback information.
                small
                     Includes traceback information but not the
                     names of procedures or information about
                     procedure parameters.
                full
                     Includes complete traceback information.

                The default is full traceback information in the
                object file when compiling non-optimized (without
                -O) or for debugging (with -g).  Otherwise, the
                default is -qtbtable=small.

         -qwarn64 | -qnowarn64
                Assists in porting code from a 32-bit environment
                to a 64-bit environment by detecting the truncation
                of an 8-byte integer pointer to 4 bytes. The
                -qwarn64 option uses informational messages to
                identify statements that may cause problems with
                the 32-bit to 64-bit migration.  The default is
                -qnowarn64.

         -qxflag=<suboption>
                Specifies rarely-needed compiler behaviors.  The
                suboptions are:

                oldtab
                     For fixed source form programs, interprets a
                     tab in columns 1 to 5 as a single character.
                     The source statement still starts immediately
                     after the tab, but the tab character is
                     treated as a single character for counting
                     columns. This setting allows up to 71
                     characters of input, depending on where the
                     tab character occurs.
                dvz
                     Specifying -qxflag=dvz causes the compiler to
                     generate code to detect floating-point
                     divide-by-zero operations. With this option
                     on, the extra code calls the external handler
                     function __xl_dzx when the divisor is zero.
                xalias
                     This is obsolete. Please use -qalias=nostd in
                     your new applications.

         -qxlines | -qnoxlines
                Specifies whether fixed source form lines with a X
                in column 1 are compiled or treated as comments.
                The default is -qnoxlines.

  Listing and Message Options
         -#     Generates information on the progress of the
                compilation without actually running the individual
                components.

         -S     Produces one or more .s files, showing equivalent
                assembler source for each Fortran source file.

         -V     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes. This is the
                same as -v except that you can cut and paste
                directly from the display to create a command.

         -v     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes.

         -w     Suppresses informational, language-level, and
                warning messages. This option sets -qflag=e:e.

         -qattr[=full] | -qnoattr
                Specifies whether to produce the attribute
                component of the attribute and cross-reference
                section of the listing.  The listing contains all
                identifiers (-qattr=full) or only the names that
                are referenced (-qattr).  The default is -qnoattr.

         -qflag=<listing_severity>:<terminal_severity>
                Specifies the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> determines
                the minimum level for the listing file, and
                <terminal_severity> determines the minimum level
                for the terminal.  The severity levels are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                Note that both <listing_severity> and
                <terminal_severity> must be specified.  The default
                is -qflag=i:i.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                Specifying -qlist with no suboptions is equivalent
                to specifying -qlist=nooffset.  The default is
                -qnolist.

         -qlistopt | -qnolistopt
                Determines whether to show the setting of every
                compiler option in the listing file or only
                selected options. These selected options include
                those specified on the command line or directives
                plus some that are always put in the listing.  The
                default is -qnolistopt.

         -qnoprint
                Prevents the compiler from creating the listing
                file, regardless of the settings of other listing
                options.

         -qphsinfo | -qnophsinfo
                Determines whether timing information is displayed
                on the terminal for each compiler phase.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qreport[=<suboptions>] | -qnoreport
                Determines whether to produce transformation
                reports showing how the program is parallelized and
                how loops are optimized.  The suboptions are:

                hotlist
                     Produces a report showing how loops are
                     transformed.
                smplist
                     Produces a report showing how the program is
                     parallelized.

                The default is -qnoreport.

         -qsource | -qnosource
                Determines whether to produce the source section of
                the listing.  The default is -qnosource.

         -qsuppress[={<msg_nums_list>|cmpmsg}] | -qnosuppress
                Determines which messages to suppress from the
                output stream.  The suboptions are:

                <msg_nums_list>
                     A colon-separated list of 7-digit compiler
                     message numbers.
                cmpmsg
                     Suppresses the informational messages that
                     report compilation progress and a successful
                     completion.

                The default is -qnosuppress.

         -qversion
                Displays the version and release of the invoking
                compiler. Specify this option on its own with the
                compiler command.

         -qxref[=full] | -qnoxref
                Determines whether to produce the cross-reference
                component of the attribute and cross-reference
                section of the listing.  If you specify only
                -qxref, only identifiers that are used are
                reported. If you specify -qxref=full, the listing
                contains information about all identifiers that
                appear in the program, whether they are used or
                not.  The default is -qnoxref.

  Compatibility Options
         -1     Executes each DO loop in the compiled program at
                least once if its DO statement is executed, even if
                the iteration count is 0. This option provides
                compatibility with Fortran 66. The default is to
                follow the behavior of later Fortran standards,
                where DO loops are not performed if the iteration
                count is 0. This is the short form of the -qonetrip
                option.

         -u     Specifies that no implicit typing of variable names
                is permitted. It has the same effect as using the
                IMPLICIT NONE statement in each scope that allows
                implicit statements. By default, implicit typing is
                allowed.

         -qautodbl=<setting>
                Converts single-precision floating-point
                calculations to double-precision or converts
                double-precision calculations to extended-
                precision.  <setting> can be:

                none
                     Does not promote or pad any objects that share
                     storage.
                dbl4
                     Promotes floating-point objects that are
                     single precision or are composed of such
                     objects.
                dbl8
                     Promotes floating-point objects that are
                     double-precision or are composed of such
                     objects.
                dbl
                     Combines the promotions done by dbl4 and dbl8.
                dblpad4
                     Performs the same promotions as dbl4, and pads
                     objects of other types (except CHARACTER) that
                     can share storage with promoted objects.
                dblpad8
                     Performs the same promotions as dbl8, and also
                     pads objects of other types (except CHARACTER)
                     if they can share storage with promoted
                     objects.
                dblpad
                     Combines the promotions done by dbl4 and dbl8,
                     and also pads objects of other types (except
                     CHARACTER) if they can share storage with
                     promoted objects.

                The default is -qautodbl=none.

         -qcclines | -qnocclines
                Enables recognition of conditional compilation
                lines in fixed source form and F90 free source
                form. IBM free source form is not supported.  The
                default is -qcclines if -qsmp=omp is specified.
                Otherwise, the default is -qnocclines.

         -qctyplss[={arg|noarg}] | -qnoctyplss
                Specifies whether character constant expressions
                are allowed wherever typeless constants may be
                used. Specifying -qctyplss=arg allows character
                constant expressions, but if a Hollerith constant
                is used as an actual argument, it is passed to the
                procedure as if it was an integer actual argument.
                The default is -qnoctyplss. If -qctypless is
                specified with no suboption, the default is
                -qctyplss=noarg.

         -qddim | -qnoddim
                Specifies that the bounds of pointee arrays are
                re-evaluated each time the arrays are referenced
                and removes some restrictions on the bounds
                expressions for pointee arrays.  The default is
                -qnoddim.

         -qdpc[=<e>] | -qnodpc
                Increases the precision of real constants, for
                maximum accuracy, when assigning real constants to
                DOUBLE PRECISION variables. -qdpc=<e> also promotes
                constants with an <e> exponent.  The default is
                -qnodpc.

         -qescape | -qnoescape
                Specifies whether the backslash is treated as an
                escape character in character strings, Hollerith
                constants, H edit descriptors, and character string
                edit descriptors.  The default is -qescape.

         -qextern=<procedure_names_list>
                Allows user-written procedures to be called instead
                of XL Fortran intrinsics. <procedure_names_list> is
                a colon-separated list of procedure names.  The
                procedure names are treated as if they appear in an
                EXTERNAL statement in each compilation unit being
                compiled.

         -qextname[=<names_list>] | -qnoextname
                Adds an underscore to the names of all global
                entities, which helps in porting programs from
                systems where this is a convention for mixed-
                language programs. <names_list> is a colon-
                separated list of global entity names.  The default
                is -qnoextname.

         -qinit=f90ptr
                Makes the initial association status of pointers
                disassociated instead of undefined. The default
                association status of pointers is undefined.

         -qintlog | -qnointlog
                Allows mixture of integer and logical data entities
                in expressions and statements. The default is
                -qnointlog.

         -qintsize={2|4|8}
                Sets the size (in bytes) of default INTEGER and
                LOGICAL data entities (that is, those for which no
                length or kind is specified).  The default is
                -qintsize=4.

         -qlog4 | -qnolog4
                Specifies whether the result of a logical operation
                with logical operands is a LOGICAL(4) or is a
                LOGICAL with the maximum length of the operands.
                The default is -qnolog4.

         -qmodule=mangle81
                Specifies that the compiler should use the XL
                Fortran Version 8.1 naming convention for non-
                intrinsic module files. This option allows you to
                produce modules and their associated object files
                with the Version 10.1 compiler and link these
                object files with others compiled with the Version
                8.1 compiler, or earlier.

         -qnullterm | -qnonullterm
                Appends a null character to each character constant
                expression that is passed as a dummy argument, to
                make it more convenient to pass strings to C
                functions. The default is -qnonullterm.

         -qonetrip | -qnoonetrip
                The long form of the -1 option. See -1 for details.
                The default is -qnoonetrip.

         -qport=<suboption> | -qnoport
                Increases flexibility when porting programs to XL
                Fortran, providing a number of options to
                accommodate Fortran language extensions.  The
                suboptions are:

                clogicals | noclogicals
                     Allows non-zero integers to be treated as true
                     when used as logicals. The change affects all
                     logical operators. This suboption only takes
                     effect if -qintlog is activated.  The default
                     is noclogicals.
                hexint | nohexint
                     Specifies that typeless constant hexadecimal
                     strings are converted to integers when passed
                     as actual arguments to the INT intrinsic
                     function. Typeless constant hexadecimal
                     strings which are not passed as actual
                     arguments to INT remain unaffected.  The
                     default is nohexint.
                mod | nomod
                     Relaxes existing constraints on the MOD
                     intrinsic function, allowing two arguments of
                     the same data type parameter to be of
                     different kind type parameters. The result
                     will be of the same type as the argument, but
                     with the larger kind type parameter value.
                     The default is nomod.
                nullarg | nonullarg
                     For an external or internal procedure
                     reference, this causes the compiler to treat
                     an empty argument (which is delimited by a
                     left parenthesis and a comma, two commas, or a
                     comma and a right parenthesis) as a null
                     argument. This suboption has no effect if the
                     argument list is empty.  The default is
                     nonullarg.
                sce | nosce
                     By default, the compiler performs short
                     circuit evaluation in selected logical
                     expressions using XL Fortran rules. Specifying
                     'sce' allows the compiler to use non-XL
                     Fortran rules. The compiler will perform short
                     circuit evaluation if the current rules allow
                     it.  The default is nosce.
                typestmt | notypestmt
                     The TYPE statement, which behaves in a manner
                     similar to the PRINT statement, is supported
                     whenever this option is specified. The default
                     is notypestmt.
                typlssarg | notyplssarg
                     Converts all typeless constants to default
                     integers if the constants are actual arguments
                     to an intrinsic procedure whose associated
                     dummy arguments are of integer type. Dummy
                     arguments associated with typeless actual
                     arguments of non-integer type remain
                     unaffected by this option.  The default is
                     notyplssarg.

                The default is -qnoport.

         -qposition={appendold|appendunknown}
                Positions the file pointer at the end of the file
                when data is written after an OPEN statement with
                no "POSITION=" specifier, and the corresponding
                "STATUS=" value (OLD or UNKNOWN) is specified.  The
                default depends on the I/O specifiers in the OPEN
                statement and on the compiler invocation command.
                The default is -qposition=appendold for the xlf,
                xlf_r, xlf_r7, and f77/fort77 commands and the
                defined Fortran 90 and Fortran 95 behaviors for the
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, xlf95_r7,
                f90 and f95 commands.

         -qqcount | -qnoqcount
                Accepts the character-count Q edit descriptor (Q)
                as well as the extended-precision Q edit descriptor
                (Qw.d). With -qnoqcount, all Q edit descriptors are
                interpreted as the extended-precision Q edit
                descriptor.  The default is -qnoqcount.

         -qrealsize=<bytes>
                Sets the default size of REAL, DOUBLE PRECISION,
                COMPLEX and DOUBLE COMPLEX values. The allowed
                values for <bytes> are 4 and 8.  The default is
                -qrealsize=4.

         -qsave[=<suboption>] | -qnosave
                Specifies the default storage class for local
                variables.  The suboptions are:

                all
                     The default storage class for all local
                     variables is STATIC. This is the default when
                     -qsave is specified without a suboption.
                defaultinit
                     The default storage class is STATIC for local
                     variables of derived type that have default
                     initialization specified.

                Specifying -qnosave sets the default storage class
                to AUTOMATIC.  The default is -qsave for xlf,
                xlf_r, xlf_r7, f77, or fort77 to duplicate the
                behavior of FORTRAN77 commands, and -qnosave
                otherwise.

         -qsclk[=<suboption>]
                Specifies the resolution that the SYSTEM_CLOCK
                intrinsic procedure uses in a program.  The
                suboptions are:

                centi
                     Uses centisecond resolution for the values
                     returned.
                micro
                     Uses microsecond resolution.

                The default is -qsclk=centi.

         -qswapomp | -qnoswapomp
                Specifies that the compiler should recognize and
                substitute OpenMP routines in XL Fortran programs.
                The default is -qswapomp.

         -qundef | -qnoundef
                The long form of the -u option. See -u for details.
                The default is -qnoundef.

         -qxlf77=<settings_list>
                Provides compatibility with Fortran 77 aspects of
                language semantics and I/O data format that have
                changed. Most of these changes are required by the
                Fortran 90 standard. <settings_list> is a colon-
                separated list of one or more of the following
                suboptions:

                blankpad | noblankpad
                     For internal, direct-access, and stream-access
                     files, uses a default setting equivalent to
                     pad='no'. This setting produces conversion
                     errors when reading from such a file if the
                     format requires more characters than the
                     record has, thus duplicating the XL Fortran
                     Version 2 behavior.
                gedit77 | nogedit77
                     Uses Fortran 77 semantics for the output of
                     REAL objects with the G edit descriptor.
                intarg | nointarg
                     Converts all the integer arguments of an
                     intrinsic procedure to the kind of the longest
                     argument, if they are of different kinds.
                intxor | nointxor
                     Treats .XOR. as a logical binary intrinsic
                     operator rather than a defined operator.
                leadzero | noleadzero
                     Produces a leading zero in real output under
                     the D, E, L, F and Q edit descriptors.
                oldboz | nooldboz
                     Turns blanks into zeros for data read by B, O,
                     and Z edit descriptors, regardless of the
                     "BLANK=" specifier or any BN or BZ control
                     edit descriptors.
                persistent | nopersistent
                     Saves the addresses of arguments to
                     subprograms with ENTRY statements in static
                     storage.
                softeof | nosofteof
                     Allows READ and WRITE operations when a unit
                     is positioned after its endfile record, unless
                     that position is the result of executing an
                     ENDFILE statement.

                The default suboptions are: blankpad, nogedit77,
                nointarg, nointxor, leadzero, nooldboz,
                nopersistent, and nosofteof for the f90, xlf90,
                xlf90_r, xlf90_r7, f95, xlf95, xlf95_r, and
                xlf95_r7 commands, and are the exact opposite for
                the xlf, xlf_r, xlf_r7, f77, and fort77 commands.

         -qxlf90=<settings_list>
                Provides backward compatibility with XL Fortran for
                AIX Version 5 and the Fortran 90 standard for
                certain aspects of the Fortran language.
                <settings_list> is a colon-separated list of one or
                both of the following suboptions:

                signedzero | nosignedzero
                     Determines how the SIGN(A,B) function handles
                     signed real 0.0. Prior to XL Fortran Version
                     6.1, SIGN(A,B) returned |A| when B=-0.0. This
                     behavior conformed with the Fortran 90
                     standard. Now, if you specify the
                     -qxlf90=signedzero compiler option, SIGN(A,B)
                     returns -|A| when B=-0.0. This behavior
                     conforms to the Fortran 95 standard and is
                     consistent with the IEEE standard for binary
                     floating-point arithmetic.
                autodealloc | noautodealloc
                     Determines whether the compiler deallocates
                     allocatable objects that are declared locally
                     without either the SAVE or the STATIC
                     attribute and have a status of currently
                     allocated when the subprogram terminates.

                The default suboptions are signedzero and
                autodealloc for the xlf95, xlf95_r, xlf95_r7 and
                f95 invocation commands. For all other invocation
                commands, the default suboptions are nosignedzero
                and noautodealloc.

  Linking Options
         -b64   The AIX operating system provides 64-bit shared
                object files in both libc.a and libm.a. In 64-bit
                mode, you can use the -b64 linker option to
                instruct ld to bind with 64-bit objects.

         -bdynamic, -bshared, -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                This is available on AIX 4.2 and above.

                -bdynamic
                     Specifies that shared objects are linked
                     dynamically.
                -bshared
                     Equivalent to -bdynamic.
                -bstatic
                     Specifies that shared objects are statically
                     linked into the output file.

                The default is -bdynamic.

         -bhalt:<error_level>
                Specifies the maximum error level that is allowed
                before the linker (ld) command halts. If any linker
                command has an error return value greater than the
                value that is specified by the <error_level>
                variable, linking stops.  The default value is 4,
                as specified in the configuration file.

         -bloadmap:<filename>
                Requests that a log of linker actions and messages
                be saved in file <filename>. You can use the log to
                help diagnose linking problems.

         -bmaxdata=<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint.  The default
                is -bmaxdata=0.

         -bmaxstack:<bytes>
                Specifies the maximum amount of space to reserve
                for the program stack segment for programs where
                the size of these regions is a constraint.

         -brtl | -bnortl
                Determines which algorithm will be used to find
                libraries that are specified with the -l option. If
                -brtl is specified, run-time linking is enabled.

         -bshared
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.
                This is equivalent to -bdynamic.

         -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.

         -L<dir>
                Searches in directory <dir> for libraries specified
                by -l<key>.

         -l<key>
                Searches the specified library file at link time,
                where <key> selects the library lib<key>.a.

  Compiler Customization Options
         -B<prefix>
                Determines a substitute path name for executable
                files used during compilation, such as the compiler
                of linker. <prefix> is the name of a directory
                where the alternative executable files reside. It
                is added to the beginning of the standard program
                names and must end in a slash (/). This option can
                be used in combination with the -t option, which
                determines which of these components are affected
                by -B.

         -F[<config_file>][:<stanza>]
                Specifies an alternative configuration file
                <config_file>, the command to be used (<stanza>)
                within the configuration file, or both. At least
                one of the arguments must be supplied.  The default
                stanza depends on the name of the command used to
                invoke the compiler.

         -P{v|k}[!]
                This option is obsolete and has no effect. Invokes
                the selected optimizing preprocessor.

         -P     Invokes the -Pv preprocessor before the compiler.

         -Pv    Invokes the -Pv preprocessor before the compiler.

         -Pk    Invokes the -Pk preprocessor before the compiler.

         -P!    Invokes the -Pv preprocessor only.

         -Pv!   Invokes the -Pv preprocessor only.

         -Pk!   Invokes the -Pk preprocessor only.

         -t<components_list>
                Applies the prefix from the -B option to the
                specified program, <components_list>, where
                <components_list> is a chain (with no separator
                character inbetween each <component>, ie: "-taFp")
                containing one or more of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

         -W<component>,<options_list>
                Passes the listed options to a component that is
                executed during compilation. <options_list> is a
                comma-separated list of one or more options, and
                <component> is one of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies compile-time rounding of constant
                floating-point expressions. It is equivalent to the
                -qieee option. <rounding_mode> is one of the
                following:

                n = Round to nearest
                m = Round toward minus infinity
                p = Round toward plus infinity
                z = Round toward zero

                The default is -yn.

         -qfloat=<suboptions_list>
                Determines different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using an inline sequence of
                     code instead of a call to a library function.
                fold | nofold
                     Evaluates constant floating-point expressions
                     at compile time.
                hsflt | nohsflt
                     Speeds up calculations by removing range-
                     checking on single-precision float results,
                     and on conversions from floating-point to
                     integer.
                hssngl | nohssngl
                     Speeds up calculations in a safer way than
                     hsflt, by rounding single-precision
                     expressions only when the results are stored
                     into REAL(4) memory locations
                maf | nomaf
                     Generates multiply-add instructions where
                     appropriate.
                nans | nonans
                     Allows you to use the -qflttrap=invalid:enable
                     option to detect and deal with exception
                     conditions that involve signaling NaN (not-a-
                     number) values.
                rndsngl | norndsngl
                     Rounds the result of each single-precision
                     (REAL(4)) operation to single-precision,
                     rather than waiting until the full expression
                     is evaluated. It sacrifices speed for
                     consistency with results from similar
                     calculations on other types of computers.
                rrm | norrm
                     Turns off compiler optimizations that require
                     the rounding mode to be the default, round-
                     to-nearest, at run time.
                rsqrt | norsqrt
                     Allows the optimizer to change a division by
                     the result of a square root operation into a
                     multiply by the reciprocal of the square root.
                strictnmaf | nostrictnmaf
                     Turns off floating-point transformations that
                     are used to introduce negative MAF
                     instructions, as these transformations do not
                     preserve the sign of a zero value.
                The default active suboptions are: nofltint, fold,
                nohsflt, nohssngl, maf, nonans, norelax, norndsngl,
                norrm, norsqrt, and nostrictnmaf.

         -qieee=<mode>
                Specifies the rounding mode for the compiler to use
                when evaluating constant floating-point expressions
                at compile time, where <mode> is one of:

                near = Round to nearest representable number
                minus = Round toward minus infinity
                plus = Round toward plus infinity
                zero = Round toward zero

                The default is -qieee=near.

         -qstrictieeemod | -qnostrictieeemod
                Specifies that the compiler will adhere to the
                Fortran 2003 IEEE arithmetic rules for the
                ieee_arithmetic and ieee_exceptions intrinsic
                modules.  The default is -qstrictieeemod.

  SEE ALSO
         xlfndi(1), showpdf(1), cleanpdf(1), mergepdf(1),
         resetpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/fortran/xlfortran/library/
         www.ibm.com/software/awdtools/fortran/xlfortran/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL Fortran Enterprise Edition V10.1 for AIX(R)

         5724-M13

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.









































configure:10656: $? = 249
configure:10658: xlf90 -v </dev/null >&5
exec: export(export,XL_CONFIG=/etc/xlf.cfg:xlf90,NULL) 
exec: pg(pg,/usr/lpp/xlf/bin/default_msg/xlf.txt,NULL) 



  xlf(1)                 IBM (October 2005)                  xlf(1)



  NAME
         xlf, xlf90, xlf95, xlf_r, xlf90_r, xlf95_r, f90, f95,
         xlf_r7, xlf90_r7, xlf95_r7, f77, fort77 - invoke the IBM
         XL Fortran compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

  DESCRIPTION
         xlf and related invocation commands compile Fortran source
         files.  They also process assembler source files and
         object files. Unless you specify the -c option, these
         commands call the link editor to produce a single object
         file.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/xlf.cfg).  For more information,
         refer to the XL Fortran Enterprise Edition Compiler
         Reference.

         The input file may have any of the following suffixes:
          .f - Fortran source file
          .f77 or .F77 - Fortran source file (fixed form) using
               f77 stanza configuration
          .f90 or .F90 - Fortran source file (free form) using
               xlf90 configuration
          .f95 or .F95 - Fortran source file (free form) using
               xlf95 configuration
          .o or .a - object file for ld command
          .s - assembler source file
          .F - Fortran source file with cpp preprocessor directives

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -I<dir>
                Adds a directory to the search path for include
                files and .mod files. If XL Fortran calls cpp, this
                option adds a directory to the search path for
                #include files. Before checking the default
                directories for include and .mod files, the
                compiler checks each directory in the search path.
                For include files, this path is only used if the
                file name in an INCLUDE line is not provided with
                an absolute path. By default, the following
                directories are searched in the following order:

                1) The current directory (where the compiler is
                executed)
                2) The directory where the source file is located

         -k     Specifies that the program is in free source form.
                This is the short form of -qfree=f90.

         -U     Makes the compiler case-sensitive to identifier
                names. By default the compiler interprets all names
                as if they were lower-case.

         -qci=<nums_list>
                Activates the specified INCLUDE lines. <nums_list>
                is a colon-separated list of identification numbers
                (from 1 to 255) of conditional includes.

         -qcr | -qnocr
                Allows you to control how the compiler interprets
                the CR (carriage return) character.  This allows
                you to compile code written using a MAC OS X or
                DOS/Windows editor.  The default is -qcr.

         -qdirective[=<list>] | -qnodirective[=<list>]
                Specifies target strings to be recognized in a
                comment directive. <list> is a colon-separated list
                of directives. If -qdirective is specified without
                any directives, it turns on the default trigger
                constant IBM* if it has been turned off by a
                previous -qnodirective.  The default is
                -qnodirective.

         -qdlines | -qnodlines
                This is the long form of the -D option. See -D for
                more information.  The default is -qnodlines.

         -qfixed[=<right_margin>]
                Indicates that the input source program is in fixed
                source form and optionally specifies the maximum
                line length, <right_margin>. The maximum
                <right_margin> value is 132.  The default is
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77
                invocation commands, and -qfree=f90 for f90, f95,
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, and
                xlf95_r7.

         -qfree[={f90|ibm}]
                Indicates that the source code is in free source
                form. The 'ibm' and 'f90' suboptions specify
                compatibility with the free source form defined for
                VS Fortran and Fortran 90, respectively. Note that
                the free source form defined for Fortran 90 also
                applies to Fortran 95.  The default is -qfree=f90
                for f90, f95, xlf90, xlf90_r, xlf90_r7, xlf95,
                xlf95_r, and xlf95_r7 invocation commands, and
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77.

         -qmbcs | -qnombcs
                Indicates to the compiler whether character literal
                constants, Hollerith constants, H edit descriptors,
                and character string edit descriptors can contain
                Multibyte Character Set (MBCS) or Unicode
                characters. The default is -qnombcs.

         -qmixed | -qnomixed
                The long form of the -U option. Makes the compiler
                case-sensitive to identifier names. The default is
                -qnomixed.

         -qsuffix=<option>=<suffix>
                Specifies the source file suffix, <suffix>, on the
                command line instead of in the .cfg file, where
                <option> can be:

                f
                     Specifies that <suffix> is the new source file
                     suffix.
                o
                     Specifies that <suffix> is the new object-file
                     suffix.
                s
                     Specifies that <suffix> is the new assembler
                     source file suffix.
                cpp
                     Specifies that <suffix> is the new
                     preprocessor source file suffix.

  Output Control Options
         -c     Produces an object file instead of an executable
                file.  Prevents the completed object file from
                being sent to the ld command for link-editing. With
                this option, the output is a .o file for each
                source file.

         -d     Causes preprocessed source files that are produced
                by cpp to be kept rather than to be deleted. By
                default temporary files produced by cpp are
                deleted.

         -o <name>
                Specifies a name for the output object, executable,
                or assembler source file.  The default name is
                a.out for executable files. The default name for an
                object source file is the same as the source file
                except that it has a '.o' extension.

         -q32   Selects 32-bit mode compilation mode. The -q32 and
                -qarch options determine the target machines that
                the 32-bit executable will run on. The default is
                -q32.

         -q64[=<suboption>]
                Selects 64-bit compilation mode. The -q64 option
                indicates that the object module will be created in
                64-bit object format and that the 64-bit
                instruction set will be generated. Note that you
                may compile in a 32-bit environment to create 64-
                bit objects, but you must link them in a 64-bit
                environment with the -q64 option. Use -q32 and -q64
                options, along with the -qarch and -qtune compiler
                options, to optimize the output of the compiler to
                the architecture on which that output will be used.
                The suboptions are:

                largetype
                     The object file will use the 64-bit Large Data
                     Type (LDT) ABI. This object file may only be
                     used on versions of AIX greater than or equal
                     to 5.0.

         -qmoddir=<directory>
                Specifies the location for any .mod files that the
                compiler writes. By default .mod files are placed
                in the current directory.

         -qpic[=<suboption>] | -qnopic
                Generates Position Independent Code (PIC) that can
                be used in shared libraries.  The suboptions are:

                large
                     Allows the size of the Table of Contents to be
                     larger than 64K. This suboption allows for
                     more addresses to be stored in the Table of
                     Contents and generates larger code.
                small
                     Assumes that the size of the Table of Contents
                     can be at most 64K.

                The default is -qpic=small.

  Optimization Options
         -NS<bytes>
                Specifies the size (in bytes) of the register spill
                space; the internal program storage areas used by
                the optimizer for register spills to storage.  The
                default is -NS512.

         -O[<level>]
                Specifies whether to optimize code during
                compilation and, if so, at which level. -O<level>
                is equivalent to -qoptimize=<level>. <level> can
                be:

                (not specified)
                     This is equivalent to -O2.
                0
                     Almost all optimizations are disabled. This is
                     equivalent to -qnooptimize.
                1
                     Reserved for future use. Ignored by compiler.
                2
                     Performs a set of optimizations that are
                     intended to offer improved performance without
                     an unreasonable increase in time or storage
                     that is required for compilation.
                3
                     Performs additional optimizations that are
                     memory intensive, compile-time intensive, and
                     may change the semantics of the program
                     slightly, unless -qstrict is specified. We
                     recommend these optimizations when the desire
                     for run-time speed improvements outweighs the
                     concern for limiting compile-time resources.
                     This level of optimization also affects the
                     setting of the -qfloat option, turning on the
                     'fltint' and 'rsqrt' suboptions by default,
                     and setting -qmaxmem=-1.  This option implies
                     -qhot=level=0.
                4
                     Aggressively optimizes the source program,
                     trading off additional compile time for
                     potential improvements in the generated code.
                     You can specify the option at compile time or
                     at link time. if you specify it at link time,
                     it will have no effect unless you also specify
                     it at compile time for at least the file that
                     contains the main program. -O4 implies the
                     following other options:
                     -qhot
                     -qipa
                     -O3
                     -qarch=auto
                     -qtune=auto
                     -qcache=auto
                5
                     Performs all optimizations from -O4, and also
                     sets -qipa=level=2 to perform full inter-
                     procedural data flow and alias analysis.

                -O4 and -O5 perform whole-program analysis and
                should be specified at both compilation and link
                time to have maximal effect.  The default is -O0.

         -p[g]  Sets up the object file for profiling. Specifying
                '-pg' will produce more extensive statistics. The
                default is no profiling.

         -Q[<suboption>]
                Specifies whether Fortran 90 or Fortran 95
                procedures are inlined and/or the names of
                particular procedures that should or should not be
                inlined. names is a list of procedure names that
                are separated by colons. This option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions,
                     subject to limits on the number of inlined
                     calls and the amount of code size increase as
                     a result.
                -Q!
                     Turns off inlining.
                -Q+<names_list>
                     Inlines the functions listed in <names_list>
                     and any other appropriate functions, where
                     <names_list> is a colon-separated list.
                -Q-<names_list>
                     Does not inline functions listed in
                     <names_list>, where <names_list> is a colon-
                     separated list. All other appropriate
                     functions are inlined.

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qalias=<suboptions_list>
                Indicates whether a program contains certain
                categories of aliasing. The compiler limits the
                scope of some optimizations when there is a
                possibility that different names are aliases for
                the same storage locations. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                aryovrlp | noaryovrlp
                     Indicates whether the compilation units
                     contain any array assignments between
                     storage-associated arrays. If not, specify
                     noaryovrlp to improve performance.
                intptr | nointptr
                     Indicates whether the compilation units
                     contain any integer POINTER statements. If so,
                     specify intptr.
                pteovrlp | nopteovrlp
                     Indicates whether any pointee variables may be
                     used to refer to any data objects that are not
                     pointee variables, or whether two pointee
                     variables may be used to refer to the same
                     storage location. If not, specify nopteovrlp.
                std | nostd
                     Indicates whether the compilation units
                     contain any non-standard aliasing (see
                     Compiler Reference for more information). If
                     so, specify nostd.  (-qalias=nostd replaces
                     the obsolete -qxflag=xalias option.)

                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90 and f95 commands, the default
                suboptions are: aryovrlp, nointptr, pteovrlp, and
                std. For the xlf, xlf_r, xlf_r7, f77, and fort77
                commands, the default suboptions are: aryovrlp,
                intptr, pteovrlp, and std.

         -qalign=<suboptions_list>
                Specifies the alignment of data objects in storage
                to avoid performance problems with misaligned data.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                4k | no4k
                     Specifies whether large arrays and structures
                     (at least 4096 bytes in size) will be aligned
                     on a 4K (4096-byte, or page) boundary.  Use of
                     this option may help to improve the
                     performance of programs using data striping.
                bindc=<suboption>
                     Specifies that the alignment and padding for
                     an XL Fortran derived type with the BIND(C)
                     attribute are compatible with a C struct type
                     that is compiled with the corresponding XL C
                     alignment option. The compatible alignment
                     options are:
                     -qalign=bindc=bit_packed
                     -qalign=bindc={full|power}
                     -qalign=bindc=packed
                     -qalign=bindc={twobyte|mac68k}
                     -qalign=bindc=natural
                     Each of these "-qalign=bindc=" sub-suboptions
                     is equivalent to the XL C "-qalign=" suboption
                     of the same name.  (ie: For
                     -qalign=bindc=bit_packed, the corresponding XL
                     C option is -qalign=bit_packed)
                struct=<option>
                     Specifies how objects or arrays of a derived
                     type (declared using a record structure) are
                     stored, and whether or not padding is used
                     between components. The options are:
                     natural
                          Objects of a derived type are stored with
                          sufficient padding such that components
                          will be stored on their natural alignment
                          boundaries, unless storage association
                          requires otherwise.
                     packed
                          Objects of a derived type are stored with
                          no padding between components, other than
                          any padding represented by %FILL
                          components.
                     port
                          Storage padding is the same as described
                          above for the struct=natural suboption,
                          except that the alignment of components
                          of type complex is the same as the
                          alignment of components of type real of
                          the same kind. The padding for an object
                          that is immediately followed by a union
                          is inserted at the beginning of the first
                          map component for each map in that union.

                The default activated suboptions are: no4k,
                struct=natural, and bindc=power.

         -qarch=<suboption>
                Specifies which instructions the compiler can
                generate.  The suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                com
                     You can run the executable file that the
                     compiler generated on any hardware platform
                     supported by the compiler, because the file
                     contains only instructions that are common to
                     all machines.
                p2sc
                     The executable file can be executed on any
                     POWER2 Super Chip hardware platform.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms. Using -q64 with ppc upgrades the
                     architecture to ppc64grsq.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.  In 64-bit mode,
                     produces object code containing optional
                     graphics instructions that will run on 64-bit
                     PowerPC platforms, but not on 32-bit-only
                     platforms.  Using -q64 with ppcgr upgrades the
                     architecture to ppc64grsq.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                pwr
                     Produces an object that contains instructions
                     that run on any of the POWER or POWER2
                     hardware platforms.
                pwr2s
                     The executable file can be executed on any
                     desktop implementation of the POWER2 chip.
                pwr2
                     Produces an object that contains instructions
                     that run on the POWER2 hardware platforms.
                pwrx
                     Equivalent to pwr2.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3, POWER4, POWER5,
                     POWER5+ or PowerPC 970 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4, POWER5, POWER5+ or
                     PowerPC 970 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 or POWER5+ hardware
                     platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on any POWER5+ hardware platform.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.
                601
                     Produces an object that contains instructions
                     that run on PowerPC 601 systems.
                603
                     Produces an object that contains instructions
                     that run on PowerPC 603 systems.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                ppc64v
                     Generates instructions for any 64-bit PowerPC
                     processor (like PowerPC 970) with VMX.

                The default is -qarch=com.

         -qassert=<suboptions_list>
                Provides information about the program to help
                fine-tune optimizations. <suboptions_list> is a
                colon-separated list of one or both of the
                following suboptions:

                deps | nodeps
                     Loops can contain loop-carried dependencies.
                itercnt=<n>
                     The iteration count of a typical loop is <n>.

                The default is -qassert=deps:itercnt=1024.

         -qcache=<suboptions_list>
                Specifies the cache configuration for a specific
                execution machine. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                assoc=<n>
                     Specifies the set-associativity of the cache:
                     0   = Directly-mapped
                     1   = Fully associative
                     (n > 1) = <n>-way set-associative
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty resulting
                     from a cache miss.
                level=<level>
                     Specifies which level of cache is affected:
                     1 = Basic cache
                     2 = Level-2 cache, or the table lookaside
                     buffer (TLB) if the machine has no level-2
                     cache
                     3 = TLB, in a machine that does have a level-2
                     cache
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<type>
                     Specifies the type of cache that the settings
                     apply to:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The default is determined by the -qtune and -qarch
                settings.

         -qcompact | -qnocompact
                Reduces optimizations that increase code size.  The
                default is -qnocompact.

         -qdirectstorage | -qnodirectstorage
                Specifies that a compilation unit might reference
                write-through-enabled or cache-inhibited storage.
                The default is -qnodirectstorage.

         -qenablevmx | -qnoenablevmx
                Enables generation of Vector Multimedia Extension
                (VMX) instructions.  The default is -qnoenablevmx.

         -qessl | -qnoessl
                Allows the use of the Engineering and Scientific
                Subroutine Library (ESSL) routines in place of
                Fortran 90 intrinsic procedures.  The default is
                -qnoessl.

         -qfdpr | -qnofdpr
                Provides object files with information that the AIX
                Feedback Directed Program Restructuring (fdpr)
                performance-tuning utility needs to optimize the
                resulting executable file.  The default is
                -qnofdpr.

         -qhot[=<suboptions>] | -qnohot
                Performs high-order loop analysis and
                transformations during optimization. This option is
                a powerful alternative to hand-tuning that provides
                opportunities to optimize loops and array language.
                The suboptions are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value. When <n> is not
                     specified, the compiler will pad any arrays
                     where it infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. See the XL Fortran
                     Compiler Reference for more information.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a VMX (Vector Multimedia Extension)
                     instruction.  If you specify -qhot=nosimd, the
                     compiler performs optimizations on loops and
                     arrays, but avoids replacing certain code with
                     VMX instructions.
                vector | novector
                     Specifies whether to allow the compiler to
                     optimize by replacing code with calls to
                     vector library routines.  Only takes effect
                     when specified with -qnostrict or -O3 or
                     higher optimization level.

                The default is -qnohot. If -qhot is specified
                without parameters, the default is -qhot=vector.

         -qipa[=<suboptions_list>] | -qnoipa
                Enhances -O optimization by performing detailed
                analysis across procedures. Optimization level -O2
                or higher is required when using -qipa.
                <suboptions_list> is a colon-separated list of
                suboptions. Regular expressions are supported when
                specifying <procedure_names_list> in the following
                -qipa suboptions: exits, inline, noinline, lowfreq,
                pure, safe, and unknown. <procedure_names_list> is
                a comma-separated list. The suboptions are:

                exits=<procedure_names_list>
                     Specifies a selected set of procedures which
                     always end the program.
                clonearch=<architecture_list> | noclonearch
                     Allows you to specify multiple architectures
                     in the event that you want to compile your
                     application for multiple architectures with a
                     single binary file. <architecture_list> is a
                     comma-separated list of one or more of the
                     following architectures: pwr4, pwr5, ppc970,
                     and pwr5x. This must be specified during link
                     time.  The default is noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of the mangled names of the functions that you
                     wish to clone (or not clone). Please note that
                     this suboption has no effect unless
                     -qipa=clonearch=<arch> is specified. You can
                     use regular expression syntax when specifying
                     function names.  The default is nocloneproc.
                inline=<options_list>
                     Specifies a colon-separated list of inline
                     options, which are as follows:
                     auto | noauto
                          Specifies whether to automatically
                          perform inline expansion.  The default is
                          auto.
                     limit=<n>
                          Changes the size limits that the
                          inline=auto option uses to determine how
                          much inline expansion to do. <n> is the
                          optimizers approximation of the number of
                          bytes of code that will be generated.
                     <procedure_names_list>
                          Specifies the procedures to attempt to
                          inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This argument is
                          implemented only when inline=auto is on.
                noinline=<procedure_names_list>
                     Specifies the procedures which are not to be
                     inlined.
                isolated=<procedure_names_list>
                     Specifies the procedures that are not compiled
                     with -qipa and do not directly refer to any
                     global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization to perform:
                     0
                          Performs minimal inter-procedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full inter-procedural data flow and alias
                          analysis.
                     The default level is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, in the event that an object
                     listing has been requested using the -qlist or
                     -qipa=list option. The default name is
                     "a.lst". Specifying 'long' or 'short'
                     determines which listing sections will be
                     included. The default is short.
                lowfreq=<procedure_names_list>
                     Specifies the procedures that are likely to be
                     called infrequently during the course of a
                     typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the interprocedural behavior for
                     procedures not compiled with -qipa.  The
                     default is 'unknown'.
                object | noobject
                     Includes standard object code in the object
                     files. If the noobject option is specified, it
                     can substantially reduce overall compilation
                     time by not generating object code during the
                     first IPA phase. The default is object. Note,
                     this is a compile-time suboption.
                partition={small|medium|large}
                     Specifies the size of the regions within the
                     program to analyze. Larger partitions contain
                     more procedures, which result in better
                     interprocedural analysis but require more
                     storage to optimize.  The default is medium.
                pdfname=<filename>
                     Specifies the name of the profile data file
                     that contains the PDF profiling information.
                     The default filename is __pdf.
                pure=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "pure" must be "isolated" and
                     "safe". It must not alter the internal state
                     nor have side-effects, which are defined as
                     potentially altering any data object visible
                     to the caller.
                safe=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "safe" may modify global
                     variables and dummy arguments.
                stdexits | nostdexits
                     Specifies that certain predefined routines can
                     be optimized as with the exits suboption. The
                     procedures are abort, exit, _exit, and
                     _assert.  The default is nostdexits.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure specified
                     as "unknown" may make calls to other parts of
                     the program compiled with -qipa and modify
                     global variables and dummy arguments.

                Options intended for use by the link-time phase of
                -qipa are -qlibansi, -qlibessl, -qlibposix and
                -qthreaded.  The default is -qnoipa.

         -qkeepparm | -qnokeepparm
                Ensures that the incoming parameters are stored on
                the stack even when optimizing. This may negatively
                impact execution performance. This option then
                provides access to the values of incoming
                parameters to tools, such as debuggers, simply by
                preserving those values on the stack.  The default
                is -qnokeepparm.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large 16 MB pages provided on POWER4 and higher
                based systems.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are in fact the library
                functions.  The default is -qnolibansi.

         -qlibessl | -qnolibessl
                Assumes that all functions with the name of an ESSL
                defined library function are, in fact, the library
                functions.  The default is -qnolibessl.

         -qlibposix | -qnolibposix
                Assumes that all functions with the name of a POSIX
                1003.1 defined library function are, in fact, the
                system functions.  The default is -qnolibposix.

         -qmaxmem=<kbytes>
                Limits the amount of memory that the compiler
                allocates while performing specific, memory-
                intensive optimizations. If <kbytes> is -1, the
                compiler will take as much memory as it needs
                without checking for limits. The default is
                -qmaxmem=2048 when using optimization level -O2,
                and -qmaxmem=-1 when using -O3 or greater.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 Produces an object that is instrumented to collect
                run-time execution information. This is phase 1 of
                the profile-directed feedback optimization process.

         -qpdf2 Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

         -qprefetch | -qnoprefetch
                Automatically inserts prefetch instructions where
                the optimizer perceives a benefit.  The default is
                -qprefetch.

         -qrecur | -qnorecur
                Not recommended. Allows external subprograms to be
                called recursively. For new programs, use the
                RECURSIVE keyword, which provides a standard-
                conforming way of using recursive procedures.  The
                default is -qnorecur.

         -qshowpdf | -qnoshowpdf
                Adds additional call and block count profiling
                information to an executable. This option is used
                together with the -qpdf1 option.  The default is
                -qnoshowpdf.

         -qsmallstack[=<suboption>] | -qnosmallstack
                Specifies that the compiler will minimize stack
                usage where possible. This option can take the
                form:

                -qsmallstack
                     Enables only general small stack
                     transformations.
                -qsmallstack=dynlenonheap
                     Asserts that automatic variables which are
                     dynamically-sized are allocated from the heap
                     and enables general small stack
                     transformations.
                -qsmallstack=nodynlenonheap
                     Disables dynamic-length variable allocation.
                -qnosmallstack
                     Disables only the general small stack
                     transformations.

                The default is -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Specifies that code should be produced for an SMP
                system.  <suboptions_list> is a colon-separated
                list of one or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization.
                nested_par | nonested_par
                     Specifies that prescriptive nested parallel
                     constructs should be parallelized by the
                     compiler.
                omp | noomp
                     Enforces compliance with the OpenMP Fortran
                     API.
                opt | noopt
                     Controls optimization for parallelization.
                     -qsmp=noopt specifies that the compiler should
                     do the least amount of optimization that is
                     required to parallelize the code and preserve
                     maximum debugability.
                rec_locks | norec_locks
                     Allows recursive locks to be used to avoid
                     problems associated with CRITICAL constructs.
                     If -qsmp=norec_locks is specified, recursive
                     locks will not be used to implement critical
                     sections.
                schedule=<suboptions>
                     The schedule suboption can take any of the
                     following sub-suboptions:
                     affinity[=<n>]
                     dynamic[=<n>]
                     guided[=<n>]
                     runtime
                     static[=<n>]
                     For their descriptions, refer to the XL
                     Fortran Compiler Reference.
                threshold=<n>
                     Controls the amount of automatic loop
                     parallelization that occurs. The value of <n>
                     represents the lower limit allowed for
                     parallelization of a loop, based on the level
                     of "work" present in a loop.

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, opt, noomp, norec_locks, nonested_par,
                schedule=runtime, and threshold=100.

         -qspillsize=<bytes>
                The long form of -NS. See the -NS option.  The
                default is -qspillsize=512.

         -qstacktemp=<num>
                Determines where to allocate applicable compiler
                temporaries at run time. The allocation depends on
                the value of <num>. The values are:

                0
                     Indicates that the compiler will decide
                     whether to allocate the applicable compiler
                     temporaries on the heap or the stack.
                -1
                     Indicates that applicable compiler temporaries
                     are to be always allocated on the stack. This
                     is the best-performing setting but uses the
                     most amount of stack storage.
                (1 or greater)
                     Indicates that applicable compiler temporaries
                     less than this value (bytes) should be
                     allocated on the stack and those greater than
                     or equal to this value should be allocated on
                     the heap.

                The default is -qstacktemp=0.

         -qstrict | -qnostrict
                Ensures that optimizations done by the -O3 and
                greater (and optionally -O2) options do not alter
                the semantics of a program. This option is ignored
                for -qnoopt.  For -O3 and greater, the default is
                -qnostrict. Otherwise the default is -qstrict.

         -qstrict_induction | -qnostrict_induction
                Prevents the compiler from performing induction
                (loop counter) variable optimizations that could
                alter the semantics of a program.  The default is
                -qnostrict_induction.

         -qthreaded
                Asserts that the compiler will generate thread-safe
                code when generating its own code or allocating
                compiler-created temporary data. User-written code
                that is algorithmically not thread-safe is
                unaffected by this option and will remain non-
                thread-safe. The default is -qthreaded when using
                xlf_r, xlf_r7, xlf90_r, xlf90_r7, xlf95_r, or
                xlf95_r7 invocation commands.

         -qtune=<suboption>
                Tunes instruction selection, scheduling, and other
                implementation-dependent performance enhancements
                for a specific implementation of a hardware
                architecture.  -qtune will not alter the ability of
                a program to run on a processor but will produce
                optimal code sequences tuned to a particular
                processor.  The suboptions are:

                auto
                     Automatically detects the specific processor
                     type of the compiling machine and produces an
                     object optimized for that processor.
                601
                     Produces an object optimized for all the
                     PowerPC 601 processors.
                603
                     Produces an object optimized for all the
                     PowerPC 603 processors.
                604
                     Produces an object optimized for all the
                     PowerPC 604 processors.
                pwr
                     Produces an object optimized for the POWER
                     hardware platforms.
                p2sc
                     The optimizations are tuned for the POWER2
                     Super Chip.
                pwr2
                     Produces an object optimized for the POWER2
                     hardware platforms.
                pwrx
                     This is equivalent to pwr2.
                pwr2s
                     The optimizations are tuned for the desktop
                     implementation of the POWER2 architecture,
                     which has a narrower processor-to-memory bus
                     than other POWER2 implementations.
                pwr3
                     Produces an object optimized for the POWER3
                     hardware platforms.
                pwr4
                     Produces an object optimized for the POWER4
                     hardware platforms.
                pwr5
                     Produces an object optimized for the POWER5
                     hardware platforms.
                rs64a
                     Produces an object optimized for the RS64I
                     processor.
                rs64b
                     Produces an object optimized for the RS64II
                     processor.
                rs64c
                     Produces an object optimized for the RS64III
                     processor.
                ppc970
                     Produces an object optimized for PowerPC 970
                     processors.

                The compiler uses -qtune setting that is compatible
                with the target architecture, which is controlled
                by the -qarch, -q32, and -q64 options.  The default
                setting is determined by the setting of -qarch.

         -qunroll[={auto|yes}] | -qnounroll
                Specifies whether unrolling DO loops is allowed in
                a program. Unrolling is allowed on outer and inner
                DO loops.  The suboptions are:

                auto
                     The compiler performs basic loop unrolling.
                yes
                     The compiler looks for more opportunities to
                     perform loop unrolling than is done with the
                     -qunroll=auto option. Specifying -qunroll with
                     no suboptions is equivalent to -qunroll=yes.

                The default is -qunroll=auto.

         -qunwind | -qnounwind
                Specifies that the compiler will preserve the
                default behavior for saves and restores to volatile
                registers during a procedure call.  If you specify
                -qnounwind, the compiler rearranges subprograms to
                minimize saves and restores to volatile registers.
                This rearrangement may make it impossible for the
                program or debuggers to walk through or "unwind"
                subprogram stack frame chains.  The default is
                -qunwind.

         -qvecnvol | -qnovecnvol
                Asserts that the compiled application will use both
                volatile and non-volatile vector registers. You
                should use this option only after understanding
                interoperability with old binaries. If you are
                compiling C/C++ code in Fortran which calls any of
                the following subroutines: setjmp(),longjmp(),
                sigsetjmp(), siglongjmp(), _setjmp(), _longjmp(),
                getcontext(), setcontext(), makecontext(), and
                swapcontext(), then you should set -qnovecnvol.
                bos.adt.include version 5.3.0.30 or greater should
                be installed to use -qvecnvol on the host system.
                The default is -qnovecnvol.

         -qzerosize | -qnozerosize
                Improves performance of Fortran 77 and some Fortran
                90 and Fortran 95 programs by preventing checking
                for zero-sized character strings and arrays.
                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90, and f95 commands, the default is
                -qzerosize.  For the xlf, xlf_r, xlf_r7, f77, and
                fort77 commands, the default is -qnozerosize.

  Error Checking and Debugging Options
         -C     Checks each reference to an array element, array
                section, or character substring for correctness.
                This is the short form of -qcheck.

         -D     Specifies whether the compiler compiles fixed
                source form lines with a D in column 1 or treats
                them as comments. Please note that in order to pass
                C-style -D macro definitions to the C preprocessor
                (e.g. compiling a file that ends with .F) use the
                -W option. For example:
                -WF,-DDEFINE_THIS
                -D is the short form of -qdlines.

         -g     Generates debug information for use by a symbolic
                debugger.

         -qcheck | -qnocheck
                The long form of the -C option. See -C for details.
                The default is -qnocheck.

         -qdbg | -qnodbg
                The long form of the -g option. See -g for details.
                The default is -qnodbg.

         -qdpcl | -qnodpcl
                Generates symbols that tools based on the Dynamic
                Probe Class Library (DPCL) API can use to see the
                structure of an executable file. You must also
                specify the -g option when you specify -qdpcl.
                This option has no effect when optimization (-O) is
                enabled. The default is -qnodpcl.

         -qextchk | -qnoextchk
                Sets up type-checking information for common
                blocks, procedure definitions, procedure
                references, and module data. Later, the linker can
                detect mismatches across compilation units using
                this information.  The default is -qnoextchk.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Determines what types of floating-point exception
                conditions to detect at run time. The program
                receives a SIGTRAP signal when the corresponding
                exception occurs.  <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                enable
                     Turn on checking for the specified exceptions
                     in the main program so that the exceptions
                     generate SIGTRAP signals.
                imprecise
                     Only check for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detect and trap on floating-point inexact, if
                     exception checking is enabled.
                invalid
                     Detect and trap on floating-point invalid
                     operations.
                nanq
                     Detect and trap all quiet not-a-number (NaNQ)
                     values and signaling not-a-number (NaNS)
                     values.
                overflow
                     Detect and trap on floating-point overflow.
                underflow
                     Detect and trap on floating-point underflow.
                zerodivide
                     Detect and trap on floating-point division by
                     zero.

                The default is -qnoflttrap. When -qflttrap is
                specified with no suboptions, the default activated
                suboptions are: overflow, underflow, zerodivide,
                invalid, and inexact.

         -qfullpath | -qnofullpath
                Records the full (or absolute) path names of source
                and include files in object files compiled with
                debugging information (-g option).  The default is
                -qnofullpath.

         -qhalt=<sev>
                Stops before producing any object, executable, or
                assembler source files if the maximum severity of
                compile-time messages equals or exceeds the
                specified severity <sev>, where the severity levels
                are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                The default is -qhalt=s.

         -qinitauto[=<hex_value>] | -qnoinitauto
                Initializes each byte or word (4 bytes) of storage
                for automatic variables to a specific value,
                depending on the length specified in <hex_value>.
                This helps you to locate variables that are
                referenced before they are defined. <hex_value> is
                a 1 to 8 digit hexadecimal number.  The default is
                -qnoinitauto. If you specify -qinitauto without a
                <hex_value>, the compiler initializes the value of
                each byte of automatic storage to zero. This option
                should be used for debugging purposes only.

         -qlanglvl=<suboption>
                Determines which language standard (or
                subset/superset of a standard) to check against for
                nonconformance. This option will only produce
                messages; all code valid in extended mode will
                compile regardless of which suboption is specified.
                The suboptions are:

                77std
                     Accepts the language specified by the ANSI
                     Fortran 77 standard.
                90std
                     Accepts the language specified by the ISO
                     Fortran 90 standard.
                90pure
                     Same as 90std, except that it reports errors
                     for any obsolescent Fortran 90 features used.
                90ext
                     Obsolete suboption that is equivalent to
                     extended.
                95std
                     Accepts the language specified by the ISO
                     Fortran 95 standard.
                95pure
                     Same as 95std, except that it also reports
                     errors for any obsolescent Fortran 95 features
                     used.
                2003std
                     Accepts the language that the ISO Fortran 95
                     standard specifies, as well as all Fortran
                     2003 features supported by XL Fortran, and
                     reports anything else as an error.
                2003pure
                     The same as 2003std except that it also
                     reports errors for any obsolescent Fortran
                     2003 features used.
                extended
                     Accepts the full Fortran 95 language standard,
                     all Fortran 2003 features supported by XL
                     Fortran, and all extensions, effectively
                     turning off language-level checking.

                The default is -qlanglvl=extended.

         -qlinedebug | -qnolinedebug
                Generates line number and source file name
                information for the debugger. This option produces
                minimal debugging information, so the resulting
                object size is smaller than what is produced if the
                -g debugging option is specified. The default is
                -qnolinedebug.

         -qobject | -qnoobject
                Specifies whether to produce an object file or to
                stop immediately after checking the syntax of the
                source files.  The default is -qobject.

         -qsaa | -qnosaa
                Checks for conformance to the SAA Fortran language
                definition. It identifies nonconforming source code
                and also options that allow such nonconformances.
                The default is -qnosaa.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, and other information, in the
                corresponding object file. The compilation must
                produce an object file for this option to take
                effect.  The default is -qnosaveopt.

         -qsigtrap[=<trap_handler>]
                When you are compiling a file that contains a main
                program, this option sets up the specified trap
                handler to catch SIGTRAP exceptions. This option
                enables you to install a handler for SIGTRAP
                signals without calling the SIGNAL subprogram in
                the program. Specifying -qsigtrap with no
                <trap_handler> is equivalent to -qsigtrap=xl__trce.

         -qtbtable=<suboption>
                Limits the amount of debugging traceback
                information in object files, which reduces the size
                of the program. The suboptions are:

                none
                     Includes no traceback information.
                small
                     Includes traceback information but not the
                     names of procedures or information about
                     procedure parameters.
                full
                     Includes complete traceback information.

                The default is full traceback information in the
                object file when compiling non-optimized (without
                -O) or for debugging (with -g).  Otherwise, the
                default is -qtbtable=small.

         -qwarn64 | -qnowarn64
                Assists in porting code from a 32-bit environment
                to a 64-bit environment by detecting the truncation
                of an 8-byte integer pointer to 4 bytes. The
                -qwarn64 option uses informational messages to
                identify statements that may cause problems with
                the 32-bit to 64-bit migration.  The default is
                -qnowarn64.

         -qxflag=<suboption>
                Specifies rarely-needed compiler behaviors.  The
                suboptions are:

                oldtab
                     For fixed source form programs, interprets a
                     tab in columns 1 to 5 as a single character.
                     The source statement still starts immediately
                     after the tab, but the tab character is
                     treated as a single character for counting
                     columns. This setting allows up to 71
                     characters of input, depending on where the
                     tab character occurs.
                dvz
                     Specifying -qxflag=dvz causes the compiler to
                     generate code to detect floating-point
                     divide-by-zero operations. With this option
                     on, the extra code calls the external handler
                     function __xl_dzx when the divisor is zero.
                xalias
                     This is obsolete. Please use -qalias=nostd in
                     your new applications.

         -qxlines | -qnoxlines
                Specifies whether fixed source form lines with a X
                in column 1 are compiled or treated as comments.
                The default is -qnoxlines.

  Listing and Message Options
         -#     Generates information on the progress of the
                compilation without actually running the individual
                components.

         -S     Produces one or more .s files, showing equivalent
                assembler source for each Fortran source file.

         -V     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes. This is the
                same as -v except that you can cut and paste
                directly from the display to create a command.

         -v     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes.

         -w     Suppresses informational, language-level, and
                warning messages. This option sets -qflag=e:e.

         -qattr[=full] | -qnoattr
                Specifies whether to produce the attribute
                component of the attribute and cross-reference
                section of the listing.  The listing contains all
                identifiers (-qattr=full) or only the names that
                are referenced (-qattr).  The default is -qnoattr.

         -qflag=<listing_severity>:<terminal_severity>
                Specifies the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> determines
                the minimum level for the listing file, and
                <terminal_severity> determines the minimum level
                for the terminal.  The severity levels are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                Note that both <listing_severity> and
                <terminal_severity> must be specified.  The default
                is -qflag=i:i.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                Specifying -qlist with no suboptions is equivalent
                to specifying -qlist=nooffset.  The default is
                -qnolist.

         -qlistopt | -qnolistopt
                Determines whether to show the setting of every
                compiler option in the listing file or only
                selected options. These selected options include
                those specified on the command line or directives
                plus some that are always put in the listing.  The
                default is -qnolistopt.

         -qnoprint
                Prevents the compiler from creating the listing
                file, regardless of the settings of other listing
                options.

         -qphsinfo | -qnophsinfo
                Determines whether timing information is displayed
                on the terminal for each compiler phase.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qreport[=<suboptions>] | -qnoreport
                Determines whether to produce transformation
                reports showing how the program is parallelized and
                how loops are optimized.  The suboptions are:

                hotlist
                     Produces a report showing how loops are
                     transformed.
                smplist
                     Produces a report showing how the program is
                     parallelized.

                The default is -qnoreport.

         -qsource | -qnosource
                Determines whether to produce the source section of
                the listing.  The default is -qnosource.

         -qsuppress[={<msg_nums_list>|cmpmsg}] | -qnosuppress
                Determines which messages to suppress from the
                output stream.  The suboptions are:

                <msg_nums_list>
                     A colon-separated list of 7-digit compiler
                     message numbers.
                cmpmsg
                     Suppresses the informational messages that
                     report compilation progress and a successful
                     completion.

                The default is -qnosuppress.

         -qversion
                Displays the version and release of the invoking
                compiler. Specify this option on its own with the
                compiler command.

         -qxref[=full] | -qnoxref
                Determines whether to produce the cross-reference
                component of the attribute and cross-reference
                section of the listing.  If you specify only
                -qxref, only identifiers that are used are
                reported. If you specify -qxref=full, the listing
                contains information about all identifiers that
                appear in the program, whether they are used or
                not.  The default is -qnoxref.

  Compatibility Options
         -1     Executes each DO loop in the compiled program at
                least once if its DO statement is executed, even if
                the iteration count is 0. This option provides
                compatibility with Fortran 66. The default is to
                follow the behavior of later Fortran standards,
                where DO loops are not performed if the iteration
                count is 0. This is the short form of the -qonetrip
                option.

         -u     Specifies that no implicit typing of variable names
                is permitted. It has the same effect as using the
                IMPLICIT NONE statement in each scope that allows
                implicit statements. By default, implicit typing is
                allowed.

         -qautodbl=<setting>
                Converts single-precision floating-point
                calculations to double-precision or converts
                double-precision calculations to extended-
                precision.  <setting> can be:

                none
                     Does not promote or pad any objects that share
                     storage.
                dbl4
                     Promotes floating-point objects that are
                     single precision or are composed of such
                     objects.
                dbl8
                     Promotes floating-point objects that are
                     double-precision or are composed of such
                     objects.
                dbl
                     Combines the promotions done by dbl4 and dbl8.
                dblpad4
                     Performs the same promotions as dbl4, and pads
                     objects of other types (except CHARACTER) that
                     can share storage with promoted objects.
                dblpad8
                     Performs the same promotions as dbl8, and also
                     pads objects of other types (except CHARACTER)
                     if they can share storage with promoted
                     objects.
                dblpad
                     Combines the promotions done by dbl4 and dbl8,
                     and also pads objects of other types (except
                     CHARACTER) if they can share storage with
                     promoted objects.

                The default is -qautodbl=none.

         -qcclines | -qnocclines
                Enables recognition of conditional compilation
                lines in fixed source form and F90 free source
                form. IBM free source form is not supported.  The
                default is -qcclines if -qsmp=omp is specified.
                Otherwise, the default is -qnocclines.

         -qctyplss[={arg|noarg}] | -qnoctyplss
                Specifies whether character constant expressions
                are allowed wherever typeless constants may be
                used. Specifying -qctyplss=arg allows character
                constant expressions, but if a Hollerith constant
                is used as an actual argument, it is passed to the
                procedure as if it was an integer actual argument.
                The default is -qnoctyplss. If -qctypless is
                specified with no suboption, the default is
                -qctyplss=noarg.

         -qddim | -qnoddim
                Specifies that the bounds of pointee arrays are
                re-evaluated each time the arrays are referenced
                and removes some restrictions on the bounds
                expressions for pointee arrays.  The default is
                -qnoddim.

         -qdpc[=<e>] | -qnodpc
                Increases the precision of real constants, for
                maximum accuracy, when assigning real constants to
                DOUBLE PRECISION variables. -qdpc=<e> also promotes
                constants with an <e> exponent.  The default is
                -qnodpc.

         -qescape | -qnoescape
                Specifies whether the backslash is treated as an
                escape character in character strings, Hollerith
                constants, H edit descriptors, and character string
                edit descriptors.  The default is -qescape.

         -qextern=<procedure_names_list>
                Allows user-written procedures to be called instead
                of XL Fortran intrinsics. <procedure_names_list> is
                a colon-separated list of procedure names.  The
                procedure names are treated as if they appear in an
                EXTERNAL statement in each compilation unit being
                compiled.

         -qextname[=<names_list>] | -qnoextname
                Adds an underscore to the names of all global
                entities, which helps in porting programs from
                systems where this is a convention for mixed-
                language programs. <names_list> is a colon-
                separated list of global entity names.  The default
                is -qnoextname.

         -qinit=f90ptr
                Makes the initial association status of pointers
                disassociated instead of undefined. The default
                association status of pointers is undefined.

         -qintlog | -qnointlog
                Allows mixture of integer and logical data entities
                in expressions and statements. The default is
                -qnointlog.

         -qintsize={2|4|8}
                Sets the size (in bytes) of default INTEGER and
                LOGICAL data entities (that is, those for which no
                length or kind is specified).  The default is
                -qintsize=4.

         -qlog4 | -qnolog4
                Specifies whether the result of a logical operation
                with logical operands is a LOGICAL(4) or is a
                LOGICAL with the maximum length of the operands.
                The default is -qnolog4.

         -qmodule=mangle81
                Specifies that the compiler should use the XL
                Fortran Version 8.1 naming convention for non-
                intrinsic module files. This option allows you to
                produce modules and their associated object files
                with the Version 10.1 compiler and link these
                object files with others compiled with the Version
                8.1 compiler, or earlier.

         -qnullterm | -qnonullterm
                Appends a null character to each character constant
                expression that is passed as a dummy argument, to
                make it more convenient to pass strings to C
                functions. The default is -qnonullterm.

         -qonetrip | -qnoonetrip
                The long form of the -1 option. See -1 for details.
                The default is -qnoonetrip.

         -qport=<suboption> | -qnoport
                Increases flexibility when porting programs to XL
                Fortran, providing a number of options to
                accommodate Fortran language extensions.  The
                suboptions are:

                clogicals | noclogicals
                     Allows non-zero integers to be treated as true
                     when used as logicals. The change affects all
                     logical operators. This suboption only takes
                     effect if -qintlog is activated.  The default
                     is noclogicals.
                hexint | nohexint
                     Specifies that typeless constant hexadecimal
                     strings are converted to integers when passed
                     as actual arguments to the INT intrinsic
                     function. Typeless constant hexadecimal
                     strings which are not passed as actual
                     arguments to INT remain unaffected.  The
                     default is nohexint.
                mod | nomod
                     Relaxes existing constraints on the MOD
                     intrinsic function, allowing two arguments of
                     the same data type parameter to be of
                     different kind type parameters. The result
                     will be of the same type as the argument, but
                     with the larger kind type parameter value.
                     The default is nomod.
                nullarg | nonullarg
                     For an external or internal procedure
                     reference, this causes the compiler to treat
                     an empty argument (which is delimited by a
                     left parenthesis and a comma, two commas, or a
                     comma and a right parenthesis) as a null
                     argument. This suboption has no effect if the
                     argument list is empty.  The default is
                     nonullarg.
                sce | nosce
                     By default, the compiler performs short
                     circuit evaluation in selected logical
                     expressions using XL Fortran rules. Specifying
                     'sce' allows the compiler to use non-XL
                     Fortran rules. The compiler will perform short
                     circuit evaluation if the current rules allow
                     it.  The default is nosce.
                typestmt | notypestmt
                     The TYPE statement, which behaves in a manner
                     similar to the PRINT statement, is supported
                     whenever this option is specified. The default
                     is notypestmt.
                typlssarg | notyplssarg
                     Converts all typeless constants to default
                     integers if the constants are actual arguments
                     to an intrinsic procedure whose associated
                     dummy arguments are of integer type. Dummy
                     arguments associated with typeless actual
                     arguments of non-integer type remain
                     unaffected by this option.  The default is
                     notyplssarg.

                The default is -qnoport.

         -qposition={appendold|appendunknown}
                Positions the file pointer at the end of the file
                when data is written after an OPEN statement with
                no "POSITION=" specifier, and the corresponding
                "STATUS=" value (OLD or UNKNOWN) is specified.  The
                default depends on the I/O specifiers in the OPEN
                statement and on the compiler invocation command.
                The default is -qposition=appendold for the xlf,
                xlf_r, xlf_r7, and f77/fort77 commands and the
                defined Fortran 90 and Fortran 95 behaviors for the
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, xlf95_r7,
                f90 and f95 commands.

         -qqcount | -qnoqcount
                Accepts the character-count Q edit descriptor (Q)
                as well as the extended-precision Q edit descriptor
                (Qw.d). With -qnoqcount, all Q edit descriptors are
                interpreted as the extended-precision Q edit
                descriptor.  The default is -qnoqcount.

         -qrealsize=<bytes>
                Sets the default size of REAL, DOUBLE PRECISION,
                COMPLEX and DOUBLE COMPLEX values. The allowed
                values for <bytes> are 4 and 8.  The default is
                -qrealsize=4.

         -qsave[=<suboption>] | -qnosave
                Specifies the default storage class for local
                variables.  The suboptions are:

                all
                     The default storage class for all local
                     variables is STATIC. This is the default when
                     -qsave is specified without a suboption.
                defaultinit
                     The default storage class is STATIC for local
                     variables of derived type that have default
                     initialization specified.

                Specifying -qnosave sets the default storage class
                to AUTOMATIC.  The default is -qsave for xlf,
                xlf_r, xlf_r7, f77, or fort77 to duplicate the
                behavior of FORTRAN77 commands, and -qnosave
                otherwise.

         -qsclk[=<suboption>]
                Specifies the resolution that the SYSTEM_CLOCK
                intrinsic procedure uses in a program.  The
                suboptions are:

                centi
                     Uses centisecond resolution for the values
                     returned.
                micro
                     Uses microsecond resolution.

                The default is -qsclk=centi.

         -qswapomp | -qnoswapomp
                Specifies that the compiler should recognize and
                substitute OpenMP routines in XL Fortran programs.
                The default is -qswapomp.

         -qundef | -qnoundef
                The long form of the -u option. See -u for details.
                The default is -qnoundef.

         -qxlf77=<settings_list>
                Provides compatibility with Fortran 77 aspects of
                language semantics and I/O data format that have
                changed. Most of these changes are required by the
                Fortran 90 standard. <settings_list> is a colon-
                separated list of one or more of the following
                suboptions:

                blankpad | noblankpad
                     For internal, direct-access, and stream-access
                     files, uses a default setting equivalent to
                     pad='no'. This setting produces conversion
                     errors when reading from such a file if the
                     format requires more characters than the
                     record has, thus duplicating the XL Fortran
                     Version 2 behavior.
                gedit77 | nogedit77
                     Uses Fortran 77 semantics for the output of
                     REAL objects with the G edit descriptor.
                intarg | nointarg
                     Converts all the integer arguments of an
                     intrinsic procedure to the kind of the longest
                     argument, if they are of different kinds.
                intxor | nointxor
                     Treats .XOR. as a logical binary intrinsic
                     operator rather than a defined operator.
                leadzero | noleadzero
                     Produces a leading zero in real output under
                     the D, E, L, F and Q edit descriptors.
                oldboz | nooldboz
                     Turns blanks into zeros for data read by B, O,
                     and Z edit descriptors, regardless of the
                     "BLANK=" specifier or any BN or BZ control
                     edit descriptors.
                persistent | nopersistent
                     Saves the addresses of arguments to
                     subprograms with ENTRY statements in static
                     storage.
                softeof | nosofteof
                     Allows READ and WRITE operations when a unit
                     is positioned after its endfile record, unless
                     that position is the result of executing an
                     ENDFILE statement.

                The default suboptions are: blankpad, nogedit77,
                nointarg, nointxor, leadzero, nooldboz,
                nopersistent, and nosofteof for the f90, xlf90,
                xlf90_r, xlf90_r7, f95, xlf95, xlf95_r, and
                xlf95_r7 commands, and are the exact opposite for
                the xlf, xlf_r, xlf_r7, f77, and fort77 commands.

         -qxlf90=<settings_list>
                Provides backward compatibility with XL Fortran for
                AIX Version 5 and the Fortran 90 standard for
                certain aspects of the Fortran language.
                <settings_list> is a colon-separated list of one or
                both of the following suboptions:

                signedzero | nosignedzero
                     Determines how the SIGN(A,B) function handles
                     signed real 0.0. Prior to XL Fortran Version
                     6.1, SIGN(A,B) returned |A| when B=-0.0. This
                     behavior conformed with the Fortran 90
                     standard. Now, if you specify the
                     -qxlf90=signedzero compiler option, SIGN(A,B)
                     returns -|A| when B=-0.0. This behavior
                     conforms to the Fortran 95 standard and is
                     consistent with the IEEE standard for binary
                     floating-point arithmetic.
                autodealloc | noautodealloc
                     Determines whether the compiler deallocates
                     allocatable objects that are declared locally
                     without either the SAVE or the STATIC
                     attribute and have a status of currently
                     allocated when the subprogram terminates.

                The default suboptions are signedzero and
                autodealloc for the xlf95, xlf95_r, xlf95_r7 and
                f95 invocation commands. For all other invocation
                commands, the default suboptions are nosignedzero
                and noautodealloc.

  Linking Options
         -b64   The AIX operating system provides 64-bit shared
                object files in both libc.a and libm.a. In 64-bit
                mode, you can use the -b64 linker option to
                instruct ld to bind with 64-bit objects.

         -bdynamic, -bshared, -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                This is available on AIX 4.2 and above.

                -bdynamic
                     Specifies that shared objects are linked
                     dynamically.
                -bshared
                     Equivalent to -bdynamic.
                -bstatic
                     Specifies that shared objects are statically
                     linked into the output file.

                The default is -bdynamic.

         -bhalt:<error_level>
                Specifies the maximum error level that is allowed
                before the linker (ld) command halts. If any linker
                command has an error return value greater than the
                value that is specified by the <error_level>
                variable, linking stops.  The default value is 4,
                as specified in the configuration file.

         -bloadmap:<filename>
                Requests that a log of linker actions and messages
                be saved in file <filename>. You can use the log to
                help diagnose linking problems.

         -bmaxdata=<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint.  The default
                is -bmaxdata=0.

         -bmaxstack:<bytes>
                Specifies the maximum amount of space to reserve
                for the program stack segment for programs where
                the size of these regions is a constraint.

         -brtl | -bnortl
                Determines which algorithm will be used to find
                libraries that are specified with the -l option. If
                -brtl is specified, run-time linking is enabled.

         -bshared
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.
                This is equivalent to -bdynamic.

         -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.

         -L<dir>
                Searches in directory <dir> for libraries specified
                by -l<key>.

         -l<key>
                Searches the specified library file at link time,
                where <key> selects the library lib<key>.a.

  Compiler Customization Options
         -B<prefix>
                Determines a substitute path name for executable
                files used during compilation, such as the compiler
                of linker. <prefix> is the name of a directory
                where the alternative executable files reside. It
                is added to the beginning of the standard program
                names and must end in a slash (/). This option can
                be used in combination with the -t option, which
                determines which of these components are affected
                by -B.

         -F[<config_file>][:<stanza>]
                Specifies an alternative configuration file
                <config_file>, the command to be used (<stanza>)
                within the configuration file, or both. At least
                one of the arguments must be supplied.  The default
                stanza depends on the name of the command used to
                invoke the compiler.

         -P{v|k}[!]
                This option is obsolete and has no effect. Invokes
                the selected optimizing preprocessor.

         -P     Invokes the -Pv preprocessor before the compiler.

         -Pv    Invokes the -Pv preprocessor before the compiler.

         -Pk    Invokes the -Pk preprocessor before the compiler.

         -P!    Invokes the -Pv preprocessor only.

         -Pv!   Invokes the -Pv preprocessor only.

         -Pk!   Invokes the -Pk preprocessor only.

         -t<components_list>
                Applies the prefix from the -B option to the
                specified program, <components_list>, where
                <components_list> is a chain (with no separator
                character inbetween each <component>, ie: "-taFp")
                containing one or more of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

         -W<component>,<options_list>
                Passes the listed options to a component that is
                executed during compilation. <options_list> is a
                comma-separated list of one or more options, and
                <component> is one of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies compile-time rounding of constant
                floating-point expressions. It is equivalent to the
                -qieee option. <rounding_mode> is one of the
                following:

                n = Round to nearest
                m = Round toward minus infinity
                p = Round toward plus infinity
                z = Round toward zero

                The default is -yn.

         -qfloat=<suboptions_list>
                Determines different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using an inline sequence of
                     code instead of a call to a library function.
                fold | nofold
                     Evaluates constant floating-point expressions
                     at compile time.
                hsflt | nohsflt
                     Speeds up calculations by removing range-
                     checking on single-precision float results,
                     and on conversions from floating-point to
                     integer.
                hssngl | nohssngl
                     Speeds up calculations in a safer way than
                     hsflt, by rounding single-precision
                     expressions only when the results are stored
                     into REAL(4) memory locations
                maf | nomaf
                     Generates multiply-add instructions where
                     appropriate.
                nans | nonans
                     Allows you to use the -qflttrap=invalid:enable
                     option to detect and deal with exception
                     conditions that involve signaling NaN (not-a-
                     number) values.
                rndsngl | norndsngl
                     Rounds the result of each single-precision
                     (REAL(4)) operation to single-precision,
                     rather than waiting until the full expression
                     is evaluated. It sacrifices speed for
                     consistency with results from similar
                     calculations on other types of computers.
                rrm | norrm
                     Turns off compiler optimizations that require
                     the rounding mode to be the default, round-
                     to-nearest, at run time.
                rsqrt | norsqrt
                     Allows the optimizer to change a division by
                     the result of a square root operation into a
                     multiply by the reciprocal of the square root.
                strictnmaf | nostrictnmaf
                     Turns off floating-point transformations that
                     are used to introduce negative MAF
                     instructions, as these transformations do not
                     preserve the sign of a zero value.
                The default active suboptions are: nofltint, fold,
                nohsflt, nohssngl, maf, nonans, norelax, norndsngl,
                norrm, norsqrt, and nostrictnmaf.

         -qieee=<mode>
                Specifies the rounding mode for the compiler to use
                when evaluating constant floating-point expressions
                at compile time, where <mode> is one of:

                near = Round to nearest representable number
                minus = Round toward minus infinity
                plus = Round toward plus infinity
                zero = Round toward zero

                The default is -qieee=near.

         -qstrictieeemod | -qnostrictieeemod
                Specifies that the compiler will adhere to the
                Fortran 2003 IEEE arithmetic rules for the
                ieee_arithmetic and ieee_exceptions intrinsic
                modules.  The default is -qstrictieeemod.

  SEE ALSO
         xlfndi(1), showpdf(1), cleanpdf(1), mergepdf(1),
         resetpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/fortran/xlfortran/library/
         www.ibm.com/software/awdtools/fortran/xlfortran/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL Fortran Enterprise Edition V10.1 for AIX(R)

         5724-M13

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.









































configure:10661: $? = 249
configure:10663: xlf90 -V </dev/null >&5
export XL_CONFIG=/etc/xlf.cfg:xlf90 
pg /usr/lpp/xlf/bin/default_msg/xlf.txt 



  xlf(1)                 IBM (October 2005)                  xlf(1)



  NAME
         xlf, xlf90, xlf95, xlf_r, xlf90_r, xlf95_r, f90, f95,
         xlf_r7, xlf90_r7, xlf95_r7, f77, fort77 - invoke the IBM
         XL Fortran compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

  DESCRIPTION
         xlf and related invocation commands compile Fortran source
         files.  They also process assembler source files and
         object files. Unless you specify the -c option, these
         commands call the link editor to produce a single object
         file.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/xlf.cfg).  For more information,
         refer to the XL Fortran Enterprise Edition Compiler
         Reference.

         The input file may have any of the following suffixes:
          .f - Fortran source file
          .f77 or .F77 - Fortran source file (fixed form) using
               f77 stanza configuration
          .f90 or .F90 - Fortran source file (free form) using
               xlf90 configuration
          .f95 or .F95 - Fortran source file (free form) using
               xlf95 configuration
          .o or .a - object file for ld command
          .s - assembler source file
          .F - Fortran source file with cpp preprocessor directives

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -I<dir>
                Adds a directory to the search path for include
                files and .mod files. If XL Fortran calls cpp, this
                option adds a directory to the search path for
                #include files. Before checking the default
                directories for include and .mod files, the
                compiler checks each directory in the search path.
                For include files, this path is only used if the
                file name in an INCLUDE line is not provided with
                an absolute path. By default, the following
                directories are searched in the following order:

                1) The current directory (where the compiler is
                executed)
                2) The directory where the source file is located

         -k     Specifies that the program is in free source form.
                This is the short form of -qfree=f90.

         -U     Makes the compiler case-sensitive to identifier
                names. By default the compiler interprets all names
                as if they were lower-case.

         -qci=<nums_list>
                Activates the specified INCLUDE lines. <nums_list>
                is a colon-separated list of identification numbers
                (from 1 to 255) of conditional includes.

         -qcr | -qnocr
                Allows you to control how the compiler interprets
                the CR (carriage return) character.  This allows
                you to compile code written using a MAC OS X or
                DOS/Windows editor.  The default is -qcr.

         -qdirective[=<list>] | -qnodirective[=<list>]
                Specifies target strings to be recognized in a
                comment directive. <list> is a colon-separated list
                of directives. If -qdirective is specified without
                any directives, it turns on the default trigger
                constant IBM* if it has been turned off by a
                previous -qnodirective.  The default is
                -qnodirective.

         -qdlines | -qnodlines
                This is the long form of the -D option. See -D for
                more information.  The default is -qnodlines.

         -qfixed[=<right_margin>]
                Indicates that the input source program is in fixed
                source form and optionally specifies the maximum
                line length, <right_margin>. The maximum
                <right_margin> value is 132.  The default is
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77
                invocation commands, and -qfree=f90 for f90, f95,
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, and
                xlf95_r7.

         -qfree[={f90|ibm}]
                Indicates that the source code is in free source
                form. The 'ibm' and 'f90' suboptions specify
                compatibility with the free source form defined for
                VS Fortran and Fortran 90, respectively. Note that
                the free source form defined for Fortran 90 also
                applies to Fortran 95.  The default is -qfree=f90
                for f90, f95, xlf90, xlf90_r, xlf90_r7, xlf95,
                xlf95_r, and xlf95_r7 invocation commands, and
                -qfixed=72 for xlf, xlf_r, xlf_r7, f77, and fort77.

         -qmbcs | -qnombcs
                Indicates to the compiler whether character literal
                constants, Hollerith constants, H edit descriptors,
                and character string edit descriptors can contain
                Multibyte Character Set (MBCS) or Unicode
                characters. The default is -qnombcs.

         -qmixed | -qnomixed
                The long form of the -U option. Makes the compiler
                case-sensitive to identifier names. The default is
                -qnomixed.

         -qsuffix=<option>=<suffix>
                Specifies the source file suffix, <suffix>, on the
                command line instead of in the .cfg file, where
                <option> can be:

                f
                     Specifies that <suffix> is the new source file
                     suffix.
                o
                     Specifies that <suffix> is the new object-file
                     suffix.
                s
                     Specifies that <suffix> is the new assembler
                     source file suffix.
                cpp
                     Specifies that <suffix> is the new
                     preprocessor source file suffix.

  Output Control Options
         -c     Produces an object file instead of an executable
                file.  Prevents the completed object file from
                being sent to the ld command for link-editing. With
                this option, the output is a .o file for each
                source file.

         -d     Causes preprocessed source files that are produced
                by cpp to be kept rather than to be deleted. By
                default temporary files produced by cpp are
                deleted.

         -o <name>
                Specifies a name for the output object, executable,
                or assembler source file.  The default name is
                a.out for executable files. The default name for an
                object source file is the same as the source file
                except that it has a '.o' extension.

         -q32   Selects 32-bit mode compilation mode. The -q32 and
                -qarch options determine the target machines that
                the 32-bit executable will run on. The default is
                -q32.

         -q64[=<suboption>]
                Selects 64-bit compilation mode. The -q64 option
                indicates that the object module will be created in
                64-bit object format and that the 64-bit
                instruction set will be generated. Note that you
                may compile in a 32-bit environment to create 64-
                bit objects, but you must link them in a 64-bit
                environment with the -q64 option. Use -q32 and -q64
                options, along with the -qarch and -qtune compiler
                options, to optimize the output of the compiler to
                the architecture on which that output will be used.
                The suboptions are:

                largetype
                     The object file will use the 64-bit Large Data
                     Type (LDT) ABI. This object file may only be
                     used on versions of AIX greater than or equal
                     to 5.0.

         -qmoddir=<directory>
                Specifies the location for any .mod files that the
                compiler writes. By default .mod files are placed
                in the current directory.

         -qpic[=<suboption>] | -qnopic
                Generates Position Independent Code (PIC) that can
                be used in shared libraries.  The suboptions are:

                large
                     Allows the size of the Table of Contents to be
                     larger than 64K. This suboption allows for
                     more addresses to be stored in the Table of
                     Contents and generates larger code.
                small
                     Assumes that the size of the Table of Contents
                     can be at most 64K.

                The default is -qpic=small.

  Optimization Options
         -NS<bytes>
                Specifies the size (in bytes) of the register spill
                space; the internal program storage areas used by
                the optimizer for register spills to storage.  The
                default is -NS512.

         -O[<level>]
                Specifies whether to optimize code during
                compilation and, if so, at which level. -O<level>
                is equivalent to -qoptimize=<level>. <level> can
                be:

                (not specified)
                     This is equivalent to -O2.
                0
                     Almost all optimizations are disabled. This is
                     equivalent to -qnooptimize.
                1
                     Reserved for future use. Ignored by compiler.
                2
                     Performs a set of optimizations that are
                     intended to offer improved performance without
                     an unreasonable increase in time or storage
                     that is required for compilation.
                3
                     Performs additional optimizations that are
                     memory intensive, compile-time intensive, and
                     may change the semantics of the program
                     slightly, unless -qstrict is specified. We
                     recommend these optimizations when the desire
                     for run-time speed improvements outweighs the
                     concern for limiting compile-time resources.
                     This level of optimization also affects the
                     setting of the -qfloat option, turning on the
                     'fltint' and 'rsqrt' suboptions by default,
                     and setting -qmaxmem=-1.  This option implies
                     -qhot=level=0.
                4
                     Aggressively optimizes the source program,
                     trading off additional compile time for
                     potential improvements in the generated code.
                     You can specify the option at compile time or
                     at link time. if you specify it at link time,
                     it will have no effect unless you also specify
                     it at compile time for at least the file that
                     contains the main program. -O4 implies the
                     following other options:
                     -qhot
                     -qipa
                     -O3
                     -qarch=auto
                     -qtune=auto
                     -qcache=auto
                5
                     Performs all optimizations from -O4, and also
                     sets -qipa=level=2 to perform full inter-
                     procedural data flow and alias analysis.

                -O4 and -O5 perform whole-program analysis and
                should be specified at both compilation and link
                time to have maximal effect.  The default is -O0.

         -p[g]  Sets up the object file for profiling. Specifying
                '-pg' will produce more extensive statistics. The
                default is no profiling.

         -Q[<suboption>]
                Specifies whether Fortran 90 or Fortran 95
                procedures are inlined and/or the names of
                particular procedures that should or should not be
                inlined. names is a list of procedure names that
                are separated by colons. This option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions,
                     subject to limits on the number of inlined
                     calls and the amount of code size increase as
                     a result.
                -Q!
                     Turns off inlining.
                -Q+<names_list>
                     Inlines the functions listed in <names_list>
                     and any other appropriate functions, where
                     <names_list> is a colon-separated list.
                -Q-<names_list>
                     Does not inline functions listed in
                     <names_list>, where <names_list> is a colon-
                     separated list. All other appropriate
                     functions are inlined.

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qalias=<suboptions_list>
                Indicates whether a program contains certain
                categories of aliasing. The compiler limits the
                scope of some optimizations when there is a
                possibility that different names are aliases for
                the same storage locations. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                aryovrlp | noaryovrlp
                     Indicates whether the compilation units
                     contain any array assignments between
                     storage-associated arrays. If not, specify
                     noaryovrlp to improve performance.
                intptr | nointptr
                     Indicates whether the compilation units
                     contain any integer POINTER statements. If so,
                     specify intptr.
                pteovrlp | nopteovrlp
                     Indicates whether any pointee variables may be
                     used to refer to any data objects that are not
                     pointee variables, or whether two pointee
                     variables may be used to refer to the same
                     storage location. If not, specify nopteovrlp.
                std | nostd
                     Indicates whether the compilation units
                     contain any non-standard aliasing (see
                     Compiler Reference for more information). If
                     so, specify nostd.  (-qalias=nostd replaces
                     the obsolete -qxflag=xalias option.)

                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90 and f95 commands, the default
                suboptions are: aryovrlp, nointptr, pteovrlp, and
                std. For the xlf, xlf_r, xlf_r7, f77, and fort77
                commands, the default suboptions are: aryovrlp,
                intptr, pteovrlp, and std.

         -qalign=<suboptions_list>
                Specifies the alignment of data objects in storage
                to avoid performance problems with misaligned data.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                4k | no4k
                     Specifies whether large arrays and structures
                     (at least 4096 bytes in size) will be aligned
                     on a 4K (4096-byte, or page) boundary.  Use of
                     this option may help to improve the
                     performance of programs using data striping.
                bindc=<suboption>
                     Specifies that the alignment and padding for
                     an XL Fortran derived type with the BIND(C)
                     attribute are compatible with a C struct type
                     that is compiled with the corresponding XL C
                     alignment option. The compatible alignment
                     options are:
                     -qalign=bindc=bit_packed
                     -qalign=bindc={full|power}
                     -qalign=bindc=packed
                     -qalign=bindc={twobyte|mac68k}
                     -qalign=bindc=natural
                     Each of these "-qalign=bindc=" sub-suboptions
                     is equivalent to the XL C "-qalign=" suboption
                     of the same name.  (ie: For
                     -qalign=bindc=bit_packed, the corresponding XL
                     C option is -qalign=bit_packed)
                struct=<option>
                     Specifies how objects or arrays of a derived
                     type (declared using a record structure) are
                     stored, and whether or not padding is used
                     between components. The options are:
                     natural
                          Objects of a derived type are stored with
                          sufficient padding such that components
                          will be stored on their natural alignment
                          boundaries, unless storage association
                          requires otherwise.
                     packed
                          Objects of a derived type are stored with
                          no padding between components, other than
                          any padding represented by %FILL
                          components.
                     port
                          Storage padding is the same as described
                          above for the struct=natural suboption,
                          except that the alignment of components
                          of type complex is the same as the
                          alignment of components of type real of
                          the same kind. The padding for an object
                          that is immediately followed by a union
                          is inserted at the beginning of the first
                          map component for each map in that union.

                The default activated suboptions are: no4k,
                struct=natural, and bindc=power.

         -qarch=<suboption>
                Specifies which instructions the compiler can
                generate.  The suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                com
                     You can run the executable file that the
                     compiler generated on any hardware platform
                     supported by the compiler, because the file
                     contains only instructions that are common to
                     all machines.
                p2sc
                     The executable file can be executed on any
                     POWER2 Super Chip hardware platform.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms. Using -q64 with ppc upgrades the
                     architecture to ppc64grsq.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.  In 64-bit mode,
                     produces object code containing optional
                     graphics instructions that will run on 64-bit
                     PowerPC platforms, but not on 32-bit-only
                     platforms.  Using -q64 with ppcgr upgrades the
                     architecture to ppc64grsq.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                pwr
                     Produces an object that contains instructions
                     that run on any of the POWER or POWER2
                     hardware platforms.
                pwr2s
                     The executable file can be executed on any
                     desktop implementation of the POWER2 chip.
                pwr2
                     Produces an object that contains instructions
                     that run on the POWER2 hardware platforms.
                pwrx
                     Equivalent to pwr2.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3, POWER4, POWER5,
                     POWER5+ or PowerPC 970 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4, POWER5, POWER5+ or
                     PowerPC 970 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 or POWER5+ hardware
                     platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on any POWER5+ hardware platform.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.
                601
                     Produces an object that contains instructions
                     that run on PowerPC 601 systems.
                603
                     Produces an object that contains instructions
                     that run on PowerPC 603 systems.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                ppc64v
                     Generates instructions for any 64-bit PowerPC
                     processor (like PowerPC 970) with VMX.

                The default is -qarch=com.

         -qassert=<suboptions_list>
                Provides information about the program to help
                fine-tune optimizations. <suboptions_list> is a
                colon-separated list of one or both of the
                following suboptions:

                deps | nodeps
                     Loops can contain loop-carried dependencies.
                itercnt=<n>
                     The iteration count of a typical loop is <n>.

                The default is -qassert=deps:itercnt=1024.

         -qcache=<suboptions_list>
                Specifies the cache configuration for a specific
                execution machine. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                assoc=<n>
                     Specifies the set-associativity of the cache:
                     0   = Directly-mapped
                     1   = Fully associative
                     (n > 1) = <n>-way set-associative
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty resulting
                     from a cache miss.
                level=<level>
                     Specifies which level of cache is affected:
                     1 = Basic cache
                     2 = Level-2 cache, or the table lookaside
                     buffer (TLB) if the machine has no level-2
                     cache
                     3 = TLB, in a machine that does have a level-2
                     cache
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<type>
                     Specifies the type of cache that the settings
                     apply to:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The default is determined by the -qtune and -qarch
                settings.

         -qcompact | -qnocompact
                Reduces optimizations that increase code size.  The
                default is -qnocompact.

         -qdirectstorage | -qnodirectstorage
                Specifies that a compilation unit might reference
                write-through-enabled or cache-inhibited storage.
                The default is -qnodirectstorage.

         -qenablevmx | -qnoenablevmx
                Enables generation of Vector Multimedia Extension
                (VMX) instructions.  The default is -qnoenablevmx.

         -qessl | -qnoessl
                Allows the use of the Engineering and Scientific
                Subroutine Library (ESSL) routines in place of
                Fortran 90 intrinsic procedures.  The default is
                -qnoessl.

         -qfdpr | -qnofdpr
                Provides object files with information that the AIX
                Feedback Directed Program Restructuring (fdpr)
                performance-tuning utility needs to optimize the
                resulting executable file.  The default is
                -qnofdpr.

         -qhot[=<suboptions>] | -qnohot
                Performs high-order loop analysis and
                transformations during optimization. This option is
                a powerful alternative to hand-tuning that provides
                opportunities to optimize loops and array language.
                The suboptions are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value. When <n> is not
                     specified, the compiler will pad any arrays
                     where it infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. See the XL Fortran
                     Compiler Reference for more information.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a VMX (Vector Multimedia Extension)
                     instruction.  If you specify -qhot=nosimd, the
                     compiler performs optimizations on loops and
                     arrays, but avoids replacing certain code with
                     VMX instructions.
                vector | novector
                     Specifies whether to allow the compiler to
                     optimize by replacing code with calls to
                     vector library routines.  Only takes effect
                     when specified with -qnostrict or -O3 or
                     higher optimization level.

                The default is -qnohot. If -qhot is specified
                without parameters, the default is -qhot=vector.

         -qipa[=<suboptions_list>] | -qnoipa
                Enhances -O optimization by performing detailed
                analysis across procedures. Optimization level -O2
                or higher is required when using -qipa.
                <suboptions_list> is a colon-separated list of
                suboptions. Regular expressions are supported when
                specifying <procedure_names_list> in the following
                -qipa suboptions: exits, inline, noinline, lowfreq,
                pure, safe, and unknown. <procedure_names_list> is
                a comma-separated list. The suboptions are:

                exits=<procedure_names_list>
                     Specifies a selected set of procedures which
                     always end the program.
                clonearch=<architecture_list> | noclonearch
                     Allows you to specify multiple architectures
                     in the event that you want to compile your
                     application for multiple architectures with a
                     single binary file. <architecture_list> is a
                     comma-separated list of one or more of the
                     following architectures: pwr4, pwr5, ppc970,
                     and pwr5x. This must be specified during link
                     time.  The default is noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of the mangled names of the functions that you
                     wish to clone (or not clone). Please note that
                     this suboption has no effect unless
                     -qipa=clonearch=<arch> is specified. You can
                     use regular expression syntax when specifying
                     function names.  The default is nocloneproc.
                inline=<options_list>
                     Specifies a colon-separated list of inline
                     options, which are as follows:
                     auto | noauto
                          Specifies whether to automatically
                          perform inline expansion.  The default is
                          auto.
                     limit=<n>
                          Changes the size limits that the
                          inline=auto option uses to determine how
                          much inline expansion to do. <n> is the
                          optimizers approximation of the number of
                          bytes of code that will be generated.
                     <procedure_names_list>
                          Specifies the procedures to attempt to
                          inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This argument is
                          implemented only when inline=auto is on.
                noinline=<procedure_names_list>
                     Specifies the procedures which are not to be
                     inlined.
                isolated=<procedure_names_list>
                     Specifies the procedures that are not compiled
                     with -qipa and do not directly refer to any
                     global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization to perform:
                     0
                          Performs minimal inter-procedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full inter-procedural data flow and alias
                          analysis.
                     The default level is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, in the event that an object
                     listing has been requested using the -qlist or
                     -qipa=list option. The default name is
                     "a.lst". Specifying 'long' or 'short'
                     determines which listing sections will be
                     included. The default is short.
                lowfreq=<procedure_names_list>
                     Specifies the procedures that are likely to be
                     called infrequently during the course of a
                     typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the interprocedural behavior for
                     procedures not compiled with -qipa.  The
                     default is 'unknown'.
                object | noobject
                     Includes standard object code in the object
                     files. If the noobject option is specified, it
                     can substantially reduce overall compilation
                     time by not generating object code during the
                     first IPA phase. The default is object. Note,
                     this is a compile-time suboption.
                partition={small|medium|large}
                     Specifies the size of the regions within the
                     program to analyze. Larger partitions contain
                     more procedures, which result in better
                     interprocedural analysis but require more
                     storage to optimize.  The default is medium.
                pdfname=<filename>
                     Specifies the name of the profile data file
                     that contains the PDF profiling information.
                     The default filename is __pdf.
                pure=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "pure" must be "isolated" and
                     "safe". It must not alter the internal state
                     nor have side-effects, which are defined as
                     potentially altering any data object visible
                     to the caller.
                safe=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure that you
                     specified as "safe" may modify global
                     variables and dummy arguments.
                stdexits | nostdexits
                     Specifies that certain predefined routines can
                     be optimized as with the exits suboption. The
                     procedures are abort, exit, _exit, and
                     _assert.  The default is nostdexits.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a list of procedures that are not
                     compiled with -qipa. Any procedure specified
                     as "unknown" may make calls to other parts of
                     the program compiled with -qipa and modify
                     global variables and dummy arguments.

                Options intended for use by the link-time phase of
                -qipa are -qlibansi, -qlibessl, -qlibposix and
                -qthreaded.  The default is -qnoipa.

         -qkeepparm | -qnokeepparm
                Ensures that the incoming parameters are stored on
                the stack even when optimizing. This may negatively
                impact execution performance. This option then
                provides access to the values of incoming
                parameters to tools, such as debuggers, simply by
                preserving those values on the stack.  The default
                is -qnokeepparm.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large 16 MB pages provided on POWER4 and higher
                based systems.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are in fact the library
                functions.  The default is -qnolibansi.

         -qlibessl | -qnolibessl
                Assumes that all functions with the name of an ESSL
                defined library function are, in fact, the library
                functions.  The default is -qnolibessl.

         -qlibposix | -qnolibposix
                Assumes that all functions with the name of a POSIX
                1003.1 defined library function are, in fact, the
                system functions.  The default is -qnolibposix.

         -qmaxmem=<kbytes>
                Limits the amount of memory that the compiler
                allocates while performing specific, memory-
                intensive optimizations. If <kbytes> is -1, the
                compiler will take as much memory as it needs
                without checking for limits. The default is
                -qmaxmem=2048 when using optimization level -O2,
                and -qmaxmem=-1 when using -O3 or greater.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 Produces an object that is instrumented to collect
                run-time execution information. This is phase 1 of
                the profile-directed feedback optimization process.

         -qpdf2 Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

         -qprefetch | -qnoprefetch
                Automatically inserts prefetch instructions where
                the optimizer perceives a benefit.  The default is
                -qprefetch.

         -qrecur | -qnorecur
                Not recommended. Allows external subprograms to be
                called recursively. For new programs, use the
                RECURSIVE keyword, which provides a standard-
                conforming way of using recursive procedures.  The
                default is -qnorecur.

         -qshowpdf | -qnoshowpdf
                Adds additional call and block count profiling
                information to an executable. This option is used
                together with the -qpdf1 option.  The default is
                -qnoshowpdf.

         -qsmallstack[=<suboption>] | -qnosmallstack
                Specifies that the compiler will minimize stack
                usage where possible. This option can take the
                form:

                -qsmallstack
                     Enables only general small stack
                     transformations.
                -qsmallstack=dynlenonheap
                     Asserts that automatic variables which are
                     dynamically-sized are allocated from the heap
                     and enables general small stack
                     transformations.
                -qsmallstack=nodynlenonheap
                     Disables dynamic-length variable allocation.
                -qnosmallstack
                     Disables only the general small stack
                     transformations.

                The default is -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Specifies that code should be produced for an SMP
                system.  <suboptions_list> is a colon-separated
                list of one or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization.
                nested_par | nonested_par
                     Specifies that prescriptive nested parallel
                     constructs should be parallelized by the
                     compiler.
                omp | noomp
                     Enforces compliance with the OpenMP Fortran
                     API.
                opt | noopt
                     Controls optimization for parallelization.
                     -qsmp=noopt specifies that the compiler should
                     do the least amount of optimization that is
                     required to parallelize the code and preserve
                     maximum debugability.
                rec_locks | norec_locks
                     Allows recursive locks to be used to avoid
                     problems associated with CRITICAL constructs.
                     If -qsmp=norec_locks is specified, recursive
                     locks will not be used to implement critical
                     sections.
                schedule=<suboptions>
                     The schedule suboption can take any of the
                     following sub-suboptions:
                     affinity[=<n>]
                     dynamic[=<n>]
                     guided[=<n>]
                     runtime
                     static[=<n>]
                     For their descriptions, refer to the XL
                     Fortran Compiler Reference.
                threshold=<n>
                     Controls the amount of automatic loop
                     parallelization that occurs. The value of <n>
                     represents the lower limit allowed for
                     parallelization of a loop, based on the level
                     of "work" present in a loop.

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, opt, noomp, norec_locks, nonested_par,
                schedule=runtime, and threshold=100.

         -qspillsize=<bytes>
                The long form of -NS. See the -NS option.  The
                default is -qspillsize=512.

         -qstacktemp=<num>
                Determines where to allocate applicable compiler
                temporaries at run time. The allocation depends on
                the value of <num>. The values are:

                0
                     Indicates that the compiler will decide
                     whether to allocate the applicable compiler
                     temporaries on the heap or the stack.
                -1
                     Indicates that applicable compiler temporaries
                     are to be always allocated on the stack. This
                     is the best-performing setting but uses the
                     most amount of stack storage.
                (1 or greater)
                     Indicates that applicable compiler temporaries
                     less than this value (bytes) should be
                     allocated on the stack and those greater than
                     or equal to this value should be allocated on
                     the heap.

                The default is -qstacktemp=0.

         -qstrict | -qnostrict
                Ensures that optimizations done by the -O3 and
                greater (and optionally -O2) options do not alter
                the semantics of a program. This option is ignored
                for -qnoopt.  For -O3 and greater, the default is
                -qnostrict. Otherwise the default is -qstrict.

         -qstrict_induction | -qnostrict_induction
                Prevents the compiler from performing induction
                (loop counter) variable optimizations that could
                alter the semantics of a program.  The default is
                -qnostrict_induction.

         -qthreaded
                Asserts that the compiler will generate thread-safe
                code when generating its own code or allocating
                compiler-created temporary data. User-written code
                that is algorithmically not thread-safe is
                unaffected by this option and will remain non-
                thread-safe. The default is -qthreaded when using
                xlf_r, xlf_r7, xlf90_r, xlf90_r7, xlf95_r, or
                xlf95_r7 invocation commands.

         -qtune=<suboption>
                Tunes instruction selection, scheduling, and other
                implementation-dependent performance enhancements
                for a specific implementation of a hardware
                architecture.  -qtune will not alter the ability of
                a program to run on a processor but will produce
                optimal code sequences tuned to a particular
                processor.  The suboptions are:

                auto
                     Automatically detects the specific processor
                     type of the compiling machine and produces an
                     object optimized for that processor.
                601
                     Produces an object optimized for all the
                     PowerPC 601 processors.
                603
                     Produces an object optimized for all the
                     PowerPC 603 processors.
                604
                     Produces an object optimized for all the
                     PowerPC 604 processors.
                pwr
                     Produces an object optimized for the POWER
                     hardware platforms.
                p2sc
                     The optimizations are tuned for the POWER2
                     Super Chip.
                pwr2
                     Produces an object optimized for the POWER2
                     hardware platforms.
                pwrx
                     This is equivalent to pwr2.
                pwr2s
                     The optimizations are tuned for the desktop
                     implementation of the POWER2 architecture,
                     which has a narrower processor-to-memory bus
                     than other POWER2 implementations.
                pwr3
                     Produces an object optimized for the POWER3
                     hardware platforms.
                pwr4
                     Produces an object optimized for the POWER4
                     hardware platforms.
                pwr5
                     Produces an object optimized for the POWER5
                     hardware platforms.
                rs64a
                     Produces an object optimized for the RS64I
                     processor.
                rs64b
                     Produces an object optimized for the RS64II
                     processor.
                rs64c
                     Produces an object optimized for the RS64III
                     processor.
                ppc970
                     Produces an object optimized for PowerPC 970
                     processors.

                The compiler uses -qtune setting that is compatible
                with the target architecture, which is controlled
                by the -qarch, -q32, and -q64 options.  The default
                setting is determined by the setting of -qarch.

         -qunroll[={auto|yes}] | -qnounroll
                Specifies whether unrolling DO loops is allowed in
                a program. Unrolling is allowed on outer and inner
                DO loops.  The suboptions are:

                auto
                     The compiler performs basic loop unrolling.
                yes
                     The compiler looks for more opportunities to
                     perform loop unrolling than is done with the
                     -qunroll=auto option. Specifying -qunroll with
                     no suboptions is equivalent to -qunroll=yes.

                The default is -qunroll=auto.

         -qunwind | -qnounwind
                Specifies that the compiler will preserve the
                default behavior for saves and restores to volatile
                registers during a procedure call.  If you specify
                -qnounwind, the compiler rearranges subprograms to
                minimize saves and restores to volatile registers.
                This rearrangement may make it impossible for the
                program or debuggers to walk through or "unwind"
                subprogram stack frame chains.  The default is
                -qunwind.

         -qvecnvol | -qnovecnvol
                Asserts that the compiled application will use both
                volatile and non-volatile vector registers. You
                should use this option only after understanding
                interoperability with old binaries. If you are
                compiling C/C++ code in Fortran which calls any of
                the following subroutines: setjmp(),longjmp(),
                sigsetjmp(), siglongjmp(), _setjmp(), _longjmp(),
                getcontext(), setcontext(), makecontext(), and
                swapcontext(), then you should set -qnovecnvol.
                bos.adt.include version 5.3.0.30 or greater should
                be installed to use -qvecnvol on the host system.
                The default is -qnovecnvol.

         -qzerosize | -qnozerosize
                Improves performance of Fortran 77 and some Fortran
                90 and Fortran 95 programs by preventing checking
                for zero-sized character strings and arrays.
                For the xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r,
                xlf95_r7, f90, and f95 commands, the default is
                -qzerosize.  For the xlf, xlf_r, xlf_r7, f77, and
                fort77 commands, the default is -qnozerosize.

  Error Checking and Debugging Options
         -C     Checks each reference to an array element, array
                section, or character substring for correctness.
                This is the short form of -qcheck.

         -D     Specifies whether the compiler compiles fixed
                source form lines with a D in column 1 or treats
                them as comments. Please note that in order to pass
                C-style -D macro definitions to the C preprocessor
                (e.g. compiling a file that ends with .F) use the
                -W option. For example:
                -WF,-DDEFINE_THIS
                -D is the short form of -qdlines.

         -g     Generates debug information for use by a symbolic
                debugger.

         -qcheck | -qnocheck
                The long form of the -C option. See -C for details.
                The default is -qnocheck.

         -qdbg | -qnodbg
                The long form of the -g option. See -g for details.
                The default is -qnodbg.

         -qdpcl | -qnodpcl
                Generates symbols that tools based on the Dynamic
                Probe Class Library (DPCL) API can use to see the
                structure of an executable file. You must also
                specify the -g option when you specify -qdpcl.
                This option has no effect when optimization (-O) is
                enabled. The default is -qnodpcl.

         -qextchk | -qnoextchk
                Sets up type-checking information for common
                blocks, procedure definitions, procedure
                references, and module data. Later, the linker can
                detect mismatches across compilation units using
                this information.  The default is -qnoextchk.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Determines what types of floating-point exception
                conditions to detect at run time. The program
                receives a SIGTRAP signal when the corresponding
                exception occurs.  <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                enable
                     Turn on checking for the specified exceptions
                     in the main program so that the exceptions
                     generate SIGTRAP signals.
                imprecise
                     Only check for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detect and trap on floating-point inexact, if
                     exception checking is enabled.
                invalid
                     Detect and trap on floating-point invalid
                     operations.
                nanq
                     Detect and trap all quiet not-a-number (NaNQ)
                     values and signaling not-a-number (NaNS)
                     values.
                overflow
                     Detect and trap on floating-point overflow.
                underflow
                     Detect and trap on floating-point underflow.
                zerodivide
                     Detect and trap on floating-point division by
                     zero.

                The default is -qnoflttrap. When -qflttrap is
                specified with no suboptions, the default activated
                suboptions are: overflow, underflow, zerodivide,
                invalid, and inexact.

         -qfullpath | -qnofullpath
                Records the full (or absolute) path names of source
                and include files in object files compiled with
                debugging information (-g option).  The default is
                -qnofullpath.

         -qhalt=<sev>
                Stops before producing any object, executable, or
                assembler source files if the maximum severity of
                compile-time messages equals or exceeds the
                specified severity <sev>, where the severity levels
                are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                The default is -qhalt=s.

         -qinitauto[=<hex_value>] | -qnoinitauto
                Initializes each byte or word (4 bytes) of storage
                for automatic variables to a specific value,
                depending on the length specified in <hex_value>.
                This helps you to locate variables that are
                referenced before they are defined. <hex_value> is
                a 1 to 8 digit hexadecimal number.  The default is
                -qnoinitauto. If you specify -qinitauto without a
                <hex_value>, the compiler initializes the value of
                each byte of automatic storage to zero. This option
                should be used for debugging purposes only.

         -qlanglvl=<suboption>
                Determines which language standard (or
                subset/superset of a standard) to check against for
                nonconformance. This option will only produce
                messages; all code valid in extended mode will
                compile regardless of which suboption is specified.
                The suboptions are:

                77std
                     Accepts the language specified by the ANSI
                     Fortran 77 standard.
                90std
                     Accepts the language specified by the ISO
                     Fortran 90 standard.
                90pure
                     Same as 90std, except that it reports errors
                     for any obsolescent Fortran 90 features used.
                90ext
                     Obsolete suboption that is equivalent to
                     extended.
                95std
                     Accepts the language specified by the ISO
                     Fortran 95 standard.
                95pure
                     Same as 95std, except that it also reports
                     errors for any obsolescent Fortran 95 features
                     used.
                2003std
                     Accepts the language that the ISO Fortran 95
                     standard specifies, as well as all Fortran
                     2003 features supported by XL Fortran, and
                     reports anything else as an error.
                2003pure
                     The same as 2003std except that it also
                     reports errors for any obsolescent Fortran
                     2003 features used.
                extended
                     Accepts the full Fortran 95 language standard,
                     all Fortran 2003 features supported by XL
                     Fortran, and all extensions, effectively
                     turning off language-level checking.

                The default is -qlanglvl=extended.

         -qlinedebug | -qnolinedebug
                Generates line number and source file name
                information for the debugger. This option produces
                minimal debugging information, so the resulting
                object size is smaller than what is produced if the
                -g debugging option is specified. The default is
                -qnolinedebug.

         -qobject | -qnoobject
                Specifies whether to produce an object file or to
                stop immediately after checking the syntax of the
                source files.  The default is -qobject.

         -qsaa | -qnosaa
                Checks for conformance to the SAA Fortran language
                definition. It identifies nonconforming source code
                and also options that allow such nonconformances.
                The default is -qnosaa.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, and other information, in the
                corresponding object file. The compilation must
                produce an object file for this option to take
                effect.  The default is -qnosaveopt.

         -qsigtrap[=<trap_handler>]
                When you are compiling a file that contains a main
                program, this option sets up the specified trap
                handler to catch SIGTRAP exceptions. This option
                enables you to install a handler for SIGTRAP
                signals without calling the SIGNAL subprogram in
                the program. Specifying -qsigtrap with no
                <trap_handler> is equivalent to -qsigtrap=xl__trce.

         -qtbtable=<suboption>
                Limits the amount of debugging traceback
                information in object files, which reduces the size
                of the program. The suboptions are:

                none
                     Includes no traceback information.
                small
                     Includes traceback information but not the
                     names of procedures or information about
                     procedure parameters.
                full
                     Includes complete traceback information.

                The default is full traceback information in the
                object file when compiling non-optimized (without
                -O) or for debugging (with -g).  Otherwise, the
                default is -qtbtable=small.

         -qwarn64 | -qnowarn64
                Assists in porting code from a 32-bit environment
                to a 64-bit environment by detecting the truncation
                of an 8-byte integer pointer to 4 bytes. The
                -qwarn64 option uses informational messages to
                identify statements that may cause problems with
                the 32-bit to 64-bit migration.  The default is
                -qnowarn64.

         -qxflag=<suboption>
                Specifies rarely-needed compiler behaviors.  The
                suboptions are:

                oldtab
                     For fixed source form programs, interprets a
                     tab in columns 1 to 5 as a single character.
                     The source statement still starts immediately
                     after the tab, but the tab character is
                     treated as a single character for counting
                     columns. This setting allows up to 71
                     characters of input, depending on where the
                     tab character occurs.
                dvz
                     Specifying -qxflag=dvz causes the compiler to
                     generate code to detect floating-point
                     divide-by-zero operations. With this option
                     on, the extra code calls the external handler
                     function __xl_dzx when the divisor is zero.
                xalias
                     This is obsolete. Please use -qalias=nostd in
                     your new applications.

         -qxlines | -qnoxlines
                Specifies whether fixed source form lines with a X
                in column 1 are compiled or treated as comments.
                The default is -qnoxlines.

  Listing and Message Options
         -#     Generates information on the progress of the
                compilation without actually running the individual
                components.

         -S     Produces one or more .s files, showing equivalent
                assembler source for each Fortran source file.

         -V     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes. This is the
                same as -v except that you can cut and paste
                directly from the display to create a command.

         -v     Generates information on the progress of the
                compilation. As the compiler executes commands to
                perform different compilation steps, this option
                displays a simulation of the commands it calls and
                the system argument lists it passes.

         -w     Suppresses informational, language-level, and
                warning messages. This option sets -qflag=e:e.

         -qattr[=full] | -qnoattr
                Specifies whether to produce the attribute
                component of the attribute and cross-reference
                section of the listing.  The listing contains all
                identifiers (-qattr=full) or only the names that
                are referenced (-qattr).  The default is -qnoattr.

         -qflag=<listing_severity>:<terminal_severity>
                Specifies the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> determines
                the minimum level for the listing file, and
                <terminal_severity> determines the minimum level
                for the terminal.  The severity levels are:

                i = informational messages
                l = language-level messages
                w = warning messages
                e = error messages
                s = severe error messages
                u = unrecoverable error messages
                q = no messages

                Note that both <listing_severity> and
                <terminal_severity> must be specified.  The default
                is -qflag=i:i.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                Specifying -qlist with no suboptions is equivalent
                to specifying -qlist=nooffset.  The default is
                -qnolist.

         -qlistopt | -qnolistopt
                Determines whether to show the setting of every
                compiler option in the listing file or only
                selected options. These selected options include
                those specified on the command line or directives
                plus some that are always put in the listing.  The
                default is -qnolistopt.

         -qnoprint
                Prevents the compiler from creating the listing
                file, regardless of the settings of other listing
                options.

         -qphsinfo | -qnophsinfo
                Determines whether timing information is displayed
                on the terminal for each compiler phase.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qreport[=<suboptions>] | -qnoreport
                Determines whether to produce transformation
                reports showing how the program is parallelized and
                how loops are optimized.  The suboptions are:

                hotlist
                     Produces a report showing how loops are
                     transformed.
                smplist
                     Produces a report showing how the program is
                     parallelized.

                The default is -qnoreport.

         -qsource | -qnosource
                Determines whether to produce the source section of
                the listing.  The default is -qnosource.

         -qsuppress[={<msg_nums_list>|cmpmsg}] | -qnosuppress
                Determines which messages to suppress from the
                output stream.  The suboptions are:

                <msg_nums_list>
                     A colon-separated list of 7-digit compiler
                     message numbers.
                cmpmsg
                     Suppresses the informational messages that
                     report compilation progress and a successful
                     completion.

                The default is -qnosuppress.

         -qversion
                Displays the version and release of the invoking
                compiler. Specify this option on its own with the
                compiler command.

         -qxref[=full] | -qnoxref
                Determines whether to produce the cross-reference
                component of the attribute and cross-reference
                section of the listing.  If you specify only
                -qxref, only identifiers that are used are
                reported. If you specify -qxref=full, the listing
                contains information about all identifiers that
                appear in the program, whether they are used or
                not.  The default is -qnoxref.

  Compatibility Options
         -1     Executes each DO loop in the compiled program at
                least once if its DO statement is executed, even if
                the iteration count is 0. This option provides
                compatibility with Fortran 66. The default is to
                follow the behavior of later Fortran standards,
                where DO loops are not performed if the iteration
                count is 0. This is the short form of the -qonetrip
                option.

         -u     Specifies that no implicit typing of variable names
                is permitted. It has the same effect as using the
                IMPLICIT NONE statement in each scope that allows
                implicit statements. By default, implicit typing is
                allowed.

         -qautodbl=<setting>
                Converts single-precision floating-point
                calculations to double-precision or converts
                double-precision calculations to extended-
                precision.  <setting> can be:

                none
                     Does not promote or pad any objects that share
                     storage.
                dbl4
                     Promotes floating-point objects that are
                     single precision or are composed of such
                     objects.
                dbl8
                     Promotes floating-point objects that are
                     double-precision or are composed of such
                     objects.
                dbl
                     Combines the promotions done by dbl4 and dbl8.
                dblpad4
                     Performs the same promotions as dbl4, and pads
                     objects of other types (except CHARACTER) that
                     can share storage with promoted objects.
                dblpad8
                     Performs the same promotions as dbl8, and also
                     pads objects of other types (except CHARACTER)
                     if they can share storage with promoted
                     objects.
                dblpad
                     Combines the promotions done by dbl4 and dbl8,
                     and also pads objects of other types (except
                     CHARACTER) if they can share storage with
                     promoted objects.

                The default is -qautodbl=none.

         -qcclines | -qnocclines
                Enables recognition of conditional compilation
                lines in fixed source form and F90 free source
                form. IBM free source form is not supported.  The
                default is -qcclines if -qsmp=omp is specified.
                Otherwise, the default is -qnocclines.

         -qctyplss[={arg|noarg}] | -qnoctyplss
                Specifies whether character constant expressions
                are allowed wherever typeless constants may be
                used. Specifying -qctyplss=arg allows character
                constant expressions, but if a Hollerith constant
                is used as an actual argument, it is passed to the
                procedure as if it was an integer actual argument.
                The default is -qnoctyplss. If -qctypless is
                specified with no suboption, the default is
                -qctyplss=noarg.

         -qddim | -qnoddim
                Specifies that the bounds of pointee arrays are
                re-evaluated each time the arrays are referenced
                and removes some restrictions on the bounds
                expressions for pointee arrays.  The default is
                -qnoddim.

         -qdpc[=<e>] | -qnodpc
                Increases the precision of real constants, for
                maximum accuracy, when assigning real constants to
                DOUBLE PRECISION variables. -qdpc=<e> also promotes
                constants with an <e> exponent.  The default is
                -qnodpc.

         -qescape | -qnoescape
                Specifies whether the backslash is treated as an
                escape character in character strings, Hollerith
                constants, H edit descriptors, and character string
                edit descriptors.  The default is -qescape.

         -qextern=<procedure_names_list>
                Allows user-written procedures to be called instead
                of XL Fortran intrinsics. <procedure_names_list> is
                a colon-separated list of procedure names.  The
                procedure names are treated as if they appear in an
                EXTERNAL statement in each compilation unit being
                compiled.

         -qextname[=<names_list>] | -qnoextname
                Adds an underscore to the names of all global
                entities, which helps in porting programs from
                systems where this is a convention for mixed-
                language programs. <names_list> is a colon-
                separated list of global entity names.  The default
                is -qnoextname.

         -qinit=f90ptr
                Makes the initial association status of pointers
                disassociated instead of undefined. The default
                association status of pointers is undefined.

         -qintlog | -qnointlog
                Allows mixture of integer and logical data entities
                in expressions and statements. The default is
                -qnointlog.

         -qintsize={2|4|8}
                Sets the size (in bytes) of default INTEGER and
                LOGICAL data entities (that is, those for which no
                length or kind is specified).  The default is
                -qintsize=4.

         -qlog4 | -qnolog4
                Specifies whether the result of a logical operation
                with logical operands is a LOGICAL(4) or is a
                LOGICAL with the maximum length of the operands.
                The default is -qnolog4.

         -qmodule=mangle81
                Specifies that the compiler should use the XL
                Fortran Version 8.1 naming convention for non-
                intrinsic module files. This option allows you to
                produce modules and their associated object files
                with the Version 10.1 compiler and link these
                object files with others compiled with the Version
                8.1 compiler, or earlier.

         -qnullterm | -qnonullterm
                Appends a null character to each character constant
                expression that is passed as a dummy argument, to
                make it more convenient to pass strings to C
                functions. The default is -qnonullterm.

         -qonetrip | -qnoonetrip
                The long form of the -1 option. See -1 for details.
                The default is -qnoonetrip.

         -qport=<suboption> | -qnoport
                Increases flexibility when porting programs to XL
                Fortran, providing a number of options to
                accommodate Fortran language extensions.  The
                suboptions are:

                clogicals | noclogicals
                     Allows non-zero integers to be treated as true
                     when used as logicals. The change affects all
                     logical operators. This suboption only takes
                     effect if -qintlog is activated.  The default
                     is noclogicals.
                hexint | nohexint
                     Specifies that typeless constant hexadecimal
                     strings are converted to integers when passed
                     as actual arguments to the INT intrinsic
                     function. Typeless constant hexadecimal
                     strings which are not passed as actual
                     arguments to INT remain unaffected.  The
                     default is nohexint.
                mod | nomod
                     Relaxes existing constraints on the MOD
                     intrinsic function, allowing two arguments of
                     the same data type parameter to be of
                     different kind type parameters. The result
                     will be of the same type as the argument, but
                     with the larger kind type parameter value.
                     The default is nomod.
                nullarg | nonullarg
                     For an external or internal procedure
                     reference, this causes the compiler to treat
                     an empty argument (which is delimited by a
                     left parenthesis and a comma, two commas, or a
                     comma and a right parenthesis) as a null
                     argument. This suboption has no effect if the
                     argument list is empty.  The default is
                     nonullarg.
                sce | nosce
                     By default, the compiler performs short
                     circuit evaluation in selected logical
                     expressions using XL Fortran rules. Specifying
                     'sce' allows the compiler to use non-XL
                     Fortran rules. The compiler will perform short
                     circuit evaluation if the current rules allow
                     it.  The default is nosce.
                typestmt | notypestmt
                     The TYPE statement, which behaves in a manner
                     similar to the PRINT statement, is supported
                     whenever this option is specified. The default
                     is notypestmt.
                typlssarg | notyplssarg
                     Converts all typeless constants to default
                     integers if the constants are actual arguments
                     to an intrinsic procedure whose associated
                     dummy arguments are of integer type. Dummy
                     arguments associated with typeless actual
                     arguments of non-integer type remain
                     unaffected by this option.  The default is
                     notyplssarg.

                The default is -qnoport.

         -qposition={appendold|appendunknown}
                Positions the file pointer at the end of the file
                when data is written after an OPEN statement with
                no "POSITION=" specifier, and the corresponding
                "STATUS=" value (OLD or UNKNOWN) is specified.  The
                default depends on the I/O specifiers in the OPEN
                statement and on the compiler invocation command.
                The default is -qposition=appendold for the xlf,
                xlf_r, xlf_r7, and f77/fort77 commands and the
                defined Fortran 90 and Fortran 95 behaviors for the
                xlf90, xlf90_r, xlf90_r7, xlf95, xlf95_r, xlf95_r7,
                f90 and f95 commands.

         -qqcount | -qnoqcount
                Accepts the character-count Q edit descriptor (Q)
                as well as the extended-precision Q edit descriptor
                (Qw.d). With -qnoqcount, all Q edit descriptors are
                interpreted as the extended-precision Q edit
                descriptor.  The default is -qnoqcount.

         -qrealsize=<bytes>
                Sets the default size of REAL, DOUBLE PRECISION,
                COMPLEX and DOUBLE COMPLEX values. The allowed
                values for <bytes> are 4 and 8.  The default is
                -qrealsize=4.

         -qsave[=<suboption>] | -qnosave
                Specifies the default storage class for local
                variables.  The suboptions are:

                all
                     The default storage class for all local
                     variables is STATIC. This is the default when
                     -qsave is specified without a suboption.
                defaultinit
                     The default storage class is STATIC for local
                     variables of derived type that have default
                     initialization specified.

                Specifying -qnosave sets the default storage class
                to AUTOMATIC.  The default is -qsave for xlf,
                xlf_r, xlf_r7, f77, or fort77 to duplicate the
                behavior of FORTRAN77 commands, and -qnosave
                otherwise.

         -qsclk[=<suboption>]
                Specifies the resolution that the SYSTEM_CLOCK
                intrinsic procedure uses in a program.  The
                suboptions are:

                centi
                     Uses centisecond resolution for the values
                     returned.
                micro
                     Uses microsecond resolution.

                The default is -qsclk=centi.

         -qswapomp | -qnoswapomp
                Specifies that the compiler should recognize and
                substitute OpenMP routines in XL Fortran programs.
                The default is -qswapomp.

         -qundef | -qnoundef
                The long form of the -u option. See -u for details.
                The default is -qnoundef.

         -qxlf77=<settings_list>
                Provides compatibility with Fortran 77 aspects of
                language semantics and I/O data format that have
                changed. Most of these changes are required by the
                Fortran 90 standard. <settings_list> is a colon-
                separated list of one or more of the following
                suboptions:

                blankpad | noblankpad
                     For internal, direct-access, and stream-access
                     files, uses a default setting equivalent to
                     pad='no'. This setting produces conversion
                     errors when reading from such a file if the
                     format requires more characters than the
                     record has, thus duplicating the XL Fortran
                     Version 2 behavior.
                gedit77 | nogedit77
                     Uses Fortran 77 semantics for the output of
                     REAL objects with the G edit descriptor.
                intarg | nointarg
                     Converts all the integer arguments of an
                     intrinsic procedure to the kind of the longest
                     argument, if they are of different kinds.
                intxor | nointxor
                     Treats .XOR. as a logical binary intrinsic
                     operator rather than a defined operator.
                leadzero | noleadzero
                     Produces a leading zero in real output under
                     the D, E, L, F and Q edit descriptors.
                oldboz | nooldboz
                     Turns blanks into zeros for data read by B, O,
                     and Z edit descriptors, regardless of the
                     "BLANK=" specifier or any BN or BZ control
                     edit descriptors.
                persistent | nopersistent
                     Saves the addresses of arguments to
                     subprograms with ENTRY statements in static
                     storage.
                softeof | nosofteof
                     Allows READ and WRITE operations when a unit
                     is positioned after its endfile record, unless
                     that position is the result of executing an
                     ENDFILE statement.

                The default suboptions are: blankpad, nogedit77,
                nointarg, nointxor, leadzero, nooldboz,
                nopersistent, and nosofteof for the f90, xlf90,
                xlf90_r, xlf90_r7, f95, xlf95, xlf95_r, and
                xlf95_r7 commands, and are the exact opposite for
                the xlf, xlf_r, xlf_r7, f77, and fort77 commands.

         -qxlf90=<settings_list>
                Provides backward compatibility with XL Fortran for
                AIX Version 5 and the Fortran 90 standard for
                certain aspects of the Fortran language.
                <settings_list> is a colon-separated list of one or
                both of the following suboptions:

                signedzero | nosignedzero
                     Determines how the SIGN(A,B) function handles
                     signed real 0.0. Prior to XL Fortran Version
                     6.1, SIGN(A,B) returned |A| when B=-0.0. This
                     behavior conformed with the Fortran 90
                     standard. Now, if you specify the
                     -qxlf90=signedzero compiler option, SIGN(A,B)
                     returns -|A| when B=-0.0. This behavior
                     conforms to the Fortran 95 standard and is
                     consistent with the IEEE standard for binary
                     floating-point arithmetic.
                autodealloc | noautodealloc
                     Determines whether the compiler deallocates
                     allocatable objects that are declared locally
                     without either the SAVE or the STATIC
                     attribute and have a status of currently
                     allocated when the subprogram terminates.

                The default suboptions are signedzero and
                autodealloc for the xlf95, xlf95_r, xlf95_r7 and
                f95 invocation commands. For all other invocation
                commands, the default suboptions are nosignedzero
                and noautodealloc.

  Linking Options
         -b64   The AIX operating system provides 64-bit shared
                object files in both libc.a and libm.a. In 64-bit
                mode, you can use the -b64 linker option to
                instruct ld to bind with 64-bit objects.

         -bdynamic, -bshared, -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                This is available on AIX 4.2 and above.

                -bdynamic
                     Specifies that shared objects are linked
                     dynamically.
                -bshared
                     Equivalent to -bdynamic.
                -bstatic
                     Specifies that shared objects are statically
                     linked into the output file.

                The default is -bdynamic.

         -bhalt:<error_level>
                Specifies the maximum error level that is allowed
                before the linker (ld) command halts. If any linker
                command has an error return value greater than the
                value that is specified by the <error_level>
                variable, linking stops.  The default value is 4,
                as specified in the configuration file.

         -bloadmap:<filename>
                Requests that a log of linker actions and messages
                be saved in file <filename>. You can use the log to
                help diagnose linking problems.

         -bmaxdata=<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint.  The default
                is -bmaxdata=0.

         -bmaxstack:<bytes>
                Specifies the maximum amount of space to reserve
                for the program stack segment for programs where
                the size of these regions is a constraint.

         -brtl | -bnortl
                Determines which algorithm will be used to find
                libraries that are specified with the -l option. If
                -brtl is specified, run-time linking is enabled.

         -bshared
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.
                This is equivalent to -bdynamic.

         -bstatic
                Controls the processing of -l options and the way
                shared objects are processed by the linkage editor.
                See "-bdynamic, -bshared, -bstatic" for details.

         -L<dir>
                Searches in directory <dir> for libraries specified
                by -l<key>.

         -l<key>
                Searches the specified library file at link time,
                where <key> selects the library lib<key>.a.

  Compiler Customization Options
         -B<prefix>
                Determines a substitute path name for executable
                files used during compilation, such as the compiler
                of linker. <prefix> is the name of a directory
                where the alternative executable files reside. It
                is added to the beginning of the standard program
                names and must end in a slash (/). This option can
                be used in combination with the -t option, which
                determines which of these components are affected
                by -B.

         -F[<config_file>][:<stanza>]
                Specifies an alternative configuration file
                <config_file>, the command to be used (<stanza>)
                within the configuration file, or both. At least
                one of the arguments must be supplied.  The default
                stanza depends on the name of the command used to
                invoke the compiler.

         -P{v|k}[!]
                This option is obsolete and has no effect. Invokes
                the selected optimizing preprocessor.

         -P     Invokes the -Pv preprocessor before the compiler.

         -Pv    Invokes the -Pv preprocessor before the compiler.

         -Pk    Invokes the -Pk preprocessor before the compiler.

         -P!    Invokes the -Pv preprocessor only.

         -Pv!   Invokes the -Pv preprocessor only.

         -Pk!   Invokes the -Pk preprocessor only.

         -t<components_list>
                Applies the prefix from the -B option to the
                specified program, <components_list>, where
                <components_list> is a chain (with no separator
                character inbetween each <component>, ie: "-taFp")
                containing one or more of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

         -W<component>,<options_list>
                Passes the listed options to a component that is
                executed during compilation. <options_list> is a
                comma-separated list of one or more options, and
                <component> is one of the following:

                COMPONENT NAME           <component>       PROGRAM
                assembler                 a                as
                C preprocessor            F                cpp
                VAST-2 preprocessor       p                fpp
                KAP preprocessor          p                fppk
                compiler front end        c                xlfentry
                array language optimizer  h                xlfhot
                IPA/loop optimizer        I (upper-case i) ipa
                code generator            b                xlfcode
                binder                    z                bolt
                linker                    l (lower-case L) ld
                disassembler              d                dis

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies compile-time rounding of constant
                floating-point expressions. It is equivalent to the
                -qieee option. <rounding_mode> is one of the
                following:

                n = Round to nearest
                m = Round toward minus infinity
                p = Round toward plus infinity
                z = Round toward zero

                The default is -yn.

         -qfloat=<suboptions_list>
                Determines different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following
                suboptions:

                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using an inline sequence of
                     code instead of a call to a library function.
                fold | nofold
                     Evaluates constant floating-point expressions
                     at compile time.
                hsflt | nohsflt
                     Speeds up calculations by removing range-
                     checking on single-precision float results,
                     and on conversions from floating-point to
                     integer.
                hssngl | nohssngl
                     Speeds up calculations in a safer way than
                     hsflt, by rounding single-precision
                     expressions only when the results are stored
                     into REAL(4) memory locations
                maf | nomaf
                     Generates multiply-add instructions where
                     appropriate.
                nans | nonans
                     Allows you to use the -qflttrap=invalid:enable
                     option to detect and deal with exception
                     conditions that involve signaling NaN (not-a-
                     number) values.
                rndsngl | norndsngl
                     Rounds the result of each single-precision
                     (REAL(4)) operation to single-precision,
                     rather than waiting until the full expression
                     is evaluated. It sacrifices speed for
                     consistency with results from similar
                     calculations on other types of computers.
                rrm | norrm
                     Turns off compiler optimizations that require
                     the rounding mode to be the default, round-
                     to-nearest, at run time.
                rsqrt | norsqrt
                     Allows the optimizer to change a division by
                     the result of a square root operation into a
                     multiply by the reciprocal of the square root.
                strictnmaf | nostrictnmaf
                     Turns off floating-point transformations that
                     are used to introduce negative MAF
                     instructions, as these transformations do not
                     preserve the sign of a zero value.
                The default active suboptions are: nofltint, fold,
                nohsflt, nohssngl, maf, nonans, norelax, norndsngl,
                norrm, norsqrt, and nostrictnmaf.

         -qieee=<mode>
                Specifies the rounding mode for the compiler to use
                when evaluating constant floating-point expressions
                at compile time, where <mode> is one of:

                near = Round to nearest representable number
                minus = Round toward minus infinity
                plus = Round toward plus infinity
                zero = Round toward zero

                The default is -qieee=near.

         -qstrictieeemod | -qnostrictieeemod
                Specifies that the compiler will adhere to the
                Fortran 2003 IEEE arithmetic rules for the
                ieee_arithmetic and ieee_exceptions intrinsic
                modules.  The default is -qstrictieeemod.

  SEE ALSO
         xlfndi(1), showpdf(1), cleanpdf(1), mergepdf(1),
         resetpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/fortran/xlfortran/library/
         www.ibm.com/software/awdtools/fortran/xlfortran/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL Fortran Enterprise Edition V10.1 for AIX(R)

         5724-M13

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.









































configure:10666: $? = 249
configure:10674: checking whether we are using the GNU Fortran 90 compiler
configure:10717: result: no
configure:10724: checking whether xlf90 accepts -g
configure:10764: result: yes
configure:10787: checking for extension for Fortran 90 programs
configure:10795: xlf90 -c -q64 conftest.f90 1>&5
** conftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f90.
configure:10798: $? = 0
configure:10800: result: f90
configure:10823: checking whether the Fortran 90 compiler (xlf90 -q64 ) works
configure:10840: xlf90 -o conftest -q64  conftest.f90  1>&5
** conftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f90.
configure:10843: $? = 0
configure:10866: result: yes
configure:10872: checking whether the Fortran 90 compiler (xlf90 -q64 ) is a cross-compiler
configure:10874: result: no
configure:10903: checking for Fortran 90 module extension
configure:10922: xlf90 -c -q64 conftest.f >&5
** conftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:10925: $? = 0
configure:10979: result: mod
configure:10989: checking for Fortran 90 module include flag
configure:11014: xlf90 -c -q64 conftest.f >&5
** conf   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:11017: $? = 0
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:11093: result: -I
configure:11132: checking whether Fortran 90 accepts f90 suffix
configure:11156: xlf90 -c -q64 conftest.f90 >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f90.
configure:11163: $? = 0
configure:11184: result: yes
configure:11200: checking whether Fortran 90 compiler accepts option -O2
configure:11216: xlf90 -q64 -o conftest conftest.f90  >conftest.bas 2>&1
configure:11219: $? = 0
configure:11221: xlf90 -O2 -q64 -o conftest conftest.f90  >conftest.out 2>&1
configure:11224: $? = 0
configure:11227: result: yes
configure:11229: checking whether routines compiled with -O2 can be linked with ones compiled without -O2
configure:11235: xlf90 -c -q64 conftest2.f90 >conftest2.out 2>&1
configure:11238: $? = 0
configure:11240: xlf90 -O2 -q64 -o conftest conftest2.o conftest.f90  >conftest.bas 2>&1
configure:11243: $? = 0
configure:11282: result: yes
configure:11308: checking whether Fortran 90 compiler processes .F90 files with C preprocessor
configure:11319: xlf90 -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.F90 1>&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.F90.
configure:11322: $? = 0
configure:11344: result: yes
configure:11374: checking what libraries are needed to link Fortran90 programs with C routines that use stdio
configure:11396: xlc -c -q64 -O2 conftestc.c 1>&5
configure:11399: $? = 0
configure:11408: xlf90 -q64 -O2 -o conftest conftest.f90 conftestc.o 1>&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f90.
configure:11411: $? = 0
configure:11436: result: none
configure:11456: checking for f90 compiler vendor
configure:11496: result: ibm
configure:11584: checking for c++
configure:11611: result: xlc++
configure:11748: checking for C++ compiler version
configure:11756: xlc++ --version >&5
xlc++: 1501-216 command option --version is not recognized - passed to ld



  xlc(1)                 IBM (October 2005)                  xlc(1)



  NAME
         xlc, cc, c89, c99 and related commands - invoke the IBM XL
         C compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

         The invocation commands are:
         xlc, cc, c89, c99, xlc128, cc128, c89_128, c99_128,
         optionally followed by _r, _r4, or _r7.

  DESCRIPTION
         xlc and related commands compile C source files.  They
         also process assembler source files and object files. The
         compiler calls the link editor to produce a single
         executable or shared library, unless you specify the
         compiler options that prevent object files from being
         linked.

         The input file may have any of the following suffixes:
          .c = C source file
          .i = preprocessed C source file
          .a = archive file
          .o = object file for ld command
          .s = assembler source file
          .S = assembler source file that needs preprocessing

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -C     Preserves comments in preprocessed output if used
                with -E or -P. With the -E option, comments are
                written to standard output; with the -P option,
                comments are written to an output file.

         -D<name>[=[<def>]]
                Defines <name> as in the #define directive. <def>
                is an optional definition or value assigned to
                <name>. Specifying "-D<name>=" (with no <def>) is
                equivalent to "#define <name>"; specifying "-
                D<name>" is equivalent to "#define <name> 1".

         -I<dir>
                Specifies an additional search path for include
                filenames that do not specify an absolute path.

         -U<name>
                Undefines the identifier <name> defined by the
                compiler or by the -D<name> option.

         -qaltivec | -qnoaltivec
                Enables compiler support for vector data types.
                Instructs the compiler to support vector data types
                and operators and is accepted when the architecture
                specified by -qarch option supports VMX
                instructions and -qenablevmx is in effect.  The
                default is -qnoaltivec.

         -qasm[=gcc] | -qnoasm[=gcc]
                Controls the interpretation of, and subsequent
                generation of code for, asm statements.  If 'gcc'
                is specified, the compiler will interpret asm
                statements using gcc syntax.

                The default is -qasm=gcc.

         -qcpluscmt | -qnocpluscmt
                Permits the usage of "//" to introduce a comment
                that lasts until the end of the current source
                line, as in C++.  The default is -qcpluscmt when
                you invoke the compiler with xlc, xlc_r, cc, or
                cc_r, or when -qlanglvl is set to stdc99 or extc99.
                Otherwise, the default setting is -qnocpluscmt.

         -qdbcs | -qnodbcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qmbcs.  The default is -qnodbcs.

         -qdigraph | -qnodigraph
                Allows usage of digraph key combinations or
                keywords to represent characters not found on some
                keyboards.
                The default is -qdigraph when -qlanglvl is extc89,
                extended, extc99 or stdc99. Otherwise the default
                is -qnodigraph.

         -qdollar | -qnodollar
                Allows the '$' symbol to be used in the names of
                identifiers. When -qdollar is in effect, the dollar
                symbol '$' in an identifier is treated as a base
                character. If the options -qnodollar and
                -qlanglvl=ucs are both in effect, the dollar symbol
                is treated as an extended character.  The default
                is -qnodollar.

         -qidirfirst | -qnoidirfirst
                Specifies the search order for files included with
                the #include "<filename>" directive.  Use
                -qidirfirst with the -I option.  If -qidirfirst is
                specified, the directories specified by the
                -I<directory> option are searched before the
                directory in which the current file resides.  The
                default is -qnoidirfirst.

         -qignprag=<option>
                Instructs the compiler to ignore certain pragma
                statements.  The options are:

                disjoint
                     Ignores all #pragma disjoint directives in the
                     source file.
                isolated
                     Ignores all #pragma isolated_call directives
                     in the source file.
                all
                     Ignores all #pragma isolated_call directives
                     and #pragma disjoint directives in the source
                     file.
                omp
                     Ignores all OpenMP parallel processing
                     directives in the source file.
                ibm
                     Ignores IBM parallel processing directives.

         -qkeyword=<keyword> | -qnokeyword=<keyword>
                Controls whether the specified name is treated as a
                keyword or as an identifier whenever it appears in
                a program source.  By default all the built-in
                keywords defined in the C language standards are
                reserved as keywords. However, you can use
                -qnokeyword=<keyword> to disable built-in keywords,
                and use -qkeyword=<keyword> to reinstate those
                keywords.

         -qlanglvl=<suboptions_list>
                Selects the language level and language options for
                the compilation. <suboptions_list> is a colon-
                separated list of suboptions.  The suboptions are:

                classic
                     Allows the compilation of non-stdc89 programs,
                     and conforms closely to the K&R level
                     preprocessor.
                extended
                     Provides compatibility with the RT compiler
                     and classic. This language level is based on
                     C89.
                saa
                     Compilation conforms to the current SAA(R) C
                     CPI language definition. This is currently SAA
                     C Level 2.
                saal2
                     Compilation conforms to the SAA C Level 2 CPI
                     language definition, with some exceptions.
                stdc89
                     Compilation conforms to the ANSI C89 standard,
                     also known as ISO C90.
                stdc99
                     Compilation conforms to the ISO C99 standard.
                extc89
                     Compilation conforms to the ANSI C89 standard,
                     and accepts implementation-specific language
                     extensions.
                extc99
                     Compilation conforms to the ISO C99 standard,
                     and accepts implementation-specific language
                     extensions.
                ucs | noucs
                     This option controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in program
                     source code.  Under language levels stdc99 and
                     extc99, the default is -qlanglvl=ucs.


                The default depends on the invocation command used:

                COMMAND         DEFAULT
                xlc             extc89
                cc              extended
                c89             stdc89
                c99             stdc99

         -qmacpstr | -qnomacpstr
                Converts Pascal string literals into null-
                terminated strings where the first byte contains
                the length of the string.  The default is
                -qnomacpstr.

         -qmbcs | -qnombcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qdbcs.  The default is -qnombcs.

         -qpascal | -qnopascal
                Specifies whether to recognize and accept the
                keyword 'pascal' in type specifiers and function
                declarations.  The default is -qnopascal.

         -qsourcetype=<type>
                Determines whether to treat all recognized source
                files as if they are of the source type specified
                by <type> (regardless of filename suffix), or
                whether to use the filename suffix to determine the
                programming language. The options are:

                default
                     The compiler assumes that the programming
                     language of a source file will be implied by
                     its filename suffix.
                c
                     The compiler compiles all source files
                     following this option as if they are C
                     language source files.
                c++
                     The compiler compiles all source files
                     following this option as if they are C++
                     language source files.
                assembler
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files.
                assembler-with-cpp
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files that need preprocessing.

                The default is -qsourcetype=default.

         -qstdinc | -qnostdinc
                Specifies which directories are used for files
                included by the #include <file_name> and #include
                "file_name" directives. The -qnostdinc option
                excludes the standard include directories from the
                search path.  The default is -qstdinc.

         -qsyntaxonly
                Performs syntax checking without generating an
                object file.

         -qtrigraph | -qnotrigraph
                Allows trigraph key combinations to represent
                characters not found on some keyboards.
                The default is qtrigraph, however if
                -qlanglvl=classic is in effect or implied, the
                trigraphs are not recognized by default.

         -qutf | -qnoutf
                Enables recognition of UTF literal syntax.  The
                default is -qnoutf.

  Output Control Options
         -#     Traces the compilation and generates information on
                the progress of the compilation without invoking
                the preprocessor, compiler, or linkage editor.

         -c     Instructs the compiler to pass source files to the
                compiler only. Compiled source files are not sent
                to the linkage editor.

         -E     Instructs the compiler to preprocess the source
                files and send preprocessed source to standard
                output.

         -M     Creates an output file that contains information to
                be included in a "make" description file. This is
                equivalent to specifying -qmakedep without a
                suboption.

         -MF<file>
                Specifies the target for the output generated by
                the -qmakedep or -M options, where <file> is the
                target output filepath. Note that "-MF <file>"
                (with a space before the argument) is also
                acceptable. This option only has effect when
                specified with -qmakedep or -M.

         -ma    Substitutes inline code for calls to function
                alloca.

         -o <filespec>
                Specifies an output location for the object,
                assembler, or executable files created by the
                compiler. When the -o option is used during
                compiler invocation, <filespec> can be the name of
                either a file or a directory.  The default name is
                a.out.

         -P     Preprocesses the C source files named in the
                compiler invocation and creates an output
                preprocessed source file, <filename.i> for each
                input source file.  The default is to compile and
                link-edit C source files to produce an executable
                file.

         -S     Generates an assembler language file (.s) for each
                source file. The resulting .s files can be
                assembled to produce object .o files or an
                executable file (a.out).

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -q32,-q64
                Selects either 32-bit or 64-bit compilation mode.
                Use the -q32 and -q64 options, along with the
                -qarch and -qtune compiler options, to optimize the
                output of the compiler to the architecture on which
                that output will be used. The default is -q32.

         -qalign=<option>
                Specifies what aggregate alignment rules the
                compiler uses for file compilation, where the
                alignment options are:

                bit_packed
                     The compiler uses the bit_packed alignment
                     rules.
                full
                     The compiler uses the RISC System/6000
                     alignment rules. This is the same as power.
                mac68k
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.
                natural
                     The compiler maps structure members to their
                     natural boundaries.
                packed
                     The compiler uses the packed alignment rules.
                power
                     The compiler uses the RISC System/6000
                     alignment rules.
                twobyte
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.  The mac68k option is the
                     same as twobyte.

                The default is -qalign=full.

         -qalloca
                Substitutes inline code for calls to function
                alloca, as if #pragma alloca directives were in the
                source code.

         -qbitfields={signed|unsigned}
                Specifies whether bit fields will be signed or
                unsigned.  The default is -qbitfields=unsigned.

         -qchars={signed|unsigned}
                Specifies whether the data type char will be signed
                or unsigned.  The default is -qchars=unsigned.

         -qenablevmx | -qnoenablevmx
                Enables generation of VMX (Vector Multimedia
                Extension) instructions.  The default is
                -qnoenablevmx.

         -qenum=<option>
                Specifies the amount of storage occupied by
                enumerations, where <option> is:

                small
                     Specifies that enumerations occupy the
                     smallest amount of space (1, 2, 4, or 8 bytes)
                     that can accurately represent the range of
                     values in the enumeration.  Signage is
                     unsigned, unless the range of values includes
                     negative values.
                int
                     Specifies that enumerations occupy 4 bytes and
                     are represented by int.
                intlong
                     Specifies that enumerations occupy 8 bytes of
                     storage if the range of values in the
                     enumeration exceeds the limit for int.
                     Otherwise, the enumerations occupy 4 bytes of
                     storage and are represented by int.
                1
                     Specifies that enumerations occupy 1 byte.
                     Type is signed or unsigned char.
                2
                     Specifies that enumerations occupy 2 bytes.
                     Type is signed or unsigned short.
                4
                     Specifies that enumerations occupy 4 bytes.
                     Type is signed or unsigned int.
                8
                     Specifies that enumerations occupy 8 bytes.
                     Type is signed or unsigned long long in 32-bit
                     mode, and signed or unsigned long in 64-bit
                     mode.

         -qfuncsect | -qnofuncsect
                Places instructions for each function in a separate
                object file control section or csect.  The default
                is -qfuncsect.

         -qmakedep[=gcc]
                Creates an output file that contains targets
                suitable for inclusion in a description file for
                the make command that describes the dependencies of
                the main source file in the compilation.
                Specifying 'gcc' changes the format of the
                generated dependency file. Specifying -qmakedep
                without 'gcc' is equivalent to specifying -M.

         -qpic[={small|large}]
                Instructs the compiler to generate position-
                independent code suitable for use in shared
                libraries.

                small
                     Instructs the compiler to assume that the size
                     of the global offset table is no larger than
                     64 Kb.
                large
                     Allows the global offset table to be larger
                     than 64 Kb in size, allowing more addresses to
                     be stored in the table.

                The -qpic option is implied if either of the -G or
                -qmkshrobj compiler options is specified.  The
                default is -qpic=small.

         -qppline | -qnoppline
                Enables generation of #line directive in the
                preprocessed output.  If the -P option is enabled,
                the default is -qnoppline. Otherwise, the default
                is -qppline.

         -qreserved_reg=<registers_list>
                Indicates that the specified register(s) cannot be
                used during the compilation, except as a stack
                pointer, frame pointer or in a different fixed
                role. <registers_list> is a colon-separated list of
                registers. You should use this option in modules
                that are required to work with other modules that
                use global register variables or hand-written
                assembler code.

         -qro | -qnoro
                Specifies the storage type for string literals and
                puts string literals in read-only storage.  The
                default with cc and its derivatives is -qnoro,
                otherwise the default is -qro.

         -qroconst | -qnoroconst
                Specifies the storage location for constant values.
                Puts constant values in read-only storage.  The
                default with xlc and c89 compiler invocations is
                -qroconst, and the default with cc is -qnoroconst.

         -qroptr | -qnoroptr
                Specifies the storage location for constant
                pointers. This options requires AIX V5.2 or
                greater.  The default is -qnoroptr.

         -qsaveopt | -qnosaveopt
                Saves command line options in the corresponding
                object files.  The default is -qnosaveopt.

         -qstatsym | -qnostatsym
                Adds user-defined, non-external names that have a
                persistent storage class (such as initialized and
                uninitialized static variables) to the name list.
                The default is -qnostatsym.

         -qthreaded | -qnothreaded
                Ensures that all optimizations will be thread-safe
                for executing in a multi-threaded environment.  The
                default is -qthreaded when compiling invocation
                commands ending in "_r", and -qnothreaded
                otherwise.

         -qupconv | -qnoupconv
                Preserves the unsigned specification when
                performing integral promotions.  The default is
                -qupconv when -qlanglvl=extc89, and -qnoupconv
                otherwise.

         -qweaksymbol | -qnoweaksymbol
                Instructs the compiler to generate weak symbols.
                The default is -qnoweaksymbol on AIX 5.1, and
                -qweaksymbol on AIX 5.2 and higher.

         -qxcall | -qnoxcall
                Generates code to treat static functions within a
                compilation unit as if they were external
                functions.  The default is -qnoxcall.

  Optimization Options
         -O[<level>]
                Optimizes code at a choice of levels during
                compilation. This is equivalent to
                -qoptimize[=<level>]. <level> can be:

                0
                     Performs only quick local optimizations such
                     as constant folding and elimination of local
                     common subexpressions.
                2
                     Performs optimizations that the compiler
                     developers considered the best combination for
                     compilation speed and runtime performance. The
                     optimizations may change from product release
                     to release.
                3
                     Performs some memory and compile-time
                     intensive optimizations in addition to those
                     executed with -O2.  The -O3 specific
                     optimizations have the potential to alter the
                     semantics of a program.  The compiler guards
                     against these optimizations at -O2 and the
                     option -qstrict is provided at -O3 to turn off
                     these aggressive optimizations. Specifying -O3
                     will set -qhot=level=0.
                4
                     This option is the same as -O3, but also:
                     - Sets the -qarch and -qtune options to the
                     architecture of the compiling machine.
                     - Sets the -qcache option most appropriate to
                     the characteristics of the compiling machine.
                     - Sets the -qipa option.
                     - Sets the -qhot option to level=1.
                5
                     Equivalent to -O4 -qipa=level=2.

                The default is -O0. Specifying -O with no <level>
                is equivalent to specifying -O2.

         -Q[<suboption>]
                Specifies which specific functions the compiler
                should attempt to inline.

                This option can take the form:

                     -Q
                          Attempts to inline all appropriate
                          functions with 20 executable source
                          statements or fewer, subject to the
                          setting of any of the suboptions to the
                          -Q option. If -Q is specified last, all
                          functions are inlined.
                     -Q!
                          Does not inline any functions. If -Q! is
                          specified last, no functions are inlined.
                     -Q-<names_list>
                          Does not inline functions listed in
                          <names_list>, where <names_list> is a
                          colon-separated list. All other
                          appropriate functions are inlined. The
                          option implies -Q.
                     -Q+<names_list>
                          Attempts to inline the functions listed
                          in <names_list> and any other appropriate
                          functions. <names_list> is a colon-
                          separated list.  The option implies -Q.
                     -Q=<threshold>
                          Sets a size limit on the functions to be
                          inlined. The number of executable
                          statements must be less than or equal to
                          <threshold> for the function to be
                          inlined. <threshold> must be a positive
                          integer. The default value is 20.
                          Specifying a threshold value of 0 causes
                          no functions to be inlined except those
                          functions marked with the __inline,
                          _Inline, or _inline keywords.

                The default is to treat inline specifications as a
                hint to the compiler.

         -qaggrcopy={overlap|nooverlap}
                Enables destructive copy operations for structures
                and unions.  The default is -qaggrcopy=overlap when
                compiling to the EXTENDED and CLASSIC language
                levels, and -qaggrcopy=nooverlap otherwise.

         -qalias=<options_list>
                Specifies the aliasing assertions to be applied to
                your compilation unit. <options_list> is a colon-
                separated list of the following options:

                addrtaken | noaddrtaken
                     Variables are disjoint from pointers unless
                     their address is taken.
                allptrs | noallptrs
                     If noallptrs is specified, pointers are never
                     aliased.
                ansi | noansi
                     If ansi is specified, type-based aliasing is
                     used during optimization, which restricts the
                     lvalues that can be safely used to access a
                     data object. The default is ansi for the xlc
                     and c89 command and noansi for the cc
                     invocation commands.  This option has no
                     effect unless you also specify the -O option.
                typeptr | notypeptr
                     If notypeptr is specified, pointers to
                     different types are never aliased.

                The default is
                -qalias=noaddrtaken:noallptrs:typeptr:ansi.

         -qansialias | -qnoansialias
                This option is obsolete. Use -qalias=ansi in your
                new applications. See the -qalias=ansi suboption.
                The default is -qansialias with xlc, c99, and c89,
                and -qnoansialias with cc.

         -qarch=<option>
                Specifies the general processor architecture for
                which the code (instructions) should be generated.
                In general, the -qarch option allows you to target
                a specific architecture for the compilation. For
                any given -qarch setting, the compiler defaults to
                a specific, matching -qtune setting, which can
                provide additional performance improvements.  The
                suboptions are:

                auto
                     Generates instructions that will run on the
                     hardware platform on which the program is
                     compiled.
                com
                     In 32-bit mode, generates instructions that
                     will run on all the POWER and PowerPC hardware
                     platforms.  In 64-bit mode, these instructions
                     will run on 64-bit PowerPC processors but not
                     on 32-bit PowerPC processors.  This is the
                     default unless -q64, -O4, or -O5 are
                     specified.
                pwr
                     Generates instructions that will run on the
                     POWER, POWER2, and 601 hardware platforms.
                pwr2
                     Generates instructions that will run on the
                     POWER2 hardware platform.
                pwr3
                     Generates instructions that will run on a
                     POWER3, POWER4, POWER5, and POWERPC970 chip.
                pwr4
                     Generates instructions that will run on a
                     POWER4, POWER5, and POWERPC970 chip.
                pwr5
                     Generates object code containing instructions
                     that will run on the POWER5 hardware platform.
                pwr5x
                     Generates instructions that will run on any
                     POWER5+ hardware platform.
                ppc
                     In 32-bit mode, produces object code
                     containing instructions that will run on any
                     of the 32-bit PowerPC hardware platforms. This
                     suboption will cause the compiler to produce
                     single-precision instructions to be used with
                     single-precision data.  Specifying -qarch=ppc
                     together with -q64 quietly upgrades the -qarch
                     setting to -qarch=ppc64.
                ppcgr
                     In 32-bit mode, produces object code for
                     PowerPC processors that support optional
                     graphics instructions. Note that specifying
                     -q64 with -qarch=ppcgr will quietly upgrade
                     the -qarch setting to -qarch=ppc64gr.
                ppc64
                     Generates instructions that will run on any of
                     the 64-bit PowerPC hardware platform.
                ppc64v
                     Generates instructions for the 64-bit PowerPC
                     processor with VMX.
                ppc970
                     Generates instructions that will run on the
                     PPC970 hardware platform.
                ppc64gr
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics instructions.
                ppc64grsq
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics and square root instructions.
                pwr2s
                     Generates instructions that will run on POWER2
                     Chip desktop implementations.
                p2sc
                     Generates instructions that will run on a
                     POWER2 Super Chip.
                601
                     Generates instructions that will run on a 601
                     chip.
                602
                     Generates instructions that will run on a 602
                     chip.
                603
                     Generates instructions that will run on a 603
                     chip.
                604
                     Generates instructions that will run on a 604
                     chip.
                403
                     Generates instructions that will run on a 403
                     chip.
                rs64a
                     Generates instructions that will run on a
                     rs64I chip.
                rs64b
                     Generates instructions that will run on a
                     RS64II chip.
                rs64c
                     Generates instructions that will run on a
                     RS64III chip.

         -qassert=<suboption> | -qnoassert
                This option is obsolete. Use -qalias in your new
                applications. This option specifies the aliasing
                assertion to be applied to your compilation unit.
                The suboptions are:

                typeptr
                     Pointers to different types are never aliased.
                allptrs
                     Pointers are never aliased.
                addrtaken
                     Variables are disjoint from pointers unless
                     their address are taken.

                The default is -qnoassert.

         -qcache=<suboptions_list>
                Describes the cache configuration for a specific
                target execution machine, where <suboptions_list>
                is a colon-separated list of one or more of the
                following suboptions:

                assoc=<number>
                     Specifies the set associativity of the cache,
                     where <number> is one of the following:
                          0    Direct-mapped cache
                          1    Fully associative cache
                          (number > 1)   n-way set associative
                          cache
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. This
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty, in CPU
                     cycles, resulting from a cache miss.
                level=<level>
                     Specifies the level of cache affected, where
                     level is one of the following:
                          1     Basic cache
                          2     Level-2 cache or, if there is no
                                level-2 cache, the table lookaside
                                buffer (TLB)
                          3     TLB
                          If a machine has more than one level of
                          cache, use a separate -qcache option.
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<cache_type>
                     The settings apply to the specified type of
                     cache, where <cache_type> is one of the
                     following:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The -qtune setting determines the optimal default
                -qcache settings for most typical compilations.

         -qcompact | -qnocompact
                Reduces code size where possible, at the expense of
                execution speed. Code size is reduced by inhibiting
                optimizations that replicate or expand code inline.
                This option takes effect only if -O2 or higher is
                also used.  The default is -qnocompact.

         -qdataimported[=<names_list>]
                Specifies which data items are imported. If no
                names are specified, all data items are assumed to
                be imported.  <names_list> is a colon-separated
                list of data items.

         -qdatalocal[=<names_list>]
                Specifying -qdatalocal=<names_list> marks the named
                variables as local, where <names_list> is a colon-
                separated list of identifiers. Specifying
                -qdatalocal with no variables instructs the
                compiler to assume that all variables are local.

         -qdirectstorage | -qnodirectstorage
                Informs the compiler that write-through-enabled or
                cache-inhibited storage may be referenced.  The
                default is -qnodirectstorage.

         -qfdpr | -qnofdpr
                Collects information about programs for use with
                the AIX fdpr (Feedback Directed Program
                Restructuring) performance-tuning utility.  The
                default is -qnofdpr.

         -qhot[=<suboption>] | -qnohot
                Specifies whether or not to perform high-order
                transformations during optimization. The suboptions
                are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value.  Otherwise, the
                     compiler will pad any arrays where it infers
                     that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. -qhot=level=1 will
                     be equivalent to -qhot and the compiler
                     options that imply -qhot also imply
                     -qhot=level=1 unless -qhot=level=0 is
                     explicitly specified. See the Compiler
                     Reference for more information.
                simd | nosimd
                     The compiler converts certain operations that
                     are performed in a loop on successive elements
                     of an array into a call to a VMX (Vector
                     Multimedia Extension) instruction. This
                     suboption has effect only when the effective
                     architecture supports VMX instructions and you
                     specify -qenablevmx.
                vector | novector
                     When specified with -qnostrict and -qignerrno,
                     or an optimization level of -O3 or higher, the
                     compiler converts certain operations that are
                     performed in a loop on successive elements of
                     an array (for example, square root, reciprocal
                     square root) into a call to a Mathematical
                     Acceleration Subsystem (MASS) library vector
                     routine. This call will calculate several
                     results at one time, which is faster than
                     calculating each result sequentially.

                The default is -qnohot.

         -qignerrno | -qnoignerrno
                Allows the compiler to perform optimizations that
                assume errno is not modified by system calls.  The
                default is -qnoignerrno.

         -qinline[<suboption>] | -qnoinline
                Specifies whether to attempt to inline functions
                instead of generating calls to a function. This
                option can take the following forms:

                -qinline
                     The compiler attempts to inline all
                     appropriate functions with 20 executable
                     source statements or fewer, subject to any
                     other settings of the suboptions to the
                     -qinline option.
                -qinline=threshold=<num>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <num> for the
                     function to be inlined. <num> must be a
                     positive integer.
                -qinline+<names_list>
                     Attempts to inline the functions listed in
                     <names_list> and any other appropriate
                     functions, where <names_list> is a colon-
                     separated list.
                -qinline-<names_list>
                     Specifies that functions listed in
                     <names_list> do not get inlined, where
                     <names_list> is a colon-separated list.
                -qnoinline
                     Does not inline any functions.

                The default is to treat inline specifications as a
                hint to the compiler, and the result depends on
                other options that you select:  If you specify the
                -g option (to generate debug information), inlining
                may be affected.

         -qipa[=<suboptions_list>] | -qnoipa
                Turns on or customizes a class of optimizations
                known as interprocedural analysis (IPA).  Regular
                expressions are supported when specifying procedure
                names for these suboptions:  cloneproc,
                nocloneproc, exits, inline, noinline, isolated,
                lowfreq, pure, safe, unknown. <suboptions_list> is
                a colon-separated list of one or more of the
                following suboptions:

                clonearch=<architecture_list> | noclonearch
                     Allows you to specify a group of architectures
                     in case you want to compile your application
                     for multiple architectures with a single
                     binary file. <architecture_list> is a comma-
                     separated list of one or more of the following
                     architectures: pwr4, pwr5, and ppc970. When
                     -qcompact is in effect, -qarch=clonearch is
                     disabled. This must be specified during link
                     time.  The default is -qipa=noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of functions that you wish to clone (or not
                     clone). Please note that this suboption has no
                     effect unless -qipa=clonearch=<arch> is
                     specified.
                exits=<procedure_names_list>
                     Specifies names of functions which represent
                     program exits.  <procedure_names_list> is a
                     comma-separated list of procedures.
                infrequentlabel=<names_list>
                     Specifies a comma-separated list of user-
                     defined labels that are likely to be called
                     infrequently during a program run.
                inline[=<suboption>]
                     Specifying 'inline' with no suboption asserts
                     that all appropriate procedures will be
                     inlined. <suboption> can be one of the
                     following:
                     auto | noauto
                          Specifies whether or not to automatically
                          inline procedures.
                     <procedure_names_list>
                          Specifies a comma-separated list of
                          procedures to attempt to inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This only takes
                          effect when inline=auto is on.
                     <options_list>
                          The same as specifying
                          -qinline=<options_list>. <options_list>
                          is a comma-separated list of any
                          suboptions that belong to the -qinline
                          compiler option.
                noinline=<procedures_list>
                     Specifies a comma-separated list of procedures
                     which are not to be inlined.
                isolated=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that do
                     not directly refer to any global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization performed, where <level> can be
                     equal to:
                     0
                          Performs minimal interprocedural analysis
                          and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full interprocedural data flow and alias
                          analysis.
                     The default is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, if an object listing has been
                     requested using the -qlist option. The default
                     name is "a.lst". Specifying 'long' or 'short'
                     can be used to request more or less
                     information in the listing file to determine
                     which listing sections will be included. The
                     default is 'short'.
                lowfreq=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are likely to be called infrequently
                     during the course of a typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the default assumption for
                     procedures not compiled with -qipa.
                     unknown
                          Greatly restricts the amount of
                          interprocedural optimization for calls to
                          unknown functions.
                     safe
                          Functions which do not indirectly call a
                          visible (not missing) function either
                          through direct call or function pointer.
                     isolated
                          Functions which do not directly reference
                          global variables accessible to visible
                          functions.
                     pure
                          Functions which are safe and isolated and
                          which do not indirectly alter storage
                          accessible to functions.
                object | noobject
                     This is a compile-time option. It specifies
                     whether to include standard object code in the
                     object files. Specifying 'noobject' can
                     substantially reduce overall compile time by
                     not generating object code during the first
                     IPA phase.
                partition={small|medium|large}
                     Specifies the size of program sections that
                     are analyzed together. Larger partitions may
                     produce better analysis but require more
                     storage.
                pdfname[=<filename>] | nopdfname
                     Specifies the name of the profile data file
                     containing the PDF profiling information.  If
                     you do not specify <filename>, the default
                     file name is ._pdf.
                pure=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that are
                     "isolated", "safe", and do not modify any data
                     objects that are visible to the caller.
                safe=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that do not call
                     any other part of the program.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that may
                     update global variables and dummy arguments
                     and call other parts of the program compiled
                     with -qipa.
                <filename>
                     Specifies the name of a file that contains
                     suboption information in a special format.

                The default is -qnoipa.

         -qisolated_call=<function_names_list>
                Specifies functions in the source file that have no
                side effects, where <function_names> is a colon-
                separated list of function names.

         -qlargepage | -qnolargepage
                Exploits large page heaps that are available on
                Power 4 and Power 5 systems running AIX v5.1D or
                later.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C library function are in fact the library
                functions.  The default is -qnolibansi.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 | -qnopdf1
                Produces an object that is instrumented to collect
                runtime execution information. This is phase 1 of
                the profile-directed feedback optimization process.
                The default is -qnopdf1.

         -qpdf2 | -qnopdf2
                Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.  The default is
                -qnopdf2.

         -qprefetch | -qnoprefetch
                Enables generation of prefetching instructions such
                as dcbt and dcbz in compiled code.  The default is
                -qprefetch.

         -qprocimported[=<names_list>] | -qnoprocimported
                If no <names_list> is specified, it asserts that
                all functions are imported. Otherwise, only the
                named functions are marked as imported.
                <names_list> is a colon-separated list of function
                identifiers.

         -qproclocal[=<names_list>] | -qnoproclocal
                If no <names_list> is specified, it asserts that
                all functions are local. Otherwise, only the named
                functions are marked as local. <names_list> is a
                colon-separated list of function identifiers.

         -qprocunknown[=<names_list>] | -qnoprocunknown
                If no <names_list> is specified, it asserts that
                all functions are unknown. Otherwise, only the
                named functions are marked as unknown. <names_list>
                is a colon-separated list of function identifiers.

         -qshowpdf | -qnoshowpdf
                Used with -qpdf1 and a minimum optimization level
                of -O to add additional call and block count
                profiling information to an executable.  The
                default is -qnoshowpdf.

         -qsmallstack | -qnosmallstack
                Reduces the size of the stack frame.  This option
                is only valid when used together with IPA (-qipa,
                -O4, -O5 compiler options).  The default is
                -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Enables parallelization of program code.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization and
                     optimization. If noauto is specified,
                     automatic parallelization of program code is
                     disabled; only program code explicitly
                     parallelized with IBM SMP or OpenMP directives
                     is optimized.
                explicit | noexplicit
                     Enables explicit parallelization of loops.
                nested_par | nonested_par
                     Enables parallelization of nested parallel
                     constructs.
                omp | noomp
                     Enables strict OpenMP compliance. Only OpenMP
                     parallelization pragmas are recognized.
                opt | noopt
                     Enables automatic parallelization but disables
                     optimization of parallelized program code. If
                     noopt is specified, optimization of
                     parallelized program code is disabled.
                rec_locks | norec_locks
                     Specifies whether to use recursive locks.
                schedule=<type>
                     Specifies what kinds of scheduling algorithms
                     and chunking are used for loops to which no
                     other scheduling algorithm has been explicitly
                     assigned in the source code. <type> can be:
                     dynamic[=<num>]
                     guided[=<num>]
                     static[=<num>]
                     affinity[=<num>]
                     runtime

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, explicit, noomp, norec_locks, nonested_par,
                schedule=runtime.

         -qspill=<size>
                Specifies the size of the register allocation spill
                area in bytes.  The default is -qspill=512.

         -qstrict | -qnostrict
                Turns off aggressive optimizations which have the
                potential to alter the semantics of your program.
                -qstrict sets -qfloat=nofltint:norsqrt. -qnostrict
                sets -qfloat=rsqrt. This option is only valid with
                -O2 or higher optimization levels. The default is
                -qnostrict at -O3 or higher, and -qstrict
                otherwise.

         -qstrict_induction | -qnostrict_induction
                Turns off loop induction variable optimizations
                that have the potential to alter the semantics of
                your program.  The default is -qnostrict_induction
                at -O2 or higher and -qstrict_induction otherwise.

         -qtocdata | -qnotocdata
                Marks data as local.  The default is -qnotocdata.

         -qtocmerge | -qnotocmerge
                Reads from the file specified in -bImportfile
                linker option and merges the address information to
                access ranges of external addresses using a single
                table of contents entry.  The default is
                -qnotocmerge.

         -qtune=<suboption>
                Specifies the architecture system for which the
                executable program is optimized.  The suboptions
                are:

                auto
                     Generates object code optimized for the
                     hardware platform on which the program is
                     compiled.
                403
                     Generates object code optimized for all the
                     PowerPC 403 processors.
                601
                     Generates object code optimized for all the
                     PowerPC 601 processors.
                602
                     Generates object code optimized for all the
                     PowerPC 602 processors.
                603
                     Generates object code optimized for all the
                     PowerPC 603 processors.
                604
                     Generates object code optimized for all the
                     PowerPC 604 processors.
                p2sc
                     Generates object code optimized for all the
                     PowerPC P2SC processors.
                ppc
                     Generates object code optimized for 32-bit
                     POWERPC hardware platform.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                pwr
                     Generates object code optimized for the POWER
                     hardware platforms.
                pwr2
                     Generates object code optimized for the POWER2
                     hardware platform.
                pwr2s
                     Generates object code optimized for the POWER2
                     hardware platform, avoiding certain
                     quadruple-precision instructions that would
                     slow program performance.
                pwr3
                     Generates object code optimized for the POWER3
                     processor.
                pwr4
                     Generates object code optimized for the POWER4
                     processor.
                pwr5
                     Generates object code optimized for the POWER5
                     hardware platforms.
                rs64I
                     Generates object code optimized for the rs64a
                     processor.
                rs64b
                     Generates object code optimized for the RS64II
                     processor.
                rs64c
                     Generates object code optimized for the
                     RS64III processor.

                The default setting is determined by the setting of
                -qarch.

         -qunroll[={yes|no|auto}] | -qnounroll
                Unrolls inner loops in the program. This can help
                improve program performance.  The options are:

                yes
                     Is a suggestion to the compiler to unroll
                     loops.
                no
                     Instructs the compiler not to unroll loops.
                auto
                     Leaves the decision to unroll loops to the
                     compiler.

                The default is -qunroll=auto.  If -qunroll is
                specified with no suboptions, the compiler assumes
                -qunroll=yes.

         -qunwind | -qnounwind
                Informs the compiler that the stack can be unwound
                while a routine in the compilation is active.
                Specifying -qnounwind can improve the optimization
                of non-volatile register saves and restores.  The
                default is -qunwind.

         -qvecnvol | -qnovecnvol
                Specifies whether to use volatile or non-volatile
                vector registers. Volatile vector registers are
                registers whose value is not preserved across
                function calls or in the context of save, jump or
                switch system library functions. If -qnoenablevmx
                is in effect, this option is ignored.  The default
                is -qnovecnvol.

  Error Checking and Debugging Options
         -g     Generates information for debugging tools such as
                the IBM Debugger for AIX, Version 3.1.

         -p     Sets up the object files produced by the compiler
                for profiling.

         -pg    Sets up the object files for profiling, but
                provides more information than is provided by the
                -p option.

         -qcheck[=<suboptions_list>] | -qnocheck
                Generates code that performs certain types of
                runtime checking. If a violation is encountered, a
                runtime exception is raised by sending a SIGTRAP
                signal to the process. <suboptions_list> is a
                colon-separated list of one or more of the
                following:

                bounds | nobounds
                     Performs runtime checking of addresses when
                     subscripting within an object of known size.
                divzero | nodivzero
                     Performs runtime checking of integer division.
                     A trap will occur if an attempt is made to
                     divide by zero.
                nullptr | nonullptr
                     Performs runtime checking of addresses
                     contained in pointer variables used to
                     reference storage.
                all
                     Switches on all the above suboptions.

                The default is -qnocheck.

         -qdbxextra | -qnodbxextra
                Specifies that all typedef declarations, struct,
                union, and enum type definitions are included for
                debugging.  Use this option with the -g option to
                produce additional debugging information for use
                with a debugger.  The default is -qnodbxextra.

         -qdpcl | -qnodpcl
                Generates symbols that can be used by tools based
                on the Dynamic Probe Class Library (DPCL) to see
                the structure of an executable file.  The default
                is -qnodpcl.

         -qextchk | -qnoextchk
                Generates bind-time type-checking information and
                checks for compile-time consistency.  The default
                is -qnoextchk.

         -qfullpath | -qnofullpath
                Specifies the path information stored for files
                when you use the -g compiler option.  The default
                is -qnofullpath.

         -qgenproto[=parmnames] | -qnogenproto
                Produces ANSI prototypes from K&R function
                definitions.  Specifying -qgenproto without
                '=parmnames' will cause prototypes to be generated
                without parameter names.  The default is
                -qnogenproto.

         -qheapdebug | -qnoheapdebug
                Enables debug versions of memory management
                functions.  The default is -qnoheapdebug.

         -qinitauto=<hex_value> | -qnoinitauto
                Initializes automatic variables to the two-digit
                hexadecimal byte value <hex_value>. This generates
                extra code and should only be used for error
                determination.  The default is -qnoinitauto.

         -qkeepparm | -qnokeepparm
                Ensures that function parameters are stored on the
                stack even if the application is optimized.  As a
                result, parameters remain in the expected memory
                location, providing access to the values of these
                incoming parameters to tools such as debuggers. The
                default is -qnokeepparm.

         -qlinedebug | -qnolinedebug
                Generates abbreviated line number and source file
                name information for the debugger.  The default is
                -qnolinedebug.

         -qmaxerr=<num>[:<sev>] | -qnomaxerr
                Instructs the compiler to halt compilation when the
                specified number of errors of the specified
                severity (by default, the value of -qhalt) or
                greater is reached.  <num> must be an integer. The
                severity levels, <sev>, are:

                i = informational
                w = warning
                e = error
                s = severe error

                The default is -qnomaxerr.

         -qproto | -qnoproto
                Assumes that all functions are prototyped.  Asserts
                that procedure call points agree with their
                declarations even if the procedure has not been
                prototyped. This allows the caller to pass
                floating-point arguments in floating-point
                registers instead of general-purpose registers.
                The default is -qnoproto.

         -qspnans | -qnospnans
                This option is obsolete. Use -qfloat=nans in your
                new applications. Generates extra instructions to
                detect signalling NaN on conversion from single
                precision to double precision. The -qnospnans
                option specifies that this conversion need not be
                detected. The default is -qnospnans.

         -qsymtab={unref|static}
                Determines what types of information appear in the
                symbol table.  The suboptions are:

                unref
                     Specifies that all typedef declarations,
                     struct, union, and enum type definitions are
                     included for processing by the debugger.
                static
                     Adds user-defined, non-external names that
                     have a persistent storage class (such as
                     initialized and uninitialized static
                     variables) to the name list.

                The default is to not add static variables to the
                symbol table.

         -qtbtable=<option>
                Generates a traceback table that contains
                information about each function, including the type
                of function as well as stack frame and register
                information. The traceback table is placed in the
                text segment at the end of its code.  The options
                are:

                none
                     No traceback table is generated.
                full
                     A full traceback table is generated.  This is
                     the default with -qnoopt or -g specified.
                small
                     A traceback table is generated with no name or
                     parameter information.  This is the default
                     with optimization if -g is not specified.

         -qwarn64 | -qnowarn64
                Enables checking for possible data conversion
                problems between 32-bit and 64-bit compiler modes.
                The default is -qnowarn64.

  Listing and Message Options
         -V     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a space-separated list.

         -v     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a comma-separated list.

         -w     Suppresses warnings and lower-level messages.
                Specifying this option is equivalent to specifying
                -qflag=e:e.

         -qattr[=full] | -qnoattr
                Produces a compiler listing that includes an
                attribute listing for all identifiers. If -qattr is
                specified, the listing contains only those
                identifiers that are used. If -qattr=full is
                specified, the listing contains all names. If
                -qnoattr is specified, no listing is produced.  The
                default is -qnoattr.

         -qdump_class_hierarchy
                for each class object, this option dumps a
                representation of its hierarchy and virtual
                function table layout to a file. The file name is
                created by appending ".class" to the source file
                name.

         -qflag=<listing_severity>:<terminal_severity>
                Defines the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> is the
                minimum level for the listing file, and
                <terminal_severity> is the minimum level for the
                terminal.  The message severity levels are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qflag=i:i.

         -qformat=<options_list> | -qnoformat
                Warns of possible problems with string input and
                output format specifications. Functions diagnosed
                are printf, scanf, strftime, strfmon family
                functions and functions marked with format
                attributes. <options_list> is a comma-separated
                list of one or more of the following suboptions:

                all | noall
                     Turns on all format diagnostic messages.
                exarg | noexarg
                     Warns if excess arguments appear in printf and
                     scanf style function calls.
                nlt | nonlt
                     Warns if a format string is not a string
                     literal, unless the format function takes its
                     format arguments as a va_list.
                sec | nosec
                     Warns of possible security problems in use of
                     format functions.
                y2k | noy2k
                     Warns of strftime formats that produce a 2-
                     digit year.
                zln | nozln
                     Warns of zero-length formats.

                The default is -qnoformat, which is equivalent to
                -qformat=noall. If -qformat is specified without
                any suboptions, the default is -qformat=all.

         -qhalt=<sev>
                Stops the compiler after the first phase if the
                severity level of errors detected equals or exceeds
                the specified level, <sev>.  The severity levels in
                increasing order of severity are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qhalt=s.

         -qinfo[=[<suboption>][<groups_list>]] | -qnoinfo
                Produces informational messages. <groups_list> is a
                colon-separated list. If a <groups_list> is
                specified along with a <suboption>, a colon must
                separate them. The suboptions are:

                all | noall
                     Turns on all diagnostic messages for all
                     groups.  Specifying 'noall' turns off all
                     diagnostic messages for specific portions of
                     your program.
                private
                     Lists shared variables that are made private
                     to a parallel loop.
                reduction
                     Lists variables that are recognized as
                     reduction variables inside a parallel loop.

                Also:
                <groups_list>
                     Turns on or off specific groups of messages,
                     where <groups_list> is a colon-separated list
                     of one or more of the following:

                     c99 | noc99
                          C code that might behave differently
                          between C89 and C99 language levels
                     cmp | nocmp
                          Possible redundancies in unsigned
                          comparisons
                     cnd | nocnd
                          Possible redundancies or problems in
                          conditional expressions
                     cns | nocns
                          Operations involving constants
                     cnv | nocnv
                          Conversions
                     dcl | nodcl
                          Consistency of declarations
                     eff | noeff
                          Statements and pragmas with no effect
                     enu | noenu
                          Consistency of enum variables
                     ext | noext
                          Unused external definitions
                     gen | nogen
                          General diagnostic messages
                     gnr | nognr
                          Generation of temporary variables
                     got | nogot
                          Use of goto statements
                     ini | noini
                          Possible problems with initialization
                     inl | noinl
                          Functions not inlined
                     lan | nolan
                          Language level effects
                     obs | noobs
                          Obsolete features
                     ord | noord
                          Unspecified order of evaluation
                     par | nopar
                          Unused parameters
                     por | nopor
                          Non-portable language constructs
                     ppc | noppc
                          Possible problems with using the
                          preprocessor
                     ppt | noppt
                          Trace of preprocessor actions
                     pro | nopro
                          Missing function prototypes
                     rea | norea
                          Code that cannot be reached
                     ret | noret
                          Consistency of return statements
                     trd | notrd
                          Possible truncation or loss of data or
                          precision
                     tru | notru
                          Variable names truncated by the compiler
                     trx | notrx
                          Rounding of hexadecimal floating-point
                          constants
                     uni | nouni
                          Uninitialized variables
                     upg | noupg
                          Upgrade issues from one release to the
                          next release
                     use | nouse
                          Unused auto and static variables
                     zea | nozea
                          Zero-extent arrays

                The default is -qnoinfo.
                If -qinfo is specified with no suboptions, the
                default is -qinfo=all.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                The default is -qnolist.

         -qlistopt | -qnolistopt
                Produces a compiler listing that displays all the
                options that were in effect when the compiler was
                invoked.  The default is -qnolistopt.

         -qphsinfo | -qnophsinfo
                Reports the time taken in each compilation phase.
                Phase information is sent to standard output.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qprint | -qnoprint
                Enables or suppresses listings. Specifying
                -qnoprint overrides all listing-producing options,
                regardless of where they are specified, to suppress
                listings.  The default is -qprint.

         -qreport | -qnoreport
                Instructs the compiler to produce transformation
                reports that show how program loops are
                parallelized and/or optimized. The transformation
                reports are included as part of the compiler
                listing.  This option requires either -qhot, -qsmp,
                or -qipa=clonearch in order to have effect.  The
                default is -qnoreport.

         -qshowinc[=<types_list>] | -qnoshowinc
                Used with -qsource to selectively show user header
                files (includes using " ") or system header files
                (includes using < >) in the program source listing.
                <types_list> is a colon-separated list of one or
                more of the following types:

                usr | nousr
                     Specifies whether to show user include files
                sys | nosys
                     Specifies whether to show system include files
                all
                     Shows both user and system include files

                The default is -qnoshowinc.

         -qsource | -qnosource
                Produces a compiler listing and includes source
                code.  The default is -qnosource.

         -qsrcmsg | -qnosrcmsg
                Adds the corresponding source code lines to the
                diagnostic messages in the stderr file.  The
                default is -qnosrcmsg.

         -qsuppress[=<msg_list>] | -qnosuppress
                Prevents the specified compiler or driver
                informational or warning messages from being
                displayed or added to the listings, where
                <msg_list> is a colon-separated list of message
                numbers that will not be displayed.  The default is
                -qnosuppress.

         -qtabsize=<size>
                Changes the length of tabs as perceived by the
                compiler, where <size> is the number of character
                spaces representing a tab in the source program.
                The default is -qtabsize=8.

         -qversion
                Displays information on the compiler version. It
                will output (to STDOUT) the official compiler
                product name and the compiler version found on the
                system. You can specify -qversion outside of a
                compilation (xlc -qversion) or as part of a
                compilation, but compilation will not occur.

         -qwarnfourcharconsts | -qnowarnfourcharconsts
                Issues diagnostic messages when the compiler finds
                four-character constants in the program source.
                The default is -qnowarnfourcharconsts.

         -qxref[=full] | -qnoxref
                Specifies whether to produce a compiler listing
                that includes a cross-reference listing of all
                identifiers. Specifying -qxref will report only
                identifiers that are used, -qxref=full reports all
                identifiers in the program, and -qnoxref does not
                report any identifiers in the program. The
                -qnoprint option overrides this option.  The
                default is -qnoxref.

  Compatibility Options
  Linking Options
         -b{dynamic|shared|static}
                Controls how shared objects are processed by the
                linkage editor.  The suboptions are:

                dynamic, shared
                     Causes the linker to process subsequent shared
                     objects in dynamic mode. This is the default.
                     In dynamic mode, shared objects are not
                     statically included in the output file.
                     Instead, the shared objects are listed in the
                     loader section of the output file.
                static
                     Causes the linker to process subsequent shared
                     objects in static mode. In static mode, shared
                     objects are statically linked in the output
                     file.

         -bmaxdata=<num>
                Sets the maximum size of the area shared by the
                static data (both initialized and uninitialized)
                and the heap to <num> bytes. This value is used by
                the system loader to set the soft ulimit. The
                default is -bmaxdata=0.

         -brtl  Enables runtime linking for the output file. Do not
                specify the -brtl compiler option if you are
                invoking the compiler with xlc_r4 or if the
                -qheapdebug compiler option is specified.

         -e <name>
                Sets the entry name for a shared executable.  This
                option is only used together with -qmkshrobj.

         -f<filename>
                Names a file to store a list of object files for
                the compiler to pass to the linker. The <filename>
                file should contain only the names of object files.
                There should be one object file per line.

         -G     Tells the linkage editor to create a shared object
                enabled for runtime linking.

         -L<dir>
                Searches the path directory for library files
                specified by the -l<key> option.  The default is to
                search only the standard directories.

         -l<key>
                Searches the file lib<key>.so and then lib<key>.a
                for dynamic linking, or only lib<key>.a for static
                linking. The default is to search only some of the
                compiler runtime libraries.

         -r     Produces a relocatable object. This permits the
                output file to be produced even though it contains
                unresolved symbols.

         -Z<prefix>
                This linker option specifies a prefix for the
                library search path. This is useful when developing
                a new version of a library.

         -qinlglue | -qnoinlglue
                Generates fast external linkage by inlining the
                pointer glue code necessary to make a call to an
                external function or a call through a function
                pointer.  The default is -qnoinlglue.

         -qmkshrobj
                Creates a shared object from the generated object
                files.  See the XL C Compiler Reference for more
                information.

  Compiler Customization Options
         -B[<prefix>]
                Determines substitute path names for programs used
                during compilation, such as the compiler,
                assembler, linkage editor, and preprocessor, where
                <prefix> can be any program name recognized by the
                -t compiler option. The optional <prefix> defines
                part of a path name to the new programs. The -t
                parameter, <program>, specifies the program to
                which the <prefix> is to be appended.  When
                specifying <prefix>, there must be a slash (/)
                after the folder name.

         -F[<config_file>][:<stanza>]
                Names an alternative configuration file (.cfg) for
                the compiler.  <config_file> is the name of a
                compiler configuration file.  <stanza> is the name
                of the command used to invoke the compiler. This
                directs the compiler to use the entries under
                <stanza> in the <config_file> to set up the
                compiler environment. At least one of the arguments
                must be supplied.

         -t<programs_list>
                Applies the prefix from the -B option to the
                specified programs in <programs_list>.
                <programs_list> is a chain (ie: -tbcI) of one or
                more of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -W<program>,<options_list>
                Gives the specified option(s) to the compiler
                program, <program>. <options_list> is a comma-
                separated list of one or more options. <program>
                can be one of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -qasm_as[='<asm_path> [<flags_list>]'] | -qnoasm_as
                Specifies the path and flags used to invoke the
                assembler in order to handle assembler code in an
                asm statement. <asm_path> is the full path to the
                assembler to be used, and <flags_list> is a series
                of one or more flags (and their arguments),
                separated by spaces. Please note that single quotes
                (or double quotes) are required around the string
                of arguments if any spaces exist.

         -qexpfile=<filename>
                Saves the exported symbols in the specified file.
                This option is used only together with the
                -qmkshrobj compiler option.  For more information,
                see -qmkshrobj.

         -qmaxmem=<num>
                Limits the amount of memory used by certain
                memory-intensive optimizations to <num> kilobytes.
                When <num> is -1, the optimizer will use as much
                memory as needed.  By default -qmaxmem=8192 when
                -O2 level optimization is in effect and -qmaxmem=-1
                when -O3 level or greater optimization is in
                effect.

         -qpath=<program>:<path>
                Constructs alternate program names for compiler
                components. The program and directory path
                specified are used in place of the regular program.
                <program> can be one of the following:

                a = assembler
                b = compiler backend
                c = compiler frontend
                I = interprocedural analysis - compile phase
                L = interprocedural analysis - link phase
                l = linkage editor
                p = compiler preprocessor

         -qtls[=<model>] | -qnotls
                Specifies the thread-local storage model to be used
                by the application, where <model> can be:

                global-dynamic
                initial-exec
                local-exec
                local-dynamic

                If the -qnopic compiler option is in effect, the
                default is initial_exec.  If the -qpic compiler
                option is in effect, the default is global_dynamic.

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies the compile-time rounding mode of
                constant floating-point expressions, where
                <rounding_mode> is one of the following:

                m = round toward minus infinity
                n = round to the nearest representable number
                p = round toward plus infinity
                z = round toward zero.

                The default is -yn.

         -qfloat=<suboptions_list>
                Specifies various floating-point suboptions. This
                provides different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following:

                emulate | noemulate
                     Emulates the floating-point instructions
                     omitted by the PowerPC 403(TM) processor.
                     Function calls are emitted in place of PowerPC
                     floating-point instructions.  Use this option
                     only in a single-threaded stand-alone
                     environment, targeting the PowerPC 403
                     processor.  Do not use -qfloat=emulate with
                     any of the following invocation commands:
                      * -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                      * -qlongdouble, -qldbl128
                      * xlc128
                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using faster inline code that
                     does not check for overflows. This suboption
                     must only be used with an optimization option.
                     -qfloat=nofltint checks floating-point-to-
                     integer conversions for out-of-range values.
                fold | nofold
                     Specifies that constant floating-point
                     expressions are to be evaluated at compile
                     time rather than at run time.
                hsflt | nohsflt
                     The hsflt option speeds up calculations by
                     truncating instead of rounding computed values
                     to single precision before storing and on
                     conversions from floating-point to integer.
                     The nohsflt suboption specifies that single-
                     precision expressions are rounded after
                     expression evaluation and that floating-
                     point-to-integer conversions are to be checked
                     for out-of-range values.
                hssngl | nohssngl
                     The hssngl option specifies that single-
                     precision expressions are rounded only when
                     the results are stored into float memory
                     locations. The nohssngl option specifies that
                     single-precision expressions are rounded after
                     expression evaluation. Using hssngl can
                     improve runtime performance and is safer than
                     using -qfloat=hsflt.
                maf | nomaf
                     Makes floating-point calculations faster and
                     more accurate by using floating-point
                     multiply-add instructions where appropriate.
                nans | nonans
                     Generates extra instructions to detect
                     signalling NaN when converting from single-
                     precision to double-precision at run time. The
                     option nonans specifies that this conversion
                     need not be detected.
                relax | norelax
                     Relaxes the strict IEEE-conformance slightly
                     for greater speed, typically by removing some
                     trivial, floating-point arithmetic operations,
                     such as adds and subtracts involving a zero on
                     the right.
                rndsngl | norndsngl
                     Specifies that the result of each single-
                     precision (float) operation is to be rounded
                     to single precision. -qfloat=norndsngl
                     specifies that rounding to single-precision
                     happens only after full expressions have been
                     evaluated.
                rrm | norrm
                     Prevents floating-point optimizations that are
                     incompatible with runtime rounding to plus and
                     minus infinity modes.
                rsqrt | norsqrt
                     Specifies whether a division by the result of
                     a square root can be replaced with a multiply
                     by the reciprocal of the square root.
                     -qfloat=rsqrt has no effect unless -qignerrno
                     and -qarch=pwr2 are also specified.
                spnans | nospnans
                     Detects signalling NaN on conversion from
                     single-precision to double-precision.

                The default suboptions are: nospnans, norsqrt (at
                -O2 optimization), rsqrt (at -O3 optimization),
                norrm, norndsngl, norelax, nonans, maf, nohssngl,
                nohsflt, fold, nofltint (at -O2 optimization),
                fltint (at -O3 or greater optimization), and
                noemulate.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Generates instructions to detect and trap runtime
                floating-point exceptions.  <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                overflow
                     Generates code to detect and trap floating-
                     point overflow.
                underflow
                     Generates code to detect and trap floating-
                     point underflow.
                zerodivide
                     Generates code to detect and trap floating-
                     point division by zero.
                invalid
                     Generates code to detect and trap floating-
                     point invalid operation exceptions.
                inexact
                     Generates code to detect and trap floating-
                     point inexact exceptions.
                enable
                     Enables the specified exceptions in the
                     prologue of the main program.
                imprecise
                     Generates code for imprecise detection of the
                     specified exceptions. If an exception occurs,
                     it is detected, but the exact location of the
                     exception is not determined.
                nanq | nonanq
                     Generates code to detect and trap NaNQ (Not a
                     Number Quiet) exceptions handled or generated
                     by floating-point operations.


         -qfold | -qnofold
                This option is obsolete. Use -qfloat=fold in your
                new applications. Specifies that constant
                floating-point expressions are to be evaluated at
                compile time.  The default is -qfold.

         -qhsflt | -qnohsflt
                This option is obsolete. Use -qfloat=hsflt in your
                new applications. Speeds up calculations by
                removing range-checking on single-precision float
                results, and on conversions from floating-point to
                integer. -qnohsflt specifies that single-precision
                expressions are rounded after expression
                evaluation, and that floating-point-to-integer
                conversions are to be checked for out-of-range
                values.  The default is -qnohsflt.

         -qhssngl | -qnohssngl
                This option is obsolete. Use -qfloat=hssngl in your
                new applications. Specifies that single-precision
                expressions are rounded only when the results are
                stored into float memory locations. -qnohssngl
                specifies that single-precision expressions are
                rounded after expression evaluation.  The default
                is -qnohssngl.

         -qldbl128 | -qnoldbl128
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qlongdouble.  The default is -qnoldbl128.

         -qlongdouble | -qnolongdouble
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qldbl128.  The default is -qnolongdouble.

         -qlonglit | -qnolonglit
                Makes unsuffixed literals into the long type in
                64-bit mode.  The default is -qnolonglit.

         -qlonglong | -qnolonglong
                Allows long long integers.  When compiling with xlc
                or cc the default is -qlonglong. When compiling
                with c89, the default -qnolonglong.

         -qmaf | -qnomaf
                This option affects the precision of floating-point
                intermediate results. This option is obsolete. Use
                -qfloat=maf in your new applications. -qmaf
                specifies whether floating-point multiply-add
                instructions are to be generated. The default is
                -qmaf.

         -qrrm | -qnorrm
                This option is obsolete. Use -qfloat=rrm in your
                new applications. Prevents floating-point
                optimizations that are not compatible with runtime
                rounding to plus and minus infinity modes. The
                default is -qnorrm.

  ENVIRONMENT VARIABLES
         OBJECT_MODE
                Changes the compilation mode behavior, unless
                overridden by configuration file or command-line
                options.

                32
                     32-bit compiler mode.
                64
                     64-bit compiler mode.
                32_64
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.
                (not set)
                     32-bit compiler mode.
                (anything else)
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.

         PATH   Specifies the directory search path for the
                executable files of the compiler.

         MANPATH
                Specifies the directory search path for finding
                manual pages.

         OBJECT_MODE
                Specifies the default compilation mode to 32-bit or
                64-bit.

         LANG   Specifies the national language for message and
                help files.

         NLSPATH
                Specifies the path of the message and help files.

         PDFDIR Specifies the directory in which the profile data
                file is created.

         TMPDIR Specifies the directory in which temporary files
                are created. The default is /tmp.

         XLNOCLONEARCH
                Instructs the program to only execute the generic
                code (code that is not versioned for a particular
                architecture).

         XLSMPOPTS
                Sets options for programs using loop
                parallelization.
                e.g. XLSMPOPTS=PARTHDS=4:SCHEDULE=DYNAMIC=5

  SEE ALSO
         vacndi(1), gxlc(1), showpdf(1), mergepdf(1), resetpdf(1)
         cleanpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/caix/library/
         www.ibm.com/software/awdtools/caix/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL C Enterprise Edition V8.0 for AIX(R)

         5724-M11

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.




























configure:11760: $? = 249
configure:11767: xlc++ -v >&5
exec: export(export,XL_CONFIG=/etc/vac.cfg:xlc++,NULL) 
exec: /usr/bin/pg(/usr/bin/pg,/usr/vac/exe/default_msg/vac.txt,NULL) 



  xlc(1)                 IBM (October 2005)                  xlc(1)



  NAME
         xlc, cc, c89, c99 and related commands - invoke the IBM XL
         C compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

         The invocation commands are:
         xlc, cc, c89, c99, xlc128, cc128, c89_128, c99_128,
         optionally followed by _r, _r4, or _r7.

  DESCRIPTION
         xlc and related commands compile C source files.  They
         also process assembler source files and object files. The
         compiler calls the link editor to produce a single
         executable or shared library, unless you specify the
         compiler options that prevent object files from being
         linked.

         The input file may have any of the following suffixes:
          .c = C source file
          .i = preprocessed C source file
          .a = archive file
          .o = object file for ld command
          .s = assembler source file
          .S = assembler source file that needs preprocessing

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -C     Preserves comments in preprocessed output if used
                with -E or -P. With the -E option, comments are
                written to standard output; with the -P option,
                comments are written to an output file.

         -D<name>[=[<def>]]
                Defines <name> as in the #define directive. <def>
                is an optional definition or value assigned to
                <name>. Specifying "-D<name>=" (with no <def>) is
                equivalent to "#define <name>"; specifying "-
                D<name>" is equivalent to "#define <name> 1".

         -I<dir>
                Specifies an additional search path for include
                filenames that do not specify an absolute path.

         -U<name>
                Undefines the identifier <name> defined by the
                compiler or by the -D<name> option.

         -qaltivec | -qnoaltivec
                Enables compiler support for vector data types.
                Instructs the compiler to support vector data types
                and operators and is accepted when the architecture
                specified by -qarch option supports VMX
                instructions and -qenablevmx is in effect.  The
                default is -qnoaltivec.

         -qasm[=gcc] | -qnoasm[=gcc]
                Controls the interpretation of, and subsequent
                generation of code for, asm statements.  If 'gcc'
                is specified, the compiler will interpret asm
                statements using gcc syntax.

                The default is -qasm=gcc.

         -qcpluscmt | -qnocpluscmt
                Permits the usage of "//" to introduce a comment
                that lasts until the end of the current source
                line, as in C++.  The default is -qcpluscmt when
                you invoke the compiler with xlc, xlc_r, cc, or
                cc_r, or when -qlanglvl is set to stdc99 or extc99.
                Otherwise, the default setting is -qnocpluscmt.

         -qdbcs | -qnodbcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qmbcs.  The default is -qnodbcs.

         -qdigraph | -qnodigraph
                Allows usage of digraph key combinations or
                keywords to represent characters not found on some
                keyboards.
                The default is -qdigraph when -qlanglvl is extc89,
                extended, extc99 or stdc99. Otherwise the default
                is -qnodigraph.

         -qdollar | -qnodollar
                Allows the '$' symbol to be used in the names of
                identifiers. When -qdollar is in effect, the dollar
                symbol '$' in an identifier is treated as a base
                character. If the options -qnodollar and
                -qlanglvl=ucs are both in effect, the dollar symbol
                is treated as an extended character.  The default
                is -qnodollar.

         -qidirfirst | -qnoidirfirst
                Specifies the search order for files included with
                the #include "<filename>" directive.  Use
                -qidirfirst with the -I option.  If -qidirfirst is
                specified, the directories specified by the
                -I<directory> option are searched before the
                directory in which the current file resides.  The
                default is -qnoidirfirst.

         -qignprag=<option>
                Instructs the compiler to ignore certain pragma
                statements.  The options are:

                disjoint
                     Ignores all #pragma disjoint directives in the
                     source file.
                isolated
                     Ignores all #pragma isolated_call directives
                     in the source file.
                all
                     Ignores all #pragma isolated_call directives
                     and #pragma disjoint directives in the source
                     file.
                omp
                     Ignores all OpenMP parallel processing
                     directives in the source file.
                ibm
                     Ignores IBM parallel processing directives.

         -qkeyword=<keyword> | -qnokeyword=<keyword>
                Controls whether the specified name is treated as a
                keyword or as an identifier whenever it appears in
                a program source.  By default all the built-in
                keywords defined in the C language standards are
                reserved as keywords. However, you can use
                -qnokeyword=<keyword> to disable built-in keywords,
                and use -qkeyword=<keyword> to reinstate those
                keywords.

         -qlanglvl=<suboptions_list>
                Selects the language level and language options for
                the compilation. <suboptions_list> is a colon-
                separated list of suboptions.  The suboptions are:

                classic
                     Allows the compilation of non-stdc89 programs,
                     and conforms closely to the K&R level
                     preprocessor.
                extended
                     Provides compatibility with the RT compiler
                     and classic. This language level is based on
                     C89.
                saa
                     Compilation conforms to the current SAA(R) C
                     CPI language definition. This is currently SAA
                     C Level 2.
                saal2
                     Compilation conforms to the SAA C Level 2 CPI
                     language definition, with some exceptions.
                stdc89
                     Compilation conforms to the ANSI C89 standard,
                     also known as ISO C90.
                stdc99
                     Compilation conforms to the ISO C99 standard.
                extc89
                     Compilation conforms to the ANSI C89 standard,
                     and accepts implementation-specific language
                     extensions.
                extc99
                     Compilation conforms to the ISO C99 standard,
                     and accepts implementation-specific language
                     extensions.
                ucs | noucs
                     This option controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in program
                     source code.  Under language levels stdc99 and
                     extc99, the default is -qlanglvl=ucs.


                The default depends on the invocation command used:

                COMMAND         DEFAULT
                xlc             extc89
                cc              extended
                c89             stdc89
                c99             stdc99

         -qmacpstr | -qnomacpstr
                Converts Pascal string literals into null-
                terminated strings where the first byte contains
                the length of the string.  The default is
                -qnomacpstr.

         -qmbcs | -qnombcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qdbcs.  The default is -qnombcs.

         -qpascal | -qnopascal
                Specifies whether to recognize and accept the
                keyword 'pascal' in type specifiers and function
                declarations.  The default is -qnopascal.

         -qsourcetype=<type>
                Determines whether to treat all recognized source
                files as if they are of the source type specified
                by <type> (regardless of filename suffix), or
                whether to use the filename suffix to determine the
                programming language. The options are:

                default
                     The compiler assumes that the programming
                     language of a source file will be implied by
                     its filename suffix.
                c
                     The compiler compiles all source files
                     following this option as if they are C
                     language source files.
                c++
                     The compiler compiles all source files
                     following this option as if they are C++
                     language source files.
                assembler
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files.
                assembler-with-cpp
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files that need preprocessing.

                The default is -qsourcetype=default.

         -qstdinc | -qnostdinc
                Specifies which directories are used for files
                included by the #include <file_name> and #include
                "file_name" directives. The -qnostdinc option
                excludes the standard include directories from the
                search path.  The default is -qstdinc.

         -qsyntaxonly
                Performs syntax checking without generating an
                object file.

         -qtrigraph | -qnotrigraph
                Allows trigraph key combinations to represent
                characters not found on some keyboards.
                The default is qtrigraph, however if
                -qlanglvl=classic is in effect or implied, the
                trigraphs are not recognized by default.

         -qutf | -qnoutf
                Enables recognition of UTF literal syntax.  The
                default is -qnoutf.

  Output Control Options
         -#     Traces the compilation and generates information on
                the progress of the compilation without invoking
                the preprocessor, compiler, or linkage editor.

         -c     Instructs the compiler to pass source files to the
                compiler only. Compiled source files are not sent
                to the linkage editor.

         -E     Instructs the compiler to preprocess the source
                files and send preprocessed source to standard
                output.

         -M     Creates an output file that contains information to
                be included in a "make" description file. This is
                equivalent to specifying -qmakedep without a
                suboption.

         -MF<file>
                Specifies the target for the output generated by
                the -qmakedep or -M options, where <file> is the
                target output filepath. Note that "-MF <file>"
                (with a space before the argument) is also
                acceptable. This option only has effect when
                specified with -qmakedep or -M.

         -ma    Substitutes inline code for calls to function
                alloca.

         -o <filespec>
                Specifies an output location for the object,
                assembler, or executable files created by the
                compiler. When the -o option is used during
                compiler invocation, <filespec> can be the name of
                either a file or a directory.  The default name is
                a.out.

         -P     Preprocesses the C source files named in the
                compiler invocation and creates an output
                preprocessed source file, <filename.i> for each
                input source file.  The default is to compile and
                link-edit C source files to produce an executable
                file.

         -S     Generates an assembler language file (.s) for each
                source file. The resulting .s files can be
                assembled to produce object .o files or an
                executable file (a.out).

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -q32,-q64
                Selects either 32-bit or 64-bit compilation mode.
                Use the -q32 and -q64 options, along with the
                -qarch and -qtune compiler options, to optimize the
                output of the compiler to the architecture on which
                that output will be used. The default is -q32.

         -qalign=<option>
                Specifies what aggregate alignment rules the
                compiler uses for file compilation, where the
                alignment options are:

                bit_packed
                     The compiler uses the bit_packed alignment
                     rules.
                full
                     The compiler uses the RISC System/6000
                     alignment rules. This is the same as power.
                mac68k
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.
                natural
                     The compiler maps structure members to their
                     natural boundaries.
                packed
                     The compiler uses the packed alignment rules.
                power
                     The compiler uses the RISC System/6000
                     alignment rules.
                twobyte
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.  The mac68k option is the
                     same as twobyte.

                The default is -qalign=full.

         -qalloca
                Substitutes inline code for calls to function
                alloca, as if #pragma alloca directives were in the
                source code.

         -qbitfields={signed|unsigned}
                Specifies whether bit fields will be signed or
                unsigned.  The default is -qbitfields=unsigned.

         -qchars={signed|unsigned}
                Specifies whether the data type char will be signed
                or unsigned.  The default is -qchars=unsigned.

         -qenablevmx | -qnoenablevmx
                Enables generation of VMX (Vector Multimedia
                Extension) instructions.  The default is
                -qnoenablevmx.

         -qenum=<option>
                Specifies the amount of storage occupied by
                enumerations, where <option> is:

                small
                     Specifies that enumerations occupy the
                     smallest amount of space (1, 2, 4, or 8 bytes)
                     that can accurately represent the range of
                     values in the enumeration.  Signage is
                     unsigned, unless the range of values includes
                     negative values.
                int
                     Specifies that enumerations occupy 4 bytes and
                     are represented by int.
                intlong
                     Specifies that enumerations occupy 8 bytes of
                     storage if the range of values in the
                     enumeration exceeds the limit for int.
                     Otherwise, the enumerations occupy 4 bytes of
                     storage and are represented by int.
                1
                     Specifies that enumerations occupy 1 byte.
                     Type is signed or unsigned char.
                2
                     Specifies that enumerations occupy 2 bytes.
                     Type is signed or unsigned short.
                4
                     Specifies that enumerations occupy 4 bytes.
                     Type is signed or unsigned int.
                8
                     Specifies that enumerations occupy 8 bytes.
                     Type is signed or unsigned long long in 32-bit
                     mode, and signed or unsigned long in 64-bit
                     mode.

         -qfuncsect | -qnofuncsect
                Places instructions for each function in a separate
                object file control section or csect.  The default
                is -qfuncsect.

         -qmakedep[=gcc]
                Creates an output file that contains targets
                suitable for inclusion in a description file for
                the make command that describes the dependencies of
                the main source file in the compilation.
                Specifying 'gcc' changes the format of the
                generated dependency file. Specifying -qmakedep
                without 'gcc' is equivalent to specifying -M.

         -qpic[={small|large}]
                Instructs the compiler to generate position-
                independent code suitable for use in shared
                libraries.

                small
                     Instructs the compiler to assume that the size
                     of the global offset table is no larger than
                     64 Kb.
                large
                     Allows the global offset table to be larger
                     than 64 Kb in size, allowing more addresses to
                     be stored in the table.

                The -qpic option is implied if either of the -G or
                -qmkshrobj compiler options is specified.  The
                default is -qpic=small.

         -qppline | -qnoppline
                Enables generation of #line directive in the
                preprocessed output.  If the -P option is enabled,
                the default is -qnoppline. Otherwise, the default
                is -qppline.

         -qreserved_reg=<registers_list>
                Indicates that the specified register(s) cannot be
                used during the compilation, except as a stack
                pointer, frame pointer or in a different fixed
                role. <registers_list> is a colon-separated list of
                registers. You should use this option in modules
                that are required to work with other modules that
                use global register variables or hand-written
                assembler code.

         -qro | -qnoro
                Specifies the storage type for string literals and
                puts string literals in read-only storage.  The
                default with cc and its derivatives is -qnoro,
                otherwise the default is -qro.

         -qroconst | -qnoroconst
                Specifies the storage location for constant values.
                Puts constant values in read-only storage.  The
                default with xlc and c89 compiler invocations is
                -qroconst, and the default with cc is -qnoroconst.

         -qroptr | -qnoroptr
                Specifies the storage location for constant
                pointers. This options requires AIX V5.2 or
                greater.  The default is -qnoroptr.

         -qsaveopt | -qnosaveopt
                Saves command line options in the corresponding
                object files.  The default is -qnosaveopt.

         -qstatsym | -qnostatsym
                Adds user-defined, non-external names that have a
                persistent storage class (such as initialized and
                uninitialized static variables) to the name list.
                The default is -qnostatsym.

         -qthreaded | -qnothreaded
                Ensures that all optimizations will be thread-safe
                for executing in a multi-threaded environment.  The
                default is -qthreaded when compiling invocation
                commands ending in "_r", and -qnothreaded
                otherwise.

         -qupconv | -qnoupconv
                Preserves the unsigned specification when
                performing integral promotions.  The default is
                -qupconv when -qlanglvl=extc89, and -qnoupconv
                otherwise.

         -qweaksymbol | -qnoweaksymbol
                Instructs the compiler to generate weak symbols.
                The default is -qnoweaksymbol on AIX 5.1, and
                -qweaksymbol on AIX 5.2 and higher.

         -qxcall | -qnoxcall
                Generates code to treat static functions within a
                compilation unit as if they were external
                functions.  The default is -qnoxcall.

  Optimization Options
         -O[<level>]
                Optimizes code at a choice of levels during
                compilation. This is equivalent to
                -qoptimize[=<level>]. <level> can be:

                0
                     Performs only quick local optimizations such
                     as constant folding and elimination of local
                     common subexpressions.
                2
                     Performs optimizations that the compiler
                     developers considered the best combination for
                     compilation speed and runtime performance. The
                     optimizations may change from product release
                     to release.
                3
                     Performs some memory and compile-time
                     intensive optimizations in addition to those
                     executed with -O2.  The -O3 specific
                     optimizations have the potential to alter the
                     semantics of a program.  The compiler guards
                     against these optimizations at -O2 and the
                     option -qstrict is provided at -O3 to turn off
                     these aggressive optimizations. Specifying -O3
                     will set -qhot=level=0.
                4
                     This option is the same as -O3, but also:
                     - Sets the -qarch and -qtune options to the
                     architecture of the compiling machine.
                     - Sets the -qcache option most appropriate to
                     the characteristics of the compiling machine.
                     - Sets the -qipa option.
                     - Sets the -qhot option to level=1.
                5
                     Equivalent to -O4 -qipa=level=2.

                The default is -O0. Specifying -O with no <level>
                is equivalent to specifying -O2.

         -Q[<suboption>]
                Specifies which specific functions the compiler
                should attempt to inline.

                This option can take the form:

                     -Q
                          Attempts to inline all appropriate
                          functions with 20 executable source
                          statements or fewer, subject to the
                          setting of any of the suboptions to the
                          -Q option. If -Q is specified last, all
                          functions are inlined.
                     -Q!
                          Does not inline any functions. If -Q! is
                          specified last, no functions are inlined.
                     -Q-<names_list>
                          Does not inline functions listed in
                          <names_list>, where <names_list> is a
                          colon-separated list. All other
                          appropriate functions are inlined. The
                          option implies -Q.
                     -Q+<names_list>
                          Attempts to inline the functions listed
                          in <names_list> and any other appropriate
                          functions. <names_list> is a colon-
                          separated list.  The option implies -Q.
                     -Q=<threshold>
                          Sets a size limit on the functions to be
                          inlined. The number of executable
                          statements must be less than or equal to
                          <threshold> for the function to be
                          inlined. <threshold> must be a positive
                          integer. The default value is 20.
                          Specifying a threshold value of 0 causes
                          no functions to be inlined except those
                          functions marked with the __inline,
                          _Inline, or _inline keywords.

                The default is to treat inline specifications as a
                hint to the compiler.

         -qaggrcopy={overlap|nooverlap}
                Enables destructive copy operations for structures
                and unions.  The default is -qaggrcopy=overlap when
                compiling to the EXTENDED and CLASSIC language
                levels, and -qaggrcopy=nooverlap otherwise.

         -qalias=<options_list>
                Specifies the aliasing assertions to be applied to
                your compilation unit. <options_list> is a colon-
                separated list of the following options:

                addrtaken | noaddrtaken
                     Variables are disjoint from pointers unless
                     their address is taken.
                allptrs | noallptrs
                     If noallptrs is specified, pointers are never
                     aliased.
                ansi | noansi
                     If ansi is specified, type-based aliasing is
                     used during optimization, which restricts the
                     lvalues that can be safely used to access a
                     data object. The default is ansi for the xlc
                     and c89 command and noansi for the cc
                     invocation commands.  This option has no
                     effect unless you also specify the -O option.
                typeptr | notypeptr
                     If notypeptr is specified, pointers to
                     different types are never aliased.

                The default is
                -qalias=noaddrtaken:noallptrs:typeptr:ansi.

         -qansialias | -qnoansialias
                This option is obsolete. Use -qalias=ansi in your
                new applications. See the -qalias=ansi suboption.
                The default is -qansialias with xlc, c99, and c89,
                and -qnoansialias with cc.

         -qarch=<option>
                Specifies the general processor architecture for
                which the code (instructions) should be generated.
                In general, the -qarch option allows you to target
                a specific architecture for the compilation. For
                any given -qarch setting, the compiler defaults to
                a specific, matching -qtune setting, which can
                provide additional performance improvements.  The
                suboptions are:

                auto
                     Generates instructions that will run on the
                     hardware platform on which the program is
                     compiled.
                com
                     In 32-bit mode, generates instructions that
                     will run on all the POWER and PowerPC hardware
                     platforms.  In 64-bit mode, these instructions
                     will run on 64-bit PowerPC processors but not
                     on 32-bit PowerPC processors.  This is the
                     default unless -q64, -O4, or -O5 are
                     specified.
                pwr
                     Generates instructions that will run on the
                     POWER, POWER2, and 601 hardware platforms.
                pwr2
                     Generates instructions that will run on the
                     POWER2 hardware platform.
                pwr3
                     Generates instructions that will run on a
                     POWER3, POWER4, POWER5, and POWERPC970 chip.
                pwr4
                     Generates instructions that will run on a
                     POWER4, POWER5, and POWERPC970 chip.
                pwr5
                     Generates object code containing instructions
                     that will run on the POWER5 hardware platform.
                pwr5x
                     Generates instructions that will run on any
                     POWER5+ hardware platform.
                ppc
                     In 32-bit mode, produces object code
                     containing instructions that will run on any
                     of the 32-bit PowerPC hardware platforms. This
                     suboption will cause the compiler to produce
                     single-precision instructions to be used with
                     single-precision data.  Specifying -qarch=ppc
                     together with -q64 quietly upgrades the -qarch
                     setting to -qarch=ppc64.
                ppcgr
                     In 32-bit mode, produces object code for
                     PowerPC processors that support optional
                     graphics instructions. Note that specifying
                     -q64 with -qarch=ppcgr will quietly upgrade
                     the -qarch setting to -qarch=ppc64gr.
                ppc64
                     Generates instructions that will run on any of
                     the 64-bit PowerPC hardware platform.
                ppc64v
                     Generates instructions for the 64-bit PowerPC
                     processor with VMX.
                ppc970
                     Generates instructions that will run on the
                     PPC970 hardware platform.
                ppc64gr
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics instructions.
                ppc64grsq
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics and square root instructions.
                pwr2s
                     Generates instructions that will run on POWER2
                     Chip desktop implementations.
                p2sc
                     Generates instructions that will run on a
                     POWER2 Super Chip.
                601
                     Generates instructions that will run on a 601
                     chip.
                602
                     Generates instructions that will run on a 602
                     chip.
                603
                     Generates instructions that will run on a 603
                     chip.
                604
                     Generates instructions that will run on a 604
                     chip.
                403
                     Generates instructions that will run on a 403
                     chip.
                rs64a
                     Generates instructions that will run on a
                     rs64I chip.
                rs64b
                     Generates instructions that will run on a
                     RS64II chip.
                rs64c
                     Generates instructions that will run on a
                     RS64III chip.

         -qassert=<suboption> | -qnoassert
                This option is obsolete. Use -qalias in your new
                applications. This option specifies the aliasing
                assertion to be applied to your compilation unit.
                The suboptions are:

                typeptr
                     Pointers to different types are never aliased.
                allptrs
                     Pointers are never aliased.
                addrtaken
                     Variables are disjoint from pointers unless
                     their address are taken.

                The default is -qnoassert.

         -qcache=<suboptions_list>
                Describes the cache configuration for a specific
                target execution machine, where <suboptions_list>
                is a colon-separated list of one or more of the
                following suboptions:

                assoc=<number>
                     Specifies the set associativity of the cache,
                     where <number> is one of the following:
                          0    Direct-mapped cache
                          1    Fully associative cache
                          (number > 1)   n-way set associative
                          cache
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. This
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty, in CPU
                     cycles, resulting from a cache miss.
                level=<level>
                     Specifies the level of cache affected, where
                     level is one of the following:
                          1     Basic cache
                          2     Level-2 cache or, if there is no
                                level-2 cache, the table lookaside
                                buffer (TLB)
                          3     TLB
                          If a machine has more than one level of
                          cache, use a separate -qcache option.
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<cache_type>
                     The settings apply to the specified type of
                     cache, where <cache_type> is one of the
                     following:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The -qtune setting determines the optimal default
                -qcache settings for most typical compilations.

         -qcompact | -qnocompact
                Reduces code size where possible, at the expense of
                execution speed. Code size is reduced by inhibiting
                optimizations that replicate or expand code inline.
                This option takes effect only if -O2 or higher is
                also used.  The default is -qnocompact.

         -qdataimported[=<names_list>]
                Specifies which data items are imported. If no
                names are specified, all data items are assumed to
                be imported.  <names_list> is a colon-separated
                list of data items.

         -qdatalocal[=<names_list>]
                Specifying -qdatalocal=<names_list> marks the named
                variables as local, where <names_list> is a colon-
                separated list of identifiers. Specifying
                -qdatalocal with no variables instructs the
                compiler to assume that all variables are local.

         -qdirectstorage | -qnodirectstorage
                Informs the compiler that write-through-enabled or
                cache-inhibited storage may be referenced.  The
                default is -qnodirectstorage.

         -qfdpr | -qnofdpr
                Collects information about programs for use with
                the AIX fdpr (Feedback Directed Program
                Restructuring) performance-tuning utility.  The
                default is -qnofdpr.

         -qhot[=<suboption>] | -qnohot
                Specifies whether or not to perform high-order
                transformations during optimization. The suboptions
                are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value.  Otherwise, the
                     compiler will pad any arrays where it infers
                     that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. -qhot=level=1 will
                     be equivalent to -qhot and the compiler
                     options that imply -qhot also imply
                     -qhot=level=1 unless -qhot=level=0 is
                     explicitly specified. See the Compiler
                     Reference for more information.
                simd | nosimd
                     The compiler converts certain operations that
                     are performed in a loop on successive elements
                     of an array into a call to a VMX (Vector
                     Multimedia Extension) instruction. This
                     suboption has effect only when the effective
                     architecture supports VMX instructions and you
                     specify -qenablevmx.
                vector | novector
                     When specified with -qnostrict and -qignerrno,
                     or an optimization level of -O3 or higher, the
                     compiler converts certain operations that are
                     performed in a loop on successive elements of
                     an array (for example, square root, reciprocal
                     square root) into a call to a Mathematical
                     Acceleration Subsystem (MASS) library vector
                     routine. This call will calculate several
                     results at one time, which is faster than
                     calculating each result sequentially.

                The default is -qnohot.

         -qignerrno | -qnoignerrno
                Allows the compiler to perform optimizations that
                assume errno is not modified by system calls.  The
                default is -qnoignerrno.

         -qinline[<suboption>] | -qnoinline
                Specifies whether to attempt to inline functions
                instead of generating calls to a function. This
                option can take the following forms:

                -qinline
                     The compiler attempts to inline all
                     appropriate functions with 20 executable
                     source statements or fewer, subject to any
                     other settings of the suboptions to the
                     -qinline option.
                -qinline=threshold=<num>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <num> for the
                     function to be inlined. <num> must be a
                     positive integer.
                -qinline+<names_list>
                     Attempts to inline the functions listed in
                     <names_list> and any other appropriate
                     functions, where <names_list> is a colon-
                     separated list.
                -qinline-<names_list>
                     Specifies that functions listed in
                     <names_list> do not get inlined, where
                     <names_list> is a colon-separated list.
                -qnoinline
                     Does not inline any functions.

                The default is to treat inline specifications as a
                hint to the compiler, and the result depends on
                other options that you select:  If you specify the
                -g option (to generate debug information), inlining
                may be affected.

         -qipa[=<suboptions_list>] | -qnoipa
                Turns on or customizes a class of optimizations
                known as interprocedural analysis (IPA).  Regular
                expressions are supported when specifying procedure
                names for these suboptions:  cloneproc,
                nocloneproc, exits, inline, noinline, isolated,
                lowfreq, pure, safe, unknown. <suboptions_list> is
                a colon-separated list of one or more of the
                following suboptions:

                clonearch=<architecture_list> | noclonearch
                     Allows you to specify a group of architectures
                     in case you want to compile your application
                     for multiple architectures with a single
                     binary file. <architecture_list> is a comma-
                     separated list of one or more of the following
                     architectures: pwr4, pwr5, and ppc970. When
                     -qcompact is in effect, -qarch=clonearch is
                     disabled. This must be specified during link
                     time.  The default is -qipa=noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of functions that you wish to clone (or not
                     clone). Please note that this suboption has no
                     effect unless -qipa=clonearch=<arch> is
                     specified.
                exits=<procedure_names_list>
                     Specifies names of functions which represent
                     program exits.  <procedure_names_list> is a
                     comma-separated list of procedures.
                infrequentlabel=<names_list>
                     Specifies a comma-separated list of user-
                     defined labels that are likely to be called
                     infrequently during a program run.
                inline[=<suboption>]
                     Specifying 'inline' with no suboption asserts
                     that all appropriate procedures will be
                     inlined. <suboption> can be one of the
                     following:
                     auto | noauto
                          Specifies whether or not to automatically
                          inline procedures.
                     <procedure_names_list>
                          Specifies a comma-separated list of
                          procedures to attempt to inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This only takes
                          effect when inline=auto is on.
                     <options_list>
                          The same as specifying
                          -qinline=<options_list>. <options_list>
                          is a comma-separated list of any
                          suboptions that belong to the -qinline
                          compiler option.
                noinline=<procedures_list>
                     Specifies a comma-separated list of procedures
                     which are not to be inlined.
                isolated=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that do
                     not directly refer to any global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization performed, where <level> can be
                     equal to:
                     0
                          Performs minimal interprocedural analysis
                          and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full interprocedural data flow and alias
                          analysis.
                     The default is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, if an object listing has been
                     requested using the -qlist option. The default
                     name is "a.lst". Specifying 'long' or 'short'
                     can be used to request more or less
                     information in the listing file to determine
                     which listing sections will be included. The
                     default is 'short'.
                lowfreq=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are likely to be called infrequently
                     during the course of a typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the default assumption for
                     procedures not compiled with -qipa.
                     unknown
                          Greatly restricts the amount of
                          interprocedural optimization for calls to
                          unknown functions.
                     safe
                          Functions which do not indirectly call a
                          visible (not missing) function either
                          through direct call or function pointer.
                     isolated
                          Functions which do not directly reference
                          global variables accessible to visible
                          functions.
                     pure
                          Functions which are safe and isolated and
                          which do not indirectly alter storage
                          accessible to functions.
                object | noobject
                     This is a compile-time option. It specifies
                     whether to include standard object code in the
                     object files. Specifying 'noobject' can
                     substantially reduce overall compile time by
                     not generating object code during the first
                     IPA phase.
                partition={small|medium|large}
                     Specifies the size of program sections that
                     are analyzed together. Larger partitions may
                     produce better analysis but require more
                     storage.
                pdfname[=<filename>] | nopdfname
                     Specifies the name of the profile data file
                     containing the PDF profiling information.  If
                     you do not specify <filename>, the default
                     file name is ._pdf.
                pure=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that are
                     "isolated", "safe", and do not modify any data
                     objects that are visible to the caller.
                safe=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that do not call
                     any other part of the program.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that may
                     update global variables and dummy arguments
                     and call other parts of the program compiled
                     with -qipa.
                <filename>
                     Specifies the name of a file that contains
                     suboption information in a special format.

                The default is -qnoipa.

         -qisolated_call=<function_names_list>
                Specifies functions in the source file that have no
                side effects, where <function_names> is a colon-
                separated list of function names.

         -qlargepage | -qnolargepage
                Exploits large page heaps that are available on
                Power 4 and Power 5 systems running AIX v5.1D or
                later.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C library function are in fact the library
                functions.  The default is -qnolibansi.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 | -qnopdf1
                Produces an object that is instrumented to collect
                runtime execution information. This is phase 1 of
                the profile-directed feedback optimization process.
                The default is -qnopdf1.

         -qpdf2 | -qnopdf2
                Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.  The default is
                -qnopdf2.

         -qprefetch | -qnoprefetch
                Enables generation of prefetching instructions such
                as dcbt and dcbz in compiled code.  The default is
                -qprefetch.

         -qprocimported[=<names_list>] | -qnoprocimported
                If no <names_list> is specified, it asserts that
                all functions are imported. Otherwise, only the
                named functions are marked as imported.
                <names_list> is a colon-separated list of function
                identifiers.

         -qproclocal[=<names_list>] | -qnoproclocal
                If no <names_list> is specified, it asserts that
                all functions are local. Otherwise, only the named
                functions are marked as local. <names_list> is a
                colon-separated list of function identifiers.

         -qprocunknown[=<names_list>] | -qnoprocunknown
                If no <names_list> is specified, it asserts that
                all functions are unknown. Otherwise, only the
                named functions are marked as unknown. <names_list>
                is a colon-separated list of function identifiers.

         -qshowpdf | -qnoshowpdf
                Used with -qpdf1 and a minimum optimization level
                of -O to add additional call and block count
                profiling information to an executable.  The
                default is -qnoshowpdf.

         -qsmallstack | -qnosmallstack
                Reduces the size of the stack frame.  This option
                is only valid when used together with IPA (-qipa,
                -O4, -O5 compiler options).  The default is
                -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Enables parallelization of program code.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization and
                     optimization. If noauto is specified,
                     automatic parallelization of program code is
                     disabled; only program code explicitly
                     parallelized with IBM SMP or OpenMP directives
                     is optimized.
                explicit | noexplicit
                     Enables explicit parallelization of loops.
                nested_par | nonested_par
                     Enables parallelization of nested parallel
                     constructs.
                omp | noomp
                     Enables strict OpenMP compliance. Only OpenMP
                     parallelization pragmas are recognized.
                opt | noopt
                     Enables automatic parallelization but disables
                     optimization of parallelized program code. If
                     noopt is specified, optimization of
                     parallelized program code is disabled.
                rec_locks | norec_locks
                     Specifies whether to use recursive locks.
                schedule=<type>
                     Specifies what kinds of scheduling algorithms
                     and chunking are used for loops to which no
                     other scheduling algorithm has been explicitly
                     assigned in the source code. <type> can be:
                     dynamic[=<num>]
                     guided[=<num>]
                     static[=<num>]
                     affinity[=<num>]
                     runtime

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, explicit, noomp, norec_locks, nonested_par,
                schedule=runtime.

         -qspill=<size>
                Specifies the size of the register allocation spill
                area in bytes.  The default is -qspill=512.

         -qstrict | -qnostrict
                Turns off aggressive optimizations which have the
                potential to alter the semantics of your program.
                -qstrict sets -qfloat=nofltint:norsqrt. -qnostrict
                sets -qfloat=rsqrt. This option is only valid with
                -O2 or higher optimization levels. The default is
                -qnostrict at -O3 or higher, and -qstrict
                otherwise.

         -qstrict_induction | -qnostrict_induction
                Turns off loop induction variable optimizations
                that have the potential to alter the semantics of
                your program.  The default is -qnostrict_induction
                at -O2 or higher and -qstrict_induction otherwise.

         -qtocdata | -qnotocdata
                Marks data as local.  The default is -qnotocdata.

         -qtocmerge | -qnotocmerge
                Reads from the file specified in -bImportfile
                linker option and merges the address information to
                access ranges of external addresses using a single
                table of contents entry.  The default is
                -qnotocmerge.

         -qtune=<suboption>
                Specifies the architecture system for which the
                executable program is optimized.  The suboptions
                are:

                auto
                     Generates object code optimized for the
                     hardware platform on which the program is
                     compiled.
                403
                     Generates object code optimized for all the
                     PowerPC 403 processors.
                601
                     Generates object code optimized for all the
                     PowerPC 601 processors.
                602
                     Generates object code optimized for all the
                     PowerPC 602 processors.
                603
                     Generates object code optimized for all the
                     PowerPC 603 processors.
                604
                     Generates object code optimized for all the
                     PowerPC 604 processors.
                p2sc
                     Generates object code optimized for all the
                     PowerPC P2SC processors.
                ppc
                     Generates object code optimized for 32-bit
                     POWERPC hardware platform.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                pwr
                     Generates object code optimized for the POWER
                     hardware platforms.
                pwr2
                     Generates object code optimized for the POWER2
                     hardware platform.
                pwr2s
                     Generates object code optimized for the POWER2
                     hardware platform, avoiding certain
                     quadruple-precision instructions that would
                     slow program performance.
                pwr3
                     Generates object code optimized for the POWER3
                     processor.
                pwr4
                     Generates object code optimized for the POWER4
                     processor.
                pwr5
                     Generates object code optimized for the POWER5
                     hardware platforms.
                rs64I
                     Generates object code optimized for the rs64a
                     processor.
                rs64b
                     Generates object code optimized for the RS64II
                     processor.
                rs64c
                     Generates object code optimized for the
                     RS64III processor.

                The default setting is determined by the setting of
                -qarch.

         -qunroll[={yes|no|auto}] | -qnounroll
                Unrolls inner loops in the program. This can help
                improve program performance.  The options are:

                yes
                     Is a suggestion to the compiler to unroll
                     loops.
                no
                     Instructs the compiler not to unroll loops.
                auto
                     Leaves the decision to unroll loops to the
                     compiler.

                The default is -qunroll=auto.  If -qunroll is
                specified with no suboptions, the compiler assumes
                -qunroll=yes.

         -qunwind | -qnounwind
                Informs the compiler that the stack can be unwound
                while a routine in the compilation is active.
                Specifying -qnounwind can improve the optimization
                of non-volatile register saves and restores.  The
                default is -qunwind.

         -qvecnvol | -qnovecnvol
                Specifies whether to use volatile or non-volatile
                vector registers. Volatile vector registers are
                registers whose value is not preserved across
                function calls or in the context of save, jump or
                switch system library functions. If -qnoenablevmx
                is in effect, this option is ignored.  The default
                is -qnovecnvol.

  Error Checking and Debugging Options
         -g     Generates information for debugging tools such as
                the IBM Debugger for AIX, Version 3.1.

         -p     Sets up the object files produced by the compiler
                for profiling.

         -pg    Sets up the object files for profiling, but
                provides more information than is provided by the
                -p option.

         -qcheck[=<suboptions_list>] | -qnocheck
                Generates code that performs certain types of
                runtime checking. If a violation is encountered, a
                runtime exception is raised by sending a SIGTRAP
                signal to the process. <suboptions_list> is a
                colon-separated list of one or more of the
                following:

                bounds | nobounds
                     Performs runtime checking of addresses when
                     subscripting within an object of known size.
                divzero | nodivzero
                     Performs runtime checking of integer division.
                     A trap will occur if an attempt is made to
                     divide by zero.
                nullptr | nonullptr
                     Performs runtime checking of addresses
                     contained in pointer variables used to
                     reference storage.
                all
                     Switches on all the above suboptions.

                The default is -qnocheck.

         -qdbxextra | -qnodbxextra
                Specifies that all typedef declarations, struct,
                union, and enum type definitions are included for
                debugging.  Use this option with the -g option to
                produce additional debugging information for use
                with a debugger.  The default is -qnodbxextra.

         -qdpcl | -qnodpcl
                Generates symbols that can be used by tools based
                on the Dynamic Probe Class Library (DPCL) to see
                the structure of an executable file.  The default
                is -qnodpcl.

         -qextchk | -qnoextchk
                Generates bind-time type-checking information and
                checks for compile-time consistency.  The default
                is -qnoextchk.

         -qfullpath | -qnofullpath
                Specifies the path information stored for files
                when you use the -g compiler option.  The default
                is -qnofullpath.

         -qgenproto[=parmnames] | -qnogenproto
                Produces ANSI prototypes from K&R function
                definitions.  Specifying -qgenproto without
                '=parmnames' will cause prototypes to be generated
                without parameter names.  The default is
                -qnogenproto.

         -qheapdebug | -qnoheapdebug
                Enables debug versions of memory management
                functions.  The default is -qnoheapdebug.

         -qinitauto=<hex_value> | -qnoinitauto
                Initializes automatic variables to the two-digit
                hexadecimal byte value <hex_value>. This generates
                extra code and should only be used for error
                determination.  The default is -qnoinitauto.

         -qkeepparm | -qnokeepparm
                Ensures that function parameters are stored on the
                stack even if the application is optimized.  As a
                result, parameters remain in the expected memory
                location, providing access to the values of these
                incoming parameters to tools such as debuggers. The
                default is -qnokeepparm.

         -qlinedebug | -qnolinedebug
                Generates abbreviated line number and source file
                name information for the debugger.  The default is
                -qnolinedebug.

         -qmaxerr=<num>[:<sev>] | -qnomaxerr
                Instructs the compiler to halt compilation when the
                specified number of errors of the specified
                severity (by default, the value of -qhalt) or
                greater is reached.  <num> must be an integer. The
                severity levels, <sev>, are:

                i = informational
                w = warning
                e = error
                s = severe error

                The default is -qnomaxerr.

         -qproto | -qnoproto
                Assumes that all functions are prototyped.  Asserts
                that procedure call points agree with their
                declarations even if the procedure has not been
                prototyped. This allows the caller to pass
                floating-point arguments in floating-point
                registers instead of general-purpose registers.
                The default is -qnoproto.

         -qspnans | -qnospnans
                This option is obsolete. Use -qfloat=nans in your
                new applications. Generates extra instructions to
                detect signalling NaN on conversion from single
                precision to double precision. The -qnospnans
                option specifies that this conversion need not be
                detected. The default is -qnospnans.

         -qsymtab={unref|static}
                Determines what types of information appear in the
                symbol table.  The suboptions are:

                unref
                     Specifies that all typedef declarations,
                     struct, union, and enum type definitions are
                     included for processing by the debugger.
                static
                     Adds user-defined, non-external names that
                     have a persistent storage class (such as
                     initialized and uninitialized static
                     variables) to the name list.

                The default is to not add static variables to the
                symbol table.

         -qtbtable=<option>
                Generates a traceback table that contains
                information about each function, including the type
                of function as well as stack frame and register
                information. The traceback table is placed in the
                text segment at the end of its code.  The options
                are:

                none
                     No traceback table is generated.
                full
                     A full traceback table is generated.  This is
                     the default with -qnoopt or -g specified.
                small
                     A traceback table is generated with no name or
                     parameter information.  This is the default
                     with optimization if -g is not specified.

         -qwarn64 | -qnowarn64
                Enables checking for possible data conversion
                problems between 32-bit and 64-bit compiler modes.
                The default is -qnowarn64.

  Listing and Message Options
         -V     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a space-separated list.

         -v     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a comma-separated list.

         -w     Suppresses warnings and lower-level messages.
                Specifying this option is equivalent to specifying
                -qflag=e:e.

         -qattr[=full] | -qnoattr
                Produces a compiler listing that includes an
                attribute listing for all identifiers. If -qattr is
                specified, the listing contains only those
                identifiers that are used. If -qattr=full is
                specified, the listing contains all names. If
                -qnoattr is specified, no listing is produced.  The
                default is -qnoattr.

         -qdump_class_hierarchy
                for each class object, this option dumps a
                representation of its hierarchy and virtual
                function table layout to a file. The file name is
                created by appending ".class" to the source file
                name.

         -qflag=<listing_severity>:<terminal_severity>
                Defines the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> is the
                minimum level for the listing file, and
                <terminal_severity> is the minimum level for the
                terminal.  The message severity levels are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qflag=i:i.

         -qformat=<options_list> | -qnoformat
                Warns of possible problems with string input and
                output format specifications. Functions diagnosed
                are printf, scanf, strftime, strfmon family
                functions and functions marked with format
                attributes. <options_list> is a comma-separated
                list of one or more of the following suboptions:

                all | noall
                     Turns on all format diagnostic messages.
                exarg | noexarg
                     Warns if excess arguments appear in printf and
                     scanf style function calls.
                nlt | nonlt
                     Warns if a format string is not a string
                     literal, unless the format function takes its
                     format arguments as a va_list.
                sec | nosec
                     Warns of possible security problems in use of
                     format functions.
                y2k | noy2k
                     Warns of strftime formats that produce a 2-
                     digit year.
                zln | nozln
                     Warns of zero-length formats.

                The default is -qnoformat, which is equivalent to
                -qformat=noall. If -qformat is specified without
                any suboptions, the default is -qformat=all.

         -qhalt=<sev>
                Stops the compiler after the first phase if the
                severity level of errors detected equals or exceeds
                the specified level, <sev>.  The severity levels in
                increasing order of severity are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qhalt=s.

         -qinfo[=[<suboption>][<groups_list>]] | -qnoinfo
                Produces informational messages. <groups_list> is a
                colon-separated list. If a <groups_list> is
                specified along with a <suboption>, a colon must
                separate them. The suboptions are:

                all | noall
                     Turns on all diagnostic messages for all
                     groups.  Specifying 'noall' turns off all
                     diagnostic messages for specific portions of
                     your program.
                private
                     Lists shared variables that are made private
                     to a parallel loop.
                reduction
                     Lists variables that are recognized as
                     reduction variables inside a parallel loop.

                Also:
                <groups_list>
                     Turns on or off specific groups of messages,
                     where <groups_list> is a colon-separated list
                     of one or more of the following:

                     c99 | noc99
                          C code that might behave differently
                          between C89 and C99 language levels
                     cmp | nocmp
                          Possible redundancies in unsigned
                          comparisons
                     cnd | nocnd
                          Possible redundancies or problems in
                          conditional expressions
                     cns | nocns
                          Operations involving constants
                     cnv | nocnv
                          Conversions
                     dcl | nodcl
                          Consistency of declarations
                     eff | noeff
                          Statements and pragmas with no effect
                     enu | noenu
                          Consistency of enum variables
                     ext | noext
                          Unused external definitions
                     gen | nogen
                          General diagnostic messages
                     gnr | nognr
                          Generation of temporary variables
                     got | nogot
                          Use of goto statements
                     ini | noini
                          Possible problems with initialization
                     inl | noinl
                          Functions not inlined
                     lan | nolan
                          Language level effects
                     obs | noobs
                          Obsolete features
                     ord | noord
                          Unspecified order of evaluation
                     par | nopar
                          Unused parameters
                     por | nopor
                          Non-portable language constructs
                     ppc | noppc
                          Possible problems with using the
                          preprocessor
                     ppt | noppt
                          Trace of preprocessor actions
                     pro | nopro
                          Missing function prototypes
                     rea | norea
                          Code that cannot be reached
                     ret | noret
                          Consistency of return statements
                     trd | notrd
                          Possible truncation or loss of data or
                          precision
                     tru | notru
                          Variable names truncated by the compiler
                     trx | notrx
                          Rounding of hexadecimal floating-point
                          constants
                     uni | nouni
                          Uninitialized variables
                     upg | noupg
                          Upgrade issues from one release to the
                          next release
                     use | nouse
                          Unused auto and static variables
                     zea | nozea
                          Zero-extent arrays

                The default is -qnoinfo.
                If -qinfo is specified with no suboptions, the
                default is -qinfo=all.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                The default is -qnolist.

         -qlistopt | -qnolistopt
                Produces a compiler listing that displays all the
                options that were in effect when the compiler was
                invoked.  The default is -qnolistopt.

         -qphsinfo | -qnophsinfo
                Reports the time taken in each compilation phase.
                Phase information is sent to standard output.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qprint | -qnoprint
                Enables or suppresses listings. Specifying
                -qnoprint overrides all listing-producing options,
                regardless of where they are specified, to suppress
                listings.  The default is -qprint.

         -qreport | -qnoreport
                Instructs the compiler to produce transformation
                reports that show how program loops are
                parallelized and/or optimized. The transformation
                reports are included as part of the compiler
                listing.  This option requires either -qhot, -qsmp,
                or -qipa=clonearch in order to have effect.  The
                default is -qnoreport.

         -qshowinc[=<types_list>] | -qnoshowinc
                Used with -qsource to selectively show user header
                files (includes using " ") or system header files
                (includes using < >) in the program source listing.
                <types_list> is a colon-separated list of one or
                more of the following types:

                usr | nousr
                     Specifies whether to show user include files
                sys | nosys
                     Specifies whether to show system include files
                all
                     Shows both user and system include files

                The default is -qnoshowinc.

         -qsource | -qnosource
                Produces a compiler listing and includes source
                code.  The default is -qnosource.

         -qsrcmsg | -qnosrcmsg
                Adds the corresponding source code lines to the
                diagnostic messages in the stderr file.  The
                default is -qnosrcmsg.

         -qsuppress[=<msg_list>] | -qnosuppress
                Prevents the specified compiler or driver
                informational or warning messages from being
                displayed or added to the listings, where
                <msg_list> is a colon-separated list of message
                numbers that will not be displayed.  The default is
                -qnosuppress.

         -qtabsize=<size>
                Changes the length of tabs as perceived by the
                compiler, where <size> is the number of character
                spaces representing a tab in the source program.
                The default is -qtabsize=8.

         -qversion
                Displays information on the compiler version. It
                will output (to STDOUT) the official compiler
                product name and the compiler version found on the
                system. You can specify -qversion outside of a
                compilation (xlc -qversion) or as part of a
                compilation, but compilation will not occur.

         -qwarnfourcharconsts | -qnowarnfourcharconsts
                Issues diagnostic messages when the compiler finds
                four-character constants in the program source.
                The default is -qnowarnfourcharconsts.

         -qxref[=full] | -qnoxref
                Specifies whether to produce a compiler listing
                that includes a cross-reference listing of all
                identifiers. Specifying -qxref will report only
                identifiers that are used, -qxref=full reports all
                identifiers in the program, and -qnoxref does not
                report any identifiers in the program. The
                -qnoprint option overrides this option.  The
                default is -qnoxref.

  Compatibility Options
  Linking Options
         -b{dynamic|shared|static}
                Controls how shared objects are processed by the
                linkage editor.  The suboptions are:

                dynamic, shared
                     Causes the linker to process subsequent shared
                     objects in dynamic mode. This is the default.
                     In dynamic mode, shared objects are not
                     statically included in the output file.
                     Instead, the shared objects are listed in the
                     loader section of the output file.
                static
                     Causes the linker to process subsequent shared
                     objects in static mode. In static mode, shared
                     objects are statically linked in the output
                     file.

         -bmaxdata=<num>
                Sets the maximum size of the area shared by the
                static data (both initialized and uninitialized)
                and the heap to <num> bytes. This value is used by
                the system loader to set the soft ulimit. The
                default is -bmaxdata=0.

         -brtl  Enables runtime linking for the output file. Do not
                specify the -brtl compiler option if you are
                invoking the compiler with xlc_r4 or if the
                -qheapdebug compiler option is specified.

         -e <name>
                Sets the entry name for a shared executable.  This
                option is only used together with -qmkshrobj.

         -f<filename>
                Names a file to store a list of object files for
                the compiler to pass to the linker. The <filename>
                file should contain only the names of object files.
                There should be one object file per line.

         -G     Tells the linkage editor to create a shared object
                enabled for runtime linking.

         -L<dir>
                Searches the path directory for library files
                specified by the -l<key> option.  The default is to
                search only the standard directories.

         -l<key>
                Searches the file lib<key>.so and then lib<key>.a
                for dynamic linking, or only lib<key>.a for static
                linking. The default is to search only some of the
                compiler runtime libraries.

         -r     Produces a relocatable object. This permits the
                output file to be produced even though it contains
                unresolved symbols.

         -Z<prefix>
                This linker option specifies a prefix for the
                library search path. This is useful when developing
                a new version of a library.

         -qinlglue | -qnoinlglue
                Generates fast external linkage by inlining the
                pointer glue code necessary to make a call to an
                external function or a call through a function
                pointer.  The default is -qnoinlglue.

         -qmkshrobj
                Creates a shared object from the generated object
                files.  See the XL C Compiler Reference for more
                information.

  Compiler Customization Options
         -B[<prefix>]
                Determines substitute path names for programs used
                during compilation, such as the compiler,
                assembler, linkage editor, and preprocessor, where
                <prefix> can be any program name recognized by the
                -t compiler option. The optional <prefix> defines
                part of a path name to the new programs. The -t
                parameter, <program>, specifies the program to
                which the <prefix> is to be appended.  When
                specifying <prefix>, there must be a slash (/)
                after the folder name.

         -F[<config_file>][:<stanza>]
                Names an alternative configuration file (.cfg) for
                the compiler.  <config_file> is the name of a
                compiler configuration file.  <stanza> is the name
                of the command used to invoke the compiler. This
                directs the compiler to use the entries under
                <stanza> in the <config_file> to set up the
                compiler environment. At least one of the arguments
                must be supplied.

         -t<programs_list>
                Applies the prefix from the -B option to the
                specified programs in <programs_list>.
                <programs_list> is a chain (ie: -tbcI) of one or
                more of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -W<program>,<options_list>
                Gives the specified option(s) to the compiler
                program, <program>. <options_list> is a comma-
                separated list of one or more options. <program>
                can be one of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -qasm_as[='<asm_path> [<flags_list>]'] | -qnoasm_as
                Specifies the path and flags used to invoke the
                assembler in order to handle assembler code in an
                asm statement. <asm_path> is the full path to the
                assembler to be used, and <flags_list> is a series
                of one or more flags (and their arguments),
                separated by spaces. Please note that single quotes
                (or double quotes) are required around the string
                of arguments if any spaces exist.

         -qexpfile=<filename>
                Saves the exported symbols in the specified file.
                This option is used only together with the
                -qmkshrobj compiler option.  For more information,
                see -qmkshrobj.

         -qmaxmem=<num>
                Limits the amount of memory used by certain
                memory-intensive optimizations to <num> kilobytes.
                When <num> is -1, the optimizer will use as much
                memory as needed.  By default -qmaxmem=8192 when
                -O2 level optimization is in effect and -qmaxmem=-1
                when -O3 level or greater optimization is in
                effect.

         -qpath=<program>:<path>
                Constructs alternate program names for compiler
                components. The program and directory path
                specified are used in place of the regular program.
                <program> can be one of the following:

                a = assembler
                b = compiler backend
                c = compiler frontend
                I = interprocedural analysis - compile phase
                L = interprocedural analysis - link phase
                l = linkage editor
                p = compiler preprocessor

         -qtls[=<model>] | -qnotls
                Specifies the thread-local storage model to be used
                by the application, where <model> can be:

                global-dynamic
                initial-exec
                local-exec
                local-dynamic

                If the -qnopic compiler option is in effect, the
                default is initial_exec.  If the -qpic compiler
                option is in effect, the default is global_dynamic.

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies the compile-time rounding mode of
                constant floating-point expressions, where
                <rounding_mode> is one of the following:

                m = round toward minus infinity
                n = round to the nearest representable number
                p = round toward plus infinity
                z = round toward zero.

                The default is -yn.

         -qfloat=<suboptions_list>
                Specifies various floating-point suboptions. This
                provides different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following:

                emulate | noemulate
                     Emulates the floating-point instructions
                     omitted by the PowerPC 403(TM) processor.
                     Function calls are emitted in place of PowerPC
                     floating-point instructions.  Use this option
                     only in a single-threaded stand-alone
                     environment, targeting the PowerPC 403
                     processor.  Do not use -qfloat=emulate with
                     any of the following invocation commands:
                      * -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                      * -qlongdouble, -qldbl128
                      * xlc128
                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using faster inline code that
                     does not check for overflows. This suboption
                     must only be used with an optimization option.
                     -qfloat=nofltint checks floating-point-to-
                     integer conversions for out-of-range values.
                fold | nofold
                     Specifies that constant floating-point
                     expressions are to be evaluated at compile
                     time rather than at run time.
                hsflt | nohsflt
                     The hsflt option speeds up calculations by
                     truncating instead of rounding computed values
                     to single precision before storing and on
                     conversions from floating-point to integer.
                     The nohsflt suboption specifies that single-
                     precision expressions are rounded after
                     expression evaluation and that floating-
                     point-to-integer conversions are to be checked
                     for out-of-range values.
                hssngl | nohssngl
                     The hssngl option specifies that single-
                     precision expressions are rounded only when
                     the results are stored into float memory
                     locations. The nohssngl option specifies that
                     single-precision expressions are rounded after
                     expression evaluation. Using hssngl can
                     improve runtime performance and is safer than
                     using -qfloat=hsflt.
                maf | nomaf
                     Makes floating-point calculations faster and
                     more accurate by using floating-point
                     multiply-add instructions where appropriate.
                nans | nonans
                     Generates extra instructions to detect
                     signalling NaN when converting from single-
                     precision to double-precision at run time. The
                     option nonans specifies that this conversion
                     need not be detected.
                relax | norelax
                     Relaxes the strict IEEE-conformance slightly
                     for greater speed, typically by removing some
                     trivial, floating-point arithmetic operations,
                     such as adds and subtracts involving a zero on
                     the right.
                rndsngl | norndsngl
                     Specifies that the result of each single-
                     precision (float) operation is to be rounded
                     to single precision. -qfloat=norndsngl
                     specifies that rounding to single-precision
                     happens only after full expressions have been
                     evaluated.
                rrm | norrm
                     Prevents floating-point optimizations that are
                     incompatible with runtime rounding to plus and
                     minus infinity modes.
                rsqrt | norsqrt
                     Specifies whether a division by the result of
                     a square root can be replaced with a multiply
                     by the reciprocal of the square root.
                     -qfloat=rsqrt has no effect unless -qignerrno
                     and -qarch=pwr2 are also specified.
                spnans | nospnans
                     Detects signalling NaN on conversion from
                     single-precision to double-precision.

                The default suboptions are: nospnans, norsqrt (at
                -O2 optimization), rsqrt (at -O3 optimization),
                norrm, norndsngl, norelax, nonans, maf, nohssngl,
                nohsflt, fold, nofltint (at -O2 optimization),
                fltint (at -O3 or greater optimization), and
                noemulate.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Generates instructions to detect and trap runtime
                floating-point exceptions.  <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                overflow
                     Generates code to detect and trap floating-
                     point overflow.
                underflow
                     Generates code to detect and trap floating-
                     point underflow.
                zerodivide
                     Generates code to detect and trap floating-
                     point division by zero.
                invalid
                     Generates code to detect and trap floating-
                     point invalid operation exceptions.
                inexact
                     Generates code to detect and trap floating-
                     point inexact exceptions.
                enable
                     Enables the specified exceptions in the
                     prologue of the main program.
                imprecise
                     Generates code for imprecise detection of the
                     specified exceptions. If an exception occurs,
                     it is detected, but the exact location of the
                     exception is not determined.
                nanq | nonanq
                     Generates code to detect and trap NaNQ (Not a
                     Number Quiet) exceptions handled or generated
                     by floating-point operations.


         -qfold | -qnofold
                This option is obsolete. Use -qfloat=fold in your
                new applications. Specifies that constant
                floating-point expressions are to be evaluated at
                compile time.  The default is -qfold.

         -qhsflt | -qnohsflt
                This option is obsolete. Use -qfloat=hsflt in your
                new applications. Speeds up calculations by
                removing range-checking on single-precision float
                results, and on conversions from floating-point to
                integer. -qnohsflt specifies that single-precision
                expressions are rounded after expression
                evaluation, and that floating-point-to-integer
                conversions are to be checked for out-of-range
                values.  The default is -qnohsflt.

         -qhssngl | -qnohssngl
                This option is obsolete. Use -qfloat=hssngl in your
                new applications. Specifies that single-precision
                expressions are rounded only when the results are
                stored into float memory locations. -qnohssngl
                specifies that single-precision expressions are
                rounded after expression evaluation.  The default
                is -qnohssngl.

         -qldbl128 | -qnoldbl128
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qlongdouble.  The default is -qnoldbl128.

         -qlongdouble | -qnolongdouble
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qldbl128.  The default is -qnolongdouble.

         -qlonglit | -qnolonglit
                Makes unsuffixed literals into the long type in
                64-bit mode.  The default is -qnolonglit.

         -qlonglong | -qnolonglong
                Allows long long integers.  When compiling with xlc
                or cc the default is -qlonglong. When compiling
                with c89, the default -qnolonglong.

         -qmaf | -qnomaf
                This option affects the precision of floating-point
                intermediate results. This option is obsolete. Use
                -qfloat=maf in your new applications. -qmaf
                specifies whether floating-point multiply-add
                instructions are to be generated. The default is
                -qmaf.

         -qrrm | -qnorrm
                This option is obsolete. Use -qfloat=rrm in your
                new applications. Prevents floating-point
                optimizations that are not compatible with runtime
                rounding to plus and minus infinity modes. The
                default is -qnorrm.

  ENVIRONMENT VARIABLES
         OBJECT_MODE
                Changes the compilation mode behavior, unless
                overridden by configuration file or command-line
                options.

                32
                     32-bit compiler mode.
                64
                     64-bit compiler mode.
                32_64
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.
                (not set)
                     32-bit compiler mode.
                (anything else)
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.

         PATH   Specifies the directory search path for the
                executable files of the compiler.

         MANPATH
                Specifies the directory search path for finding
                manual pages.

         OBJECT_MODE
                Specifies the default compilation mode to 32-bit or
                64-bit.

         LANG   Specifies the national language for message and
                help files.

         NLSPATH
                Specifies the path of the message and help files.

         PDFDIR Specifies the directory in which the profile data
                file is created.

         TMPDIR Specifies the directory in which temporary files
                are created. The default is /tmp.

         XLNOCLONEARCH
                Instructs the program to only execute the generic
                code (code that is not versioned for a particular
                architecture).

         XLSMPOPTS
                Sets options for programs using loop
                parallelization.
                e.g. XLSMPOPTS=PARTHDS=4:SCHEDULE=DYNAMIC=5

  SEE ALSO
         vacndi(1), gxlc(1), showpdf(1), mergepdf(1), resetpdf(1)
         cleanpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/caix/library/
         www.ibm.com/software/awdtools/caix/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL C Enterprise Edition V8.0 for AIX(R)

         5724-M11

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.




























unlink: /tmp/xlcW0nnmrEa
unlink: /tmp/xlcW1nnmrEb
unlink: /tmp/xlcW2nnmrEc
configure:11771: $? = 249
configure:11778: xlc++ -V >&5
export XL_CONFIG=/etc/vac.cfg:xlc++ 
/usr/bin/pg /usr/vac/exe/default_msg/vac.txt 



  xlc(1)                 IBM (October 2005)                  xlc(1)



  NAME
         xlc, cc, c89, c99 and related commands - invoke the IBM XL
         C compiler

  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...

         The invocation commands are:
         xlc, cc, c89, c99, xlc128, cc128, c89_128, c99_128,
         optionally followed by _r, _r4, or _r7.

  DESCRIPTION
         xlc and related commands compile C source files.  They
         also process assembler source files and object files. The
         compiler calls the link editor to produce a single
         executable or shared library, unless you specify the
         compiler options that prevent object files from being
         linked.

         The input file may have any of the following suffixes:
          .c = C source file
          .i = preprocessed C source file
          .a = archive file
          .o = object file for ld command
          .s = assembler source file
          .S = assembler source file that needs preprocessing

  OPTIONS
         Compiler options are categorized by their functions. In
         each category, the flag options are listed first, followed
         by the keyword options.

  Input Control Options
         -C     Preserves comments in preprocessed output if used
                with -E or -P. With the -E option, comments are
                written to standard output; with the -P option,
                comments are written to an output file.

         -D<name>[=[<def>]]
                Defines <name> as in the #define directive. <def>
                is an optional definition or value assigned to
                <name>. Specifying "-D<name>=" (with no <def>) is
                equivalent to "#define <name>"; specifying "-
                D<name>" is equivalent to "#define <name> 1".

         -I<dir>
                Specifies an additional search path for include
                filenames that do not specify an absolute path.

         -U<name>
                Undefines the identifier <name> defined by the
                compiler or by the -D<name> option.

         -qaltivec | -qnoaltivec
                Enables compiler support for vector data types.
                Instructs the compiler to support vector data types
                and operators and is accepted when the architecture
                specified by -qarch option supports VMX
                instructions and -qenablevmx is in effect.  The
                default is -qnoaltivec.

         -qasm[=gcc] | -qnoasm[=gcc]
                Controls the interpretation of, and subsequent
                generation of code for, asm statements.  If 'gcc'
                is specified, the compiler will interpret asm
                statements using gcc syntax.

                The default is -qasm=gcc.

         -qcpluscmt | -qnocpluscmt
                Permits the usage of "//" to introduce a comment
                that lasts until the end of the current source
                line, as in C++.  The default is -qcpluscmt when
                you invoke the compiler with xlc, xlc_r, cc, or
                cc_r, or when -qlanglvl is set to stdc99 or extc99.
                Otherwise, the default setting is -qnocpluscmt.

         -qdbcs | -qnodbcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qmbcs.  The default is -qnodbcs.

         -qdigraph | -qnodigraph
                Allows usage of digraph key combinations or
                keywords to represent characters not found on some
                keyboards.
                The default is -qdigraph when -qlanglvl is extc89,
                extended, extc99 or stdc99. Otherwise the default
                is -qnodigraph.

         -qdollar | -qnodollar
                Allows the '$' symbol to be used in the names of
                identifiers. When -qdollar is in effect, the dollar
                symbol '$' in an identifier is treated as a base
                character. If the options -qnodollar and
                -qlanglvl=ucs are both in effect, the dollar symbol
                is treated as an extended character.  The default
                is -qnodollar.

         -qidirfirst | -qnoidirfirst
                Specifies the search order for files included with
                the #include "<filename>" directive.  Use
                -qidirfirst with the -I option.  If -qidirfirst is
                specified, the directories specified by the
                -I<directory> option are searched before the
                directory in which the current file resides.  The
                default is -qnoidirfirst.

         -qignprag=<option>
                Instructs the compiler to ignore certain pragma
                statements.  The options are:

                disjoint
                     Ignores all #pragma disjoint directives in the
                     source file.
                isolated
                     Ignores all #pragma isolated_call directives
                     in the source file.
                all
                     Ignores all #pragma isolated_call directives
                     and #pragma disjoint directives in the source
                     file.
                omp
                     Ignores all OpenMP parallel processing
                     directives in the source file.
                ibm
                     Ignores IBM parallel processing directives.

         -qkeyword=<keyword> | -qnokeyword=<keyword>
                Controls whether the specified name is treated as a
                keyword or as an identifier whenever it appears in
                a program source.  By default all the built-in
                keywords defined in the C language standards are
                reserved as keywords. However, you can use
                -qnokeyword=<keyword> to disable built-in keywords,
                and use -qkeyword=<keyword> to reinstate those
                keywords.

         -qlanglvl=<suboptions_list>
                Selects the language level and language options for
                the compilation. <suboptions_list> is a colon-
                separated list of suboptions.  The suboptions are:

                classic
                     Allows the compilation of non-stdc89 programs,
                     and conforms closely to the K&R level
                     preprocessor.
                extended
                     Provides compatibility with the RT compiler
                     and classic. This language level is based on
                     C89.
                saa
                     Compilation conforms to the current SAA(R) C
                     CPI language definition. This is currently SAA
                     C Level 2.
                saal2
                     Compilation conforms to the SAA C Level 2 CPI
                     language definition, with some exceptions.
                stdc89
                     Compilation conforms to the ANSI C89 standard,
                     also known as ISO C90.
                stdc99
                     Compilation conforms to the ISO C99 standard.
                extc89
                     Compilation conforms to the ANSI C89 standard,
                     and accepts implementation-specific language
                     extensions.
                extc99
                     Compilation conforms to the ISO C99 standard,
                     and accepts implementation-specific language
                     extensions.
                ucs | noucs
                     This option controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in program
                     source code.  Under language levels stdc99 and
                     extc99, the default is -qlanglvl=ucs.


                The default depends on the invocation command used:

                COMMAND         DEFAULT
                xlc             extc89
                cc              extended
                c89             stdc89
                c99             stdc99

         -qmacpstr | -qnomacpstr
                Converts Pascal string literals into null-
                terminated strings where the first byte contains
                the length of the string.  The default is
                -qnomacpstr.

         -qmbcs | -qnombcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qdbcs.  The default is -qnombcs.

         -qpascal | -qnopascal
                Specifies whether to recognize and accept the
                keyword 'pascal' in type specifiers and function
                declarations.  The default is -qnopascal.

         -qsourcetype=<type>
                Determines whether to treat all recognized source
                files as if they are of the source type specified
                by <type> (regardless of filename suffix), or
                whether to use the filename suffix to determine the
                programming language. The options are:

                default
                     The compiler assumes that the programming
                     language of a source file will be implied by
                     its filename suffix.
                c
                     The compiler compiles all source files
                     following this option as if they are C
                     language source files.
                c++
                     The compiler compiles all source files
                     following this option as if they are C++
                     language source files.
                assembler
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files.
                assembler-with-cpp
                     The compiler compiles all source files
                     following this option as if they are Assembler
                     language source files that need preprocessing.

                The default is -qsourcetype=default.

         -qstdinc | -qnostdinc
                Specifies which directories are used for files
                included by the #include <file_name> and #include
                "file_name" directives. The -qnostdinc option
                excludes the standard include directories from the
                search path.  The default is -qstdinc.

         -qsyntaxonly
                Performs syntax checking without generating an
                object file.

         -qtrigraph | -qnotrigraph
                Allows trigraph key combinations to represent
                characters not found on some keyboards.
                The default is qtrigraph, however if
                -qlanglvl=classic is in effect or implied, the
                trigraphs are not recognized by default.

         -qutf | -qnoutf
                Enables recognition of UTF literal syntax.  The
                default is -qnoutf.

  Output Control Options
         -#     Traces the compilation and generates information on
                the progress of the compilation without invoking
                the preprocessor, compiler, or linkage editor.

         -c     Instructs the compiler to pass source files to the
                compiler only. Compiled source files are not sent
                to the linkage editor.

         -E     Instructs the compiler to preprocess the source
                files and send preprocessed source to standard
                output.

         -M     Creates an output file that contains information to
                be included in a "make" description file. This is
                equivalent to specifying -qmakedep without a
                suboption.

         -MF<file>
                Specifies the target for the output generated by
                the -qmakedep or -M options, where <file> is the
                target output filepath. Note that "-MF <file>"
                (with a space before the argument) is also
                acceptable. This option only has effect when
                specified with -qmakedep or -M.

         -ma    Substitutes inline code for calls to function
                alloca.

         -o <filespec>
                Specifies an output location for the object,
                assembler, or executable files created by the
                compiler. When the -o option is used during
                compiler invocation, <filespec> can be the name of
                either a file or a directory.  The default name is
                a.out.

         -P     Preprocesses the C source files named in the
                compiler invocation and creates an output
                preprocessed source file, <filename.i> for each
                input source file.  The default is to compile and
                link-edit C source files to produce an executable
                file.

         -S     Generates an assembler language file (.s) for each
                source file. The resulting .s files can be
                assembled to produce object .o files or an
                executable file (a.out).

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -q32,-q64
                Selects either 32-bit or 64-bit compilation mode.
                Use the -q32 and -q64 options, along with the
                -qarch and -qtune compiler options, to optimize the
                output of the compiler to the architecture on which
                that output will be used. The default is -q32.

         -qalign=<option>
                Specifies what aggregate alignment rules the
                compiler uses for file compilation, where the
                alignment options are:

                bit_packed
                     The compiler uses the bit_packed alignment
                     rules.
                full
                     The compiler uses the RISC System/6000
                     alignment rules. This is the same as power.
                mac68k
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.
                natural
                     The compiler maps structure members to their
                     natural boundaries.
                packed
                     The compiler uses the packed alignment rules.
                power
                     The compiler uses the RISC System/6000
                     alignment rules.
                twobyte
                     The compiler uses the Macintosh alignment
                     rules.  This suboption is valid only for 32-
                     bit compilations.  The mac68k option is the
                     same as twobyte.

                The default is -qalign=full.

         -qalloca
                Substitutes inline code for calls to function
                alloca, as if #pragma alloca directives were in the
                source code.

         -qbitfields={signed|unsigned}
                Specifies whether bit fields will be signed or
                unsigned.  The default is -qbitfields=unsigned.

         -qchars={signed|unsigned}
                Specifies whether the data type char will be signed
                or unsigned.  The default is -qchars=unsigned.

         -qenablevmx | -qnoenablevmx
                Enables generation of VMX (Vector Multimedia
                Extension) instructions.  The default is
                -qnoenablevmx.

         -qenum=<option>
                Specifies the amount of storage occupied by
                enumerations, where <option> is:

                small
                     Specifies that enumerations occupy the
                     smallest amount of space (1, 2, 4, or 8 bytes)
                     that can accurately represent the range of
                     values in the enumeration.  Signage is
                     unsigned, unless the range of values includes
                     negative values.
                int
                     Specifies that enumerations occupy 4 bytes and
                     are represented by int.
                intlong
                     Specifies that enumerations occupy 8 bytes of
                     storage if the range of values in the
                     enumeration exceeds the limit for int.
                     Otherwise, the enumerations occupy 4 bytes of
                     storage and are represented by int.
                1
                     Specifies that enumerations occupy 1 byte.
                     Type is signed or unsigned char.
                2
                     Specifies that enumerations occupy 2 bytes.
                     Type is signed or unsigned short.
                4
                     Specifies that enumerations occupy 4 bytes.
                     Type is signed or unsigned int.
                8
                     Specifies that enumerations occupy 8 bytes.
                     Type is signed or unsigned long long in 32-bit
                     mode, and signed or unsigned long in 64-bit
                     mode.

         -qfuncsect | -qnofuncsect
                Places instructions for each function in a separate
                object file control section or csect.  The default
                is -qfuncsect.

         -qmakedep[=gcc]
                Creates an output file that contains targets
                suitable for inclusion in a description file for
                the make command that describes the dependencies of
                the main source file in the compilation.
                Specifying 'gcc' changes the format of the
                generated dependency file. Specifying -qmakedep
                without 'gcc' is equivalent to specifying -M.

         -qpic[={small|large}]
                Instructs the compiler to generate position-
                independent code suitable for use in shared
                libraries.

                small
                     Instructs the compiler to assume that the size
                     of the global offset table is no larger than
                     64 Kb.
                large
                     Allows the global offset table to be larger
                     than 64 Kb in size, allowing more addresses to
                     be stored in the table.

                The -qpic option is implied if either of the -G or
                -qmkshrobj compiler options is specified.  The
                default is -qpic=small.

         -qppline | -qnoppline
                Enables generation of #line directive in the
                preprocessed output.  If the -P option is enabled,
                the default is -qnoppline. Otherwise, the default
                is -qppline.

         -qreserved_reg=<registers_list>
                Indicates that the specified register(s) cannot be
                used during the compilation, except as a stack
                pointer, frame pointer or in a different fixed
                role. <registers_list> is a colon-separated list of
                registers. You should use this option in modules
                that are required to work with other modules that
                use global register variables or hand-written
                assembler code.

         -qro | -qnoro
                Specifies the storage type for string literals and
                puts string literals in read-only storage.  The
                default with cc and its derivatives is -qnoro,
                otherwise the default is -qro.

         -qroconst | -qnoroconst
                Specifies the storage location for constant values.
                Puts constant values in read-only storage.  The
                default with xlc and c89 compiler invocations is
                -qroconst, and the default with cc is -qnoroconst.

         -qroptr | -qnoroptr
                Specifies the storage location for constant
                pointers. This options requires AIX V5.2 or
                greater.  The default is -qnoroptr.

         -qsaveopt | -qnosaveopt
                Saves command line options in the corresponding
                object files.  The default is -qnosaveopt.

         -qstatsym | -qnostatsym
                Adds user-defined, non-external names that have a
                persistent storage class (such as initialized and
                uninitialized static variables) to the name list.
                The default is -qnostatsym.

         -qthreaded | -qnothreaded
                Ensures that all optimizations will be thread-safe
                for executing in a multi-threaded environment.  The
                default is -qthreaded when compiling invocation
                commands ending in "_r", and -qnothreaded
                otherwise.

         -qupconv | -qnoupconv
                Preserves the unsigned specification when
                performing integral promotions.  The default is
                -qupconv when -qlanglvl=extc89, and -qnoupconv
                otherwise.

         -qweaksymbol | -qnoweaksymbol
                Instructs the compiler to generate weak symbols.
                The default is -qnoweaksymbol on AIX 5.1, and
                -qweaksymbol on AIX 5.2 and higher.

         -qxcall | -qnoxcall
                Generates code to treat static functions within a
                compilation unit as if they were external
                functions.  The default is -qnoxcall.

  Optimization Options
         -O[<level>]
                Optimizes code at a choice of levels during
                compilation. This is equivalent to
                -qoptimize[=<level>]. <level> can be:

                0
                     Performs only quick local optimizations such
                     as constant folding and elimination of local
                     common subexpressions.
                2
                     Performs optimizations that the compiler
                     developers considered the best combination for
                     compilation speed and runtime performance. The
                     optimizations may change from product release
                     to release.
                3
                     Performs some memory and compile-time
                     intensive optimizations in addition to those
                     executed with -O2.  The -O3 specific
                     optimizations have the potential to alter the
                     semantics of a program.  The compiler guards
                     against these optimizations at -O2 and the
                     option -qstrict is provided at -O3 to turn off
                     these aggressive optimizations. Specifying -O3
                     will set -qhot=level=0.
                4
                     This option is the same as -O3, but also:
                     - Sets the -qarch and -qtune options to the
                     architecture of the compiling machine.
                     - Sets the -qcache option most appropriate to
                     the characteristics of the compiling machine.
                     - Sets the -qipa option.
                     - Sets the -qhot option to level=1.
                5
                     Equivalent to -O4 -qipa=level=2.

                The default is -O0. Specifying -O with no <level>
                is equivalent to specifying -O2.

         -Q[<suboption>]
                Specifies which specific functions the compiler
                should attempt to inline.

                This option can take the form:

                     -Q
                          Attempts to inline all appropriate
                          functions with 20 executable source
                          statements or fewer, subject to the
                          setting of any of the suboptions to the
                          -Q option. If -Q is specified last, all
                          functions are inlined.
                     -Q!
                          Does not inline any functions. If -Q! is
                          specified last, no functions are inlined.
                     -Q-<names_list>
                          Does not inline functions listed in
                          <names_list>, where <names_list> is a
                          colon-separated list. All other
                          appropriate functions are inlined. The
                          option implies -Q.
                     -Q+<names_list>
                          Attempts to inline the functions listed
                          in <names_list> and any other appropriate
                          functions. <names_list> is a colon-
                          separated list.  The option implies -Q.
                     -Q=<threshold>
                          Sets a size limit on the functions to be
                          inlined. The number of executable
                          statements must be less than or equal to
                          <threshold> for the function to be
                          inlined. <threshold> must be a positive
                          integer. The default value is 20.
                          Specifying a threshold value of 0 causes
                          no functions to be inlined except those
                          functions marked with the __inline,
                          _Inline, or _inline keywords.

                The default is to treat inline specifications as a
                hint to the compiler.

         -qaggrcopy={overlap|nooverlap}
                Enables destructive copy operations for structures
                and unions.  The default is -qaggrcopy=overlap when
                compiling to the EXTENDED and CLASSIC language
                levels, and -qaggrcopy=nooverlap otherwise.

         -qalias=<options_list>
                Specifies the aliasing assertions to be applied to
                your compilation unit. <options_list> is a colon-
                separated list of the following options:

                addrtaken | noaddrtaken
                     Variables are disjoint from pointers unless
                     their address is taken.
                allptrs | noallptrs
                     If noallptrs is specified, pointers are never
                     aliased.
                ansi | noansi
                     If ansi is specified, type-based aliasing is
                     used during optimization, which restricts the
                     lvalues that can be safely used to access a
                     data object. The default is ansi for the xlc
                     and c89 command and noansi for the cc
                     invocation commands.  This option has no
                     effect unless you also specify the -O option.
                typeptr | notypeptr
                     If notypeptr is specified, pointers to
                     different types are never aliased.

                The default is
                -qalias=noaddrtaken:noallptrs:typeptr:ansi.

         -qansialias | -qnoansialias
                This option is obsolete. Use -qalias=ansi in your
                new applications. See the -qalias=ansi suboption.
                The default is -qansialias with xlc, c99, and c89,
                and -qnoansialias with cc.

         -qarch=<option>
                Specifies the general processor architecture for
                which the code (instructions) should be generated.
                In general, the -qarch option allows you to target
                a specific architecture for the compilation. For
                any given -qarch setting, the compiler defaults to
                a specific, matching -qtune setting, which can
                provide additional performance improvements.  The
                suboptions are:

                auto
                     Generates instructions that will run on the
                     hardware platform on which the program is
                     compiled.
                com
                     In 32-bit mode, generates instructions that
                     will run on all the POWER and PowerPC hardware
                     platforms.  In 64-bit mode, these instructions
                     will run on 64-bit PowerPC processors but not
                     on 32-bit PowerPC processors.  This is the
                     default unless -q64, -O4, or -O5 are
                     specified.
                pwr
                     Generates instructions that will run on the
                     POWER, POWER2, and 601 hardware platforms.
                pwr2
                     Generates instructions that will run on the
                     POWER2 hardware platform.
                pwr3
                     Generates instructions that will run on a
                     POWER3, POWER4, POWER5, and POWERPC970 chip.
                pwr4
                     Generates instructions that will run on a
                     POWER4, POWER5, and POWERPC970 chip.
                pwr5
                     Generates object code containing instructions
                     that will run on the POWER5 hardware platform.
                pwr5x
                     Generates instructions that will run on any
                     POWER5+ hardware platform.
                ppc
                     In 32-bit mode, produces object code
                     containing instructions that will run on any
                     of the 32-bit PowerPC hardware platforms. This
                     suboption will cause the compiler to produce
                     single-precision instructions to be used with
                     single-precision data.  Specifying -qarch=ppc
                     together with -q64 quietly upgrades the -qarch
                     setting to -qarch=ppc64.
                ppcgr
                     In 32-bit mode, produces object code for
                     PowerPC processors that support optional
                     graphics instructions. Note that specifying
                     -q64 with -qarch=ppcgr will quietly upgrade
                     the -qarch setting to -qarch=ppc64gr.
                ppc64
                     Generates instructions that will run on any of
                     the 64-bit PowerPC hardware platform.
                ppc64v
                     Generates instructions for the 64-bit PowerPC
                     processor with VMX.
                ppc970
                     Generates instructions that will run on the
                     PPC970 hardware platform.
                ppc64gr
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics instructions.
                ppc64grsq
                     Generates instructions for any 64-bit PowerPC
                     hardware platform that supports optional
                     graphics and square root instructions.
                pwr2s
                     Generates instructions that will run on POWER2
                     Chip desktop implementations.
                p2sc
                     Generates instructions that will run on a
                     POWER2 Super Chip.
                601
                     Generates instructions that will run on a 601
                     chip.
                602
                     Generates instructions that will run on a 602
                     chip.
                603
                     Generates instructions that will run on a 603
                     chip.
                604
                     Generates instructions that will run on a 604
                     chip.
                403
                     Generates instructions that will run on a 403
                     chip.
                rs64a
                     Generates instructions that will run on a
                     rs64I chip.
                rs64b
                     Generates instructions that will run on a
                     RS64II chip.
                rs64c
                     Generates instructions that will run on a
                     RS64III chip.

         -qassert=<suboption> | -qnoassert
                This option is obsolete. Use -qalias in your new
                applications. This option specifies the aliasing
                assertion to be applied to your compilation unit.
                The suboptions are:

                typeptr
                     Pointers to different types are never aliased.
                allptrs
                     Pointers are never aliased.
                addrtaken
                     Variables are disjoint from pointers unless
                     their address are taken.

                The default is -qnoassert.

         -qcache=<suboptions_list>
                Describes the cache configuration for a specific
                target execution machine, where <suboptions_list>
                is a colon-separated list of one or more of the
                following suboptions:

                assoc=<number>
                     Specifies the set associativity of the cache,
                     where <number> is one of the following:
                          0    Direct-mapped cache
                          1    Fully associative cache
                          (number > 1)   n-way set associative
                          cache
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. This
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty, in CPU
                     cycles, resulting from a cache miss.
                level=<level>
                     Specifies the level of cache affected, where
                     level is one of the following:
                          1     Basic cache
                          2     Level-2 cache or, if there is no
                                level-2 cache, the table lookaside
                                buffer (TLB)
                          3     TLB
                          If a machine has more than one level of
                          cache, use a separate -qcache option.
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<cache_type>
                     The settings apply to the specified type of
                     cache, where <cache_type> is one of the
                     following:
                     C or c = Combined data and instruction cache
                     D or d = Data cache
                     I or i = Instruction cache

                The -qtune setting determines the optimal default
                -qcache settings for most typical compilations.

         -qcompact | -qnocompact
                Reduces code size where possible, at the expense of
                execution speed. Code size is reduced by inhibiting
                optimizations that replicate or expand code inline.
                This option takes effect only if -O2 or higher is
                also used.  The default is -qnocompact.

         -qdataimported[=<names_list>]
                Specifies which data items are imported. If no
                names are specified, all data items are assumed to
                be imported.  <names_list> is a colon-separated
                list of data items.

         -qdatalocal[=<names_list>]
                Specifying -qdatalocal=<names_list> marks the named
                variables as local, where <names_list> is a colon-
                separated list of identifiers. Specifying
                -qdatalocal with no variables instructs the
                compiler to assume that all variables are local.

         -qdirectstorage | -qnodirectstorage
                Informs the compiler that write-through-enabled or
                cache-inhibited storage may be referenced.  The
                default is -qnodirectstorage.

         -qfdpr | -qnofdpr
                Collects information about programs for use with
                the AIX fdpr (Feedback Directed Program
                Restructuring) performance-tuning utility.  The
                default is -qnofdpr.

         -qhot[=<suboption>] | -qnohot
                Specifies whether or not to perform high-order
                transformations during optimization. The suboptions
                are:

                arraypad[=<n>]
                     When <n> is specified, the compiler will pad
                     every array in the code. The pad amount must
                     be a positive integer value.  Otherwise, the
                     compiler will pad any arrays where it infers
                     that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     At level=1, full high-order transformation is
                     performed, but at level=0 only a subset of the
                     high-order transformations are performed,
                     which reduces compile time. -qhot=level=1 will
                     be equivalent to -qhot and the compiler
                     options that imply -qhot also imply
                     -qhot=level=1 unless -qhot=level=0 is
                     explicitly specified. See the Compiler
                     Reference for more information.
                simd | nosimd
                     The compiler converts certain operations that
                     are performed in a loop on successive elements
                     of an array into a call to a VMX (Vector
                     Multimedia Extension) instruction. This
                     suboption has effect only when the effective
                     architecture supports VMX instructions and you
                     specify -qenablevmx.
                vector | novector
                     When specified with -qnostrict and -qignerrno,
                     or an optimization level of -O3 or higher, the
                     compiler converts certain operations that are
                     performed in a loop on successive elements of
                     an array (for example, square root, reciprocal
                     square root) into a call to a Mathematical
                     Acceleration Subsystem (MASS) library vector
                     routine. This call will calculate several
                     results at one time, which is faster than
                     calculating each result sequentially.

                The default is -qnohot.

         -qignerrno | -qnoignerrno
                Allows the compiler to perform optimizations that
                assume errno is not modified by system calls.  The
                default is -qnoignerrno.

         -qinline[<suboption>] | -qnoinline
                Specifies whether to attempt to inline functions
                instead of generating calls to a function. This
                option can take the following forms:

                -qinline
                     The compiler attempts to inline all
                     appropriate functions with 20 executable
                     source statements or fewer, subject to any
                     other settings of the suboptions to the
                     -qinline option.
                -qinline=threshold=<num>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <num> for the
                     function to be inlined. <num> must be a
                     positive integer.
                -qinline+<names_list>
                     Attempts to inline the functions listed in
                     <names_list> and any other appropriate
                     functions, where <names_list> is a colon-
                     separated list.
                -qinline-<names_list>
                     Specifies that functions listed in
                     <names_list> do not get inlined, where
                     <names_list> is a colon-separated list.
                -qnoinline
                     Does not inline any functions.

                The default is to treat inline specifications as a
                hint to the compiler, and the result depends on
                other options that you select:  If you specify the
                -g option (to generate debug information), inlining
                may be affected.

         -qipa[=<suboptions_list>] | -qnoipa
                Turns on or customizes a class of optimizations
                known as interprocedural analysis (IPA).  Regular
                expressions are supported when specifying procedure
                names for these suboptions:  cloneproc,
                nocloneproc, exits, inline, noinline, isolated,
                lowfreq, pure, safe, unknown. <suboptions_list> is
                a colon-separated list of one or more of the
                following suboptions:

                clonearch=<architecture_list> | noclonearch
                     Allows you to specify a group of architectures
                     in case you want to compile your application
                     for multiple architectures with a single
                     binary file. <architecture_list> is a comma-
                     separated list of one or more of the following
                     architectures: pwr4, pwr5, and ppc970. When
                     -qcompact is in effect, -qarch=clonearch is
                     disabled. This must be specified during link
                     time.  The default is -qipa=noclonearch.
                cloneproc=<names_list> | nocloneproc=<names_list>
                     Allows you to explicitly declare which
                     procedures the compiler should attempt to
                     clone. <names_list> is a comma-separated list
                     of functions that you wish to clone (or not
                     clone). Please note that this suboption has no
                     effect unless -qipa=clonearch=<arch> is
                     specified.
                exits=<procedure_names_list>
                     Specifies names of functions which represent
                     program exits.  <procedure_names_list> is a
                     comma-separated list of procedures.
                infrequentlabel=<names_list>
                     Specifies a comma-separated list of user-
                     defined labels that are likely to be called
                     infrequently during a program run.
                inline[=<suboption>]
                     Specifying 'inline' with no suboption asserts
                     that all appropriate procedures will be
                     inlined. <suboption> can be one of the
                     following:
                     auto | noauto
                          Specifies whether or not to automatically
                          inline procedures.
                     <procedure_names_list>
                          Specifies a comma-separated list of
                          procedures to attempt to inline.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This only takes
                          effect when inline=auto is on.
                     <options_list>
                          The same as specifying
                          -qinline=<options_list>. <options_list>
                          is a comma-separated list of any
                          suboptions that belong to the -qinline
                          compiler option.
                noinline=<procedures_list>
                     Specifies a comma-separated list of procedures
                     which are not to be inlined.
                isolated=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that do
                     not directly refer to any global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization performed, where <level> can be
                     equal to:
                     0
                          Performs minimal interprocedural analysis
                          and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full interprocedural data flow and alias
                          analysis.
                     The default is 1.
                list[={<filename>|short|long}]
                     Specifies an output listing file name during
                     the link phase, if an object listing has been
                     requested using the -qlist option. The default
                     name is "a.lst". Specifying 'long' or 'short'
                     can be used to request more or less
                     information in the listing file to determine
                     which listing sections will be included. The
                     default is 'short'.
                lowfreq=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are likely to be called infrequently
                     during the course of a typical program run.
                malloc16 | nomalloc16
                     Instructs the compiler to assume that the
                     dynamic memory allocation routines (such as
                     malloc/calloc/realloc/new) will return 16-byte
                     aligned memory addresses. The compiler will
                     optimize based on this assumption. Note that
                     if the assertion is false, incorrect results
                     may be generated.  The default is 'malloc16'
                     in 64-bit mode, and 'nomalloc16' otherwise.
                missing={unknown|safe|isolated|pure}
                     Specifies the default assumption for
                     procedures not compiled with -qipa.
                     unknown
                          Greatly restricts the amount of
                          interprocedural optimization for calls to
                          unknown functions.
                     safe
                          Functions which do not indirectly call a
                          visible (not missing) function either
                          through direct call or function pointer.
                     isolated
                          Functions which do not directly reference
                          global variables accessible to visible
                          functions.
                     pure
                          Functions which are safe and isolated and
                          which do not indirectly alter storage
                          accessible to functions.
                object | noobject
                     This is a compile-time option. It specifies
                     whether to include standard object code in the
                     object files. Specifying 'noobject' can
                     substantially reduce overall compile time by
                     not generating object code during the first
                     IPA phase.
                partition={small|medium|large}
                     Specifies the size of program sections that
                     are analyzed together. Larger partitions may
                     produce better analysis but require more
                     storage.
                pdfname[=<filename>] | nopdfname
                     Specifies the name of the profile data file
                     containing the PDF profiling information.  If
                     you do not specify <filename>, the default
                     file name is ._pdf.
                pure=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that are
                     "isolated", "safe", and do not modify any data
                     objects that are visible to the caller.
                safe=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     not compiled with -qipa and that do not call
                     any other part of the program.
                threads[=<n>] | nothreads
                     Specifies the number of threads for the
                     compiler to use. When <n> is not specified,
                     the compiler decides the number of threads.
                     Otherwise, up to <n> threads are used to
                     invoke the compiler backend. Specifying
                     'nothreads' is equivalent to running one
                     serial process.
                unknown=<procedure_names_list>
                     Specifies a comma-separated list of procedures
                     that are not compiled with -qipa and that may
                     update global variables and dummy arguments
                     and call other parts of the program compiled
                     with -qipa.
                <filename>
                     Specifies the name of a file that contains
                     suboption information in a special format.

                The default is -qnoipa.

         -qisolated_call=<function_names_list>
                Specifies functions in the source file that have no
                side effects, where <function_names> is a colon-
                separated list of function names.

         -qlargepage | -qnolargepage
                Exploits large page heaps that are available on
                Power 4 and Power 5 systems running AIX v5.1D or
                later.  The default is -qnolargepage.

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C library function are in fact the library
                functions.  The default is -qnolibansi.

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.  The
                default is -qnooptimize.

         -qpdf1 | -qnopdf1
                Produces an object that is instrumented to collect
                runtime execution information. This is phase 1 of
                the profile-directed feedback optimization process.
                The default is -qnopdf1.

         -qpdf2 | -qnopdf2
                Tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.  The default is
                -qnopdf2.

         -qprefetch | -qnoprefetch
                Enables generation of prefetching instructions such
                as dcbt and dcbz in compiled code.  The default is
                -qprefetch.

         -qprocimported[=<names_list>] | -qnoprocimported
                If no <names_list> is specified, it asserts that
                all functions are imported. Otherwise, only the
                named functions are marked as imported.
                <names_list> is a colon-separated list of function
                identifiers.

         -qproclocal[=<names_list>] | -qnoproclocal
                If no <names_list> is specified, it asserts that
                all functions are local. Otherwise, only the named
                functions are marked as local. <names_list> is a
                colon-separated list of function identifiers.

         -qprocunknown[=<names_list>] | -qnoprocunknown
                If no <names_list> is specified, it asserts that
                all functions are unknown. Otherwise, only the
                named functions are marked as unknown. <names_list>
                is a colon-separated list of function identifiers.

         -qshowpdf | -qnoshowpdf
                Used with -qpdf1 and a minimum optimization level
                of -O to add additional call and block count
                profiling information to an executable.  The
                default is -qnoshowpdf.

         -qsmallstack | -qnosmallstack
                Reduces the size of the stack frame.  This option
                is only valid when used together with IPA (-qipa,
                -O4, -O5 compiler options).  The default is
                -qnosmallstack.

         -qsmp[=<suboptions_list>] | -qnosmp
                Enables parallelization of program code.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization and
                     optimization. If noauto is specified,
                     automatic parallelization of program code is
                     disabled; only program code explicitly
                     parallelized with IBM SMP or OpenMP directives
                     is optimized.
                explicit | noexplicit
                     Enables explicit parallelization of loops.
                nested_par | nonested_par
                     Enables parallelization of nested parallel
                     constructs.
                omp | noomp
                     Enables strict OpenMP compliance. Only OpenMP
                     parallelization pragmas are recognized.
                opt | noopt
                     Enables automatic parallelization but disables
                     optimization of parallelized program code. If
                     noopt is specified, optimization of
                     parallelized program code is disabled.
                rec_locks | norec_locks
                     Specifies whether to use recursive locks.
                schedule=<type>
                     Specifies what kinds of scheduling algorithms
                     and chunking are used for loops to which no
                     other scheduling algorithm has been explicitly
                     assigned in the source code. <type> can be:
                     dynamic[=<num>]
                     guided[=<num>]
                     static[=<num>]
                     affinity[=<num>]
                     runtime

                The default is -qnosmp.  If you specify -qsmp
                without suboptions, the default suboptions are:
                auto, explicit, noomp, norec_locks, nonested_par,
                schedule=runtime.

         -qspill=<size>
                Specifies the size of the register allocation spill
                area in bytes.  The default is -qspill=512.

         -qstrict | -qnostrict
                Turns off aggressive optimizations which have the
                potential to alter the semantics of your program.
                -qstrict sets -qfloat=nofltint:norsqrt. -qnostrict
                sets -qfloat=rsqrt. This option is only valid with
                -O2 or higher optimization levels. The default is
                -qnostrict at -O3 or higher, and -qstrict
                otherwise.

         -qstrict_induction | -qnostrict_induction
                Turns off loop induction variable optimizations
                that have the potential to alter the semantics of
                your program.  The default is -qnostrict_induction
                at -O2 or higher and -qstrict_induction otherwise.

         -qtocdata | -qnotocdata
                Marks data as local.  The default is -qnotocdata.

         -qtocmerge | -qnotocmerge
                Reads from the file specified in -bImportfile
                linker option and merges the address information to
                access ranges of external addresses using a single
                table of contents entry.  The default is
                -qnotocmerge.

         -qtune=<suboption>
                Specifies the architecture system for which the
                executable program is optimized.  The suboptions
                are:

                auto
                     Generates object code optimized for the
                     hardware platform on which the program is
                     compiled.
                403
                     Generates object code optimized for all the
                     PowerPC 403 processors.
                601
                     Generates object code optimized for all the
                     PowerPC 601 processors.
                602
                     Generates object code optimized for all the
                     PowerPC 602 processors.
                603
                     Generates object code optimized for all the
                     PowerPC 603 processors.
                604
                     Generates object code optimized for all the
                     PowerPC 604 processors.
                p2sc
                     Generates object code optimized for all the
                     PowerPC P2SC processors.
                ppc
                     Generates object code optimized for 32-bit
                     POWERPC hardware platform.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                pwr
                     Generates object code optimized for the POWER
                     hardware platforms.
                pwr2
                     Generates object code optimized for the POWER2
                     hardware platform.
                pwr2s
                     Generates object code optimized for the POWER2
                     hardware platform, avoiding certain
                     quadruple-precision instructions that would
                     slow program performance.
                pwr3
                     Generates object code optimized for the POWER3
                     processor.
                pwr4
                     Generates object code optimized for the POWER4
                     processor.
                pwr5
                     Generates object code optimized for the POWER5
                     hardware platforms.
                rs64I
                     Generates object code optimized for the rs64a
                     processor.
                rs64b
                     Generates object code optimized for the RS64II
                     processor.
                rs64c
                     Generates object code optimized for the
                     RS64III processor.

                The default setting is determined by the setting of
                -qarch.

         -qunroll[={yes|no|auto}] | -qnounroll
                Unrolls inner loops in the program. This can help
                improve program performance.  The options are:

                yes
                     Is a suggestion to the compiler to unroll
                     loops.
                no
                     Instructs the compiler not to unroll loops.
                auto
                     Leaves the decision to unroll loops to the
                     compiler.

                The default is -qunroll=auto.  If -qunroll is
                specified with no suboptions, the compiler assumes
                -qunroll=yes.

         -qunwind | -qnounwind
                Informs the compiler that the stack can be unwound
                while a routine in the compilation is active.
                Specifying -qnounwind can improve the optimization
                of non-volatile register saves and restores.  The
                default is -qunwind.

         -qvecnvol | -qnovecnvol
                Specifies whether to use volatile or non-volatile
                vector registers. Volatile vector registers are
                registers whose value is not preserved across
                function calls or in the context of save, jump or
                switch system library functions. If -qnoenablevmx
                is in effect, this option is ignored.  The default
                is -qnovecnvol.

  Error Checking and Debugging Options
         -g     Generates information for debugging tools such as
                the IBM Debugger for AIX, Version 3.1.

         -p     Sets up the object files produced by the compiler
                for profiling.

         -pg    Sets up the object files for profiling, but
                provides more information than is provided by the
                -p option.

         -qcheck[=<suboptions_list>] | -qnocheck
                Generates code that performs certain types of
                runtime checking. If a violation is encountered, a
                runtime exception is raised by sending a SIGTRAP
                signal to the process. <suboptions_list> is a
                colon-separated list of one or more of the
                following:

                bounds | nobounds
                     Performs runtime checking of addresses when
                     subscripting within an object of known size.
                divzero | nodivzero
                     Performs runtime checking of integer division.
                     A trap will occur if an attempt is made to
                     divide by zero.
                nullptr | nonullptr
                     Performs runtime checking of addresses
                     contained in pointer variables used to
                     reference storage.
                all
                     Switches on all the above suboptions.

                The default is -qnocheck.

         -qdbxextra | -qnodbxextra
                Specifies that all typedef declarations, struct,
                union, and enum type definitions are included for
                debugging.  Use this option with the -g option to
                produce additional debugging information for use
                with a debugger.  The default is -qnodbxextra.

         -qdpcl | -qnodpcl
                Generates symbols that can be used by tools based
                on the Dynamic Probe Class Library (DPCL) to see
                the structure of an executable file.  The default
                is -qnodpcl.

         -qextchk | -qnoextchk
                Generates bind-time type-checking information and
                checks for compile-time consistency.  The default
                is -qnoextchk.

         -qfullpath | -qnofullpath
                Specifies the path information stored for files
                when you use the -g compiler option.  The default
                is -qnofullpath.

         -qgenproto[=parmnames] | -qnogenproto
                Produces ANSI prototypes from K&R function
                definitions.  Specifying -qgenproto without
                '=parmnames' will cause prototypes to be generated
                without parameter names.  The default is
                -qnogenproto.

         -qheapdebug | -qnoheapdebug
                Enables debug versions of memory management
                functions.  The default is -qnoheapdebug.

         -qinitauto=<hex_value> | -qnoinitauto
                Initializes automatic variables to the two-digit
                hexadecimal byte value <hex_value>. This generates
                extra code and should only be used for error
                determination.  The default is -qnoinitauto.

         -qkeepparm | -qnokeepparm
                Ensures that function parameters are stored on the
                stack even if the application is optimized.  As a
                result, parameters remain in the expected memory
                location, providing access to the values of these
                incoming parameters to tools such as debuggers. The
                default is -qnokeepparm.

         -qlinedebug | -qnolinedebug
                Generates abbreviated line number and source file
                name information for the debugger.  The default is
                -qnolinedebug.

         -qmaxerr=<num>[:<sev>] | -qnomaxerr
                Instructs the compiler to halt compilation when the
                specified number of errors of the specified
                severity (by default, the value of -qhalt) or
                greater is reached.  <num> must be an integer. The
                severity levels, <sev>, are:

                i = informational
                w = warning
                e = error
                s = severe error

                The default is -qnomaxerr.

         -qproto | -qnoproto
                Assumes that all functions are prototyped.  Asserts
                that procedure call points agree with their
                declarations even if the procedure has not been
                prototyped. This allows the caller to pass
                floating-point arguments in floating-point
                registers instead of general-purpose registers.
                The default is -qnoproto.

         -qspnans | -qnospnans
                This option is obsolete. Use -qfloat=nans in your
                new applications. Generates extra instructions to
                detect signalling NaN on conversion from single
                precision to double precision. The -qnospnans
                option specifies that this conversion need not be
                detected. The default is -qnospnans.

         -qsymtab={unref|static}
                Determines what types of information appear in the
                symbol table.  The suboptions are:

                unref
                     Specifies that all typedef declarations,
                     struct, union, and enum type definitions are
                     included for processing by the debugger.
                static
                     Adds user-defined, non-external names that
                     have a persistent storage class (such as
                     initialized and uninitialized static
                     variables) to the name list.

                The default is to not add static variables to the
                symbol table.

         -qtbtable=<option>
                Generates a traceback table that contains
                information about each function, including the type
                of function as well as stack frame and register
                information. The traceback table is placed in the
                text segment at the end of its code.  The options
                are:

                none
                     No traceback table is generated.
                full
                     A full traceback table is generated.  This is
                     the default with -qnoopt or -g specified.
                small
                     A traceback table is generated with no name or
                     parameter information.  This is the default
                     with optimization if -g is not specified.

         -qwarn64 | -qnowarn64
                Enables checking for possible data conversion
                problems between 32-bit and 64-bit compiler modes.
                The default is -qnowarn64.

  Listing and Message Options
         -V     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a space-separated list.

         -v     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a comma-separated list.

         -w     Suppresses warnings and lower-level messages.
                Specifying this option is equivalent to specifying
                -qflag=e:e.

         -qattr[=full] | -qnoattr
                Produces a compiler listing that includes an
                attribute listing for all identifiers. If -qattr is
                specified, the listing contains only those
                identifiers that are used. If -qattr=full is
                specified, the listing contains all names. If
                -qnoattr is specified, no listing is produced.  The
                default is -qnoattr.

         -qdump_class_hierarchy
                for each class object, this option dumps a
                representation of its hierarchy and virtual
                function table layout to a file. The file name is
                created by appending ".class" to the source file
                name.

         -qflag=<listing_severity>:<terminal_severity>
                Defines the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> is the
                minimum level for the listing file, and
                <terminal_severity> is the minimum level for the
                terminal.  The message severity levels are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qflag=i:i.

         -qformat=<options_list> | -qnoformat
                Warns of possible problems with string input and
                output format specifications. Functions diagnosed
                are printf, scanf, strftime, strfmon family
                functions and functions marked with format
                attributes. <options_list> is a comma-separated
                list of one or more of the following suboptions:

                all | noall
                     Turns on all format diagnostic messages.
                exarg | noexarg
                     Warns if excess arguments appear in printf and
                     scanf style function calls.
                nlt | nonlt
                     Warns if a format string is not a string
                     literal, unless the format function takes its
                     format arguments as a va_list.
                sec | nosec
                     Warns of possible security problems in use of
                     format functions.
                y2k | noy2k
                     Warns of strftime formats that produce a 2-
                     digit year.
                zln | nozln
                     Warns of zero-length formats.

                The default is -qnoformat, which is equivalent to
                -qformat=noall. If -qformat is specified without
                any suboptions, the default is -qformat=all.

         -qhalt=<sev>
                Stops the compiler after the first phase if the
                severity level of errors detected equals or exceeds
                the specified level, <sev>.  The severity levels in
                increasing order of severity are:

                i = information
                w = warning
                e = error
                s = severe error
                u = unrecoverable error

                The default is -qhalt=s.

         -qinfo[=[<suboption>][<groups_list>]] | -qnoinfo
                Produces informational messages. <groups_list> is a
                colon-separated list. If a <groups_list> is
                specified along with a <suboption>, a colon must
                separate them. The suboptions are:

                all | noall
                     Turns on all diagnostic messages for all
                     groups.  Specifying 'noall' turns off all
                     diagnostic messages for specific portions of
                     your program.
                private
                     Lists shared variables that are made private
                     to a parallel loop.
                reduction
                     Lists variables that are recognized as
                     reduction variables inside a parallel loop.

                Also:
                <groups_list>
                     Turns on or off specific groups of messages,
                     where <groups_list> is a colon-separated list
                     of one or more of the following:

                     c99 | noc99
                          C code that might behave differently
                          between C89 and C99 language levels
                     cmp | nocmp
                          Possible redundancies in unsigned
                          comparisons
                     cnd | nocnd
                          Possible redundancies or problems in
                          conditional expressions
                     cns | nocns
                          Operations involving constants
                     cnv | nocnv
                          Conversions
                     dcl | nodcl
                          Consistency of declarations
                     eff | noeff
                          Statements and pragmas with no effect
                     enu | noenu
                          Consistency of enum variables
                     ext | noext
                          Unused external definitions
                     gen | nogen
                          General diagnostic messages
                     gnr | nognr
                          Generation of temporary variables
                     got | nogot
                          Use of goto statements
                     ini | noini
                          Possible problems with initialization
                     inl | noinl
                          Functions not inlined
                     lan | nolan
                          Language level effects
                     obs | noobs
                          Obsolete features
                     ord | noord
                          Unspecified order of evaluation
                     par | nopar
                          Unused parameters
                     por | nopor
                          Non-portable language constructs
                     ppc | noppc
                          Possible problems with using the
                          preprocessor
                     ppt | noppt
                          Trace of preprocessor actions
                     pro | nopro
                          Missing function prototypes
                     rea | norea
                          Code that cannot be reached
                     ret | noret
                          Consistency of return statements
                     trd | notrd
                          Possible truncation or loss of data or
                          precision
                     tru | notru
                          Variable names truncated by the compiler
                     trx | notrx
                          Rounding of hexadecimal floating-point
                          constants
                     uni | nouni
                          Uninitialized variables
                     upg | noupg
                          Upgrade issues from one release to the
                          next release
                     use | nouse
                          Unused auto and static variables
                     zea | nozea
                          Zero-extent arrays

                The default is -qnoinfo.
                If -qinfo is specified with no suboptions, the
                default is -qinfo=all.

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.
                The default is -qnolist.

         -qlistopt | -qnolistopt
                Produces a compiler listing that displays all the
                options that were in effect when the compiler was
                invoked.  The default is -qnolistopt.

         -qphsinfo | -qnophsinfo
                Reports the time taken in each compilation phase.
                Phase information is sent to standard output.  The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.  The default is
                -qnophsinfo.

         -qprint | -qnoprint
                Enables or suppresses listings. Specifying
                -qnoprint overrides all listing-producing options,
                regardless of where they are specified, to suppress
                listings.  The default is -qprint.

         -qreport | -qnoreport
                Instructs the compiler to produce transformation
                reports that show how program loops are
                parallelized and/or optimized. The transformation
                reports are included as part of the compiler
                listing.  This option requires either -qhot, -qsmp,
                or -qipa=clonearch in order to have effect.  The
                default is -qnoreport.

         -qshowinc[=<types_list>] | -qnoshowinc
                Used with -qsource to selectively show user header
                files (includes using " ") or system header files
                (includes using < >) in the program source listing.
                <types_list> is a colon-separated list of one or
                more of the following types:

                usr | nousr
                     Specifies whether to show user include files
                sys | nosys
                     Specifies whether to show system include files
                all
                     Shows both user and system include files

                The default is -qnoshowinc.

         -qsource | -qnosource
                Produces a compiler listing and includes source
                code.  The default is -qnosource.

         -qsrcmsg | -qnosrcmsg
                Adds the corresponding source code lines to the
                diagnostic messages in the stderr file.  The
                default is -qnosrcmsg.

         -qsuppress[=<msg_list>] | -qnosuppress
                Prevents the specified compiler or driver
                informational or warning messages from being
                displayed or added to the listings, where
                <msg_list> is a colon-separated list of message
                numbers that will not be displayed.  The default is
                -qnosuppress.

         -qtabsize=<size>
                Changes the length of tabs as perceived by the
                compiler, where <size> is the number of character
                spaces representing a tab in the source program.
                The default is -qtabsize=8.

         -qversion
                Displays information on the compiler version. It
                will output (to STDOUT) the official compiler
                product name and the compiler version found on the
                system. You can specify -qversion outside of a
                compilation (xlc -qversion) or as part of a
                compilation, but compilation will not occur.

         -qwarnfourcharconsts | -qnowarnfourcharconsts
                Issues diagnostic messages when the compiler finds
                four-character constants in the program source.
                The default is -qnowarnfourcharconsts.

         -qxref[=full] | -qnoxref
                Specifies whether to produce a compiler listing
                that includes a cross-reference listing of all
                identifiers. Specifying -qxref will report only
                identifiers that are used, -qxref=full reports all
                identifiers in the program, and -qnoxref does not
                report any identifiers in the program. The
                -qnoprint option overrides this option.  The
                default is -qnoxref.

  Compatibility Options
  Linking Options
         -b{dynamic|shared|static}
                Controls how shared objects are processed by the
                linkage editor.  The suboptions are:

                dynamic, shared
                     Causes the linker to process subsequent shared
                     objects in dynamic mode. This is the default.
                     In dynamic mode, shared objects are not
                     statically included in the output file.
                     Instead, the shared objects are listed in the
                     loader section of the output file.
                static
                     Causes the linker to process subsequent shared
                     objects in static mode. In static mode, shared
                     objects are statically linked in the output
                     file.

         -bmaxdata=<num>
                Sets the maximum size of the area shared by the
                static data (both initialized and uninitialized)
                and the heap to <num> bytes. This value is used by
                the system loader to set the soft ulimit. The
                default is -bmaxdata=0.

         -brtl  Enables runtime linking for the output file. Do not
                specify the -brtl compiler option if you are
                invoking the compiler with xlc_r4 or if the
                -qheapdebug compiler option is specified.

         -e <name>
                Sets the entry name for a shared executable.  This
                option is only used together with -qmkshrobj.

         -f<filename>
                Names a file to store a list of object files for
                the compiler to pass to the linker. The <filename>
                file should contain only the names of object files.
                There should be one object file per line.

         -G     Tells the linkage editor to create a shared object
                enabled for runtime linking.

         -L<dir>
                Searches the path directory for library files
                specified by the -l<key> option.  The default is to
                search only the standard directories.

         -l<key>
                Searches the file lib<key>.so and then lib<key>.a
                for dynamic linking, or only lib<key>.a for static
                linking. The default is to search only some of the
                compiler runtime libraries.

         -r     Produces a relocatable object. This permits the
                output file to be produced even though it contains
                unresolved symbols.

         -Z<prefix>
                This linker option specifies a prefix for the
                library search path. This is useful when developing
                a new version of a library.

         -qinlglue | -qnoinlglue
                Generates fast external linkage by inlining the
                pointer glue code necessary to make a call to an
                external function or a call through a function
                pointer.  The default is -qnoinlglue.

         -qmkshrobj
                Creates a shared object from the generated object
                files.  See the XL C Compiler Reference for more
                information.

  Compiler Customization Options
         -B[<prefix>]
                Determines substitute path names for programs used
                during compilation, such as the compiler,
                assembler, linkage editor, and preprocessor, where
                <prefix> can be any program name recognized by the
                -t compiler option. The optional <prefix> defines
                part of a path name to the new programs. The -t
                parameter, <program>, specifies the program to
                which the <prefix> is to be appended.  When
                specifying <prefix>, there must be a slash (/)
                after the folder name.

         -F[<config_file>][:<stanza>]
                Names an alternative configuration file (.cfg) for
                the compiler.  <config_file> is the name of a
                compiler configuration file.  <stanza> is the name
                of the command used to invoke the compiler. This
                directs the compiler to use the entries under
                <stanza> in the <config_file> to set up the
                compiler environment. At least one of the arguments
                must be supplied.

         -t<programs_list>
                Applies the prefix from the -B option to the
                specified programs in <programs_list>.
                <programs_list> is a chain (ie: -tbcI) of one or
                more of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -W<program>,<options_list>
                Gives the specified option(s) to the compiler
                program, <program>. <options_list> is a comma-
                separated list of one or more options. <program>
                can be one of the following:

                a = assembler
                b = compiler back end
                c = compiler front end
                I = interprocedural analysis tool - compile phase
                L = interprocedural analysis tool - link phase
                l = linkage editor
                p = compiler preprocessor

         -qasm_as[='<asm_path> [<flags_list>]'] | -qnoasm_as
                Specifies the path and flags used to invoke the
                assembler in order to handle assembler code in an
                asm statement. <asm_path> is the full path to the
                assembler to be used, and <flags_list> is a series
                of one or more flags (and their arguments),
                separated by spaces. Please note that single quotes
                (or double quotes) are required around the string
                of arguments if any spaces exist.

         -qexpfile=<filename>
                Saves the exported symbols in the specified file.
                This option is used only together with the
                -qmkshrobj compiler option.  For more information,
                see -qmkshrobj.

         -qmaxmem=<num>
                Limits the amount of memory used by certain
                memory-intensive optimizations to <num> kilobytes.
                When <num> is -1, the optimizer will use as much
                memory as needed.  By default -qmaxmem=8192 when
                -O2 level optimization is in effect and -qmaxmem=-1
                when -O3 level or greater optimization is in
                effect.

         -qpath=<program>:<path>
                Constructs alternate program names for compiler
                components. The program and directory path
                specified are used in place of the regular program.
                <program> can be one of the following:

                a = assembler
                b = compiler backend
                c = compiler frontend
                I = interprocedural analysis - compile phase
                L = interprocedural analysis - link phase
                l = linkage editor
                p = compiler preprocessor

         -qtls[=<model>] | -qnotls
                Specifies the thread-local storage model to be used
                by the application, where <model> can be:

                global-dynamic
                initial-exec
                local-exec
                local-dynamic

                If the -qnopic compiler option is in effect, the
                default is initial_exec.  If the -qpic compiler
                option is in effect, the default is global_dynamic.

  Integer and Floating-Point Options
         -y<rounding_mode>
                Specifies the compile-time rounding mode of
                constant floating-point expressions, where
                <rounding_mode> is one of the following:

                m = round toward minus infinity
                n = round to the nearest representable number
                p = round toward plus infinity
                z = round toward zero.

                The default is -yn.

         -qfloat=<suboptions_list>
                Specifies various floating-point suboptions. This
                provides different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following:

                emulate | noemulate
                     Emulates the floating-point instructions
                     omitted by the PowerPC 403(TM) processor.
                     Function calls are emitted in place of PowerPC
                     floating-point instructions.  Use this option
                     only in a single-threaded stand-alone
                     environment, targeting the PowerPC 403
                     processor.  Do not use -qfloat=emulate with
                     any of the following invocation commands:
                      * -qarch=pwr, -qarch=pwr2, -qarch=pwrx
                      * -qlongdouble, -qldbl128
                      * xlc128
                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using faster inline code that
                     does not check for overflows. This suboption
                     must only be used with an optimization option.
                     -qfloat=nofltint checks floating-point-to-
                     integer conversions for out-of-range values.
                fold | nofold
                     Specifies that constant floating-point
                     expressions are to be evaluated at compile
                     time rather than at run time.
                hsflt | nohsflt
                     The hsflt option speeds up calculations by
                     truncating instead of rounding computed values
                     to single precision before storing and on
                     conversions from floating-point to integer.
                     The nohsflt suboption specifies that single-
                     precision expressions are rounded after
                     expression evaluation and that floating-
                     point-to-integer conversions are to be checked
                     for out-of-range values.
                hssngl | nohssngl
                     The hssngl option specifies that single-
                     precision expressions are rounded only when
                     the results are stored into float memory
                     locations. The nohssngl option specifies that
                     single-precision expressions are rounded after
                     expression evaluation. Using hssngl can
                     improve runtime performance and is safer than
                     using -qfloat=hsflt.
                maf | nomaf
                     Makes floating-point calculations faster and
                     more accurate by using floating-point
                     multiply-add instructions where appropriate.
                nans | nonans
                     Generates extra instructions to detect
                     signalling NaN when converting from single-
                     precision to double-precision at run time. The
                     option nonans specifies that this conversion
                     need not be detected.
                relax | norelax
                     Relaxes the strict IEEE-conformance slightly
                     for greater speed, typically by removing some
                     trivial, floating-point arithmetic operations,
                     such as adds and subtracts involving a zero on
                     the right.
                rndsngl | norndsngl
                     Specifies that the result of each single-
                     precision (float) operation is to be rounded
                     to single precision. -qfloat=norndsngl
                     specifies that rounding to single-precision
                     happens only after full expressions have been
                     evaluated.
                rrm | norrm
                     Prevents floating-point optimizations that are
                     incompatible with runtime rounding to plus and
                     minus infinity modes.
                rsqrt | norsqrt
                     Specifies whether a division by the result of
                     a square root can be replaced with a multiply
                     by the reciprocal of the square root.
                     -qfloat=rsqrt has no effect unless -qignerrno
                     and -qarch=pwr2 are also specified.
                spnans | nospnans
                     Detects signalling NaN on conversion from
                     single-precision to double-precision.

                The default suboptions are: nospnans, norsqrt (at
                -O2 optimization), rsqrt (at -O3 optimization),
                norrm, norndsngl, norelax, nonans, maf, nohssngl,
                nohsflt, fold, nofltint (at -O2 optimization),
                fltint (at -O3 or greater optimization), and
                noemulate.

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Generates instructions to detect and trap runtime
                floating-point exceptions.  <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                overflow
                     Generates code to detect and trap floating-
                     point overflow.
                underflow
                     Generates code to detect and trap floating-
                     point underflow.
                zerodivide
                     Generates code to detect and trap floating-
                     point division by zero.
                invalid
                     Generates code to detect and trap floating-
                     point invalid operation exceptions.
                inexact
                     Generates code to detect and trap floating-
                     point inexact exceptions.
                enable
                     Enables the specified exceptions in the
                     prologue of the main program.
                imprecise
                     Generates code for imprecise detection of the
                     specified exceptions. If an exception occurs,
                     it is detected, but the exact location of the
                     exception is not determined.
                nanq | nonanq
                     Generates code to detect and trap NaNQ (Not a
                     Number Quiet) exceptions handled or generated
                     by floating-point operations.


         -qfold | -qnofold
                This option is obsolete. Use -qfloat=fold in your
                new applications. Specifies that constant
                floating-point expressions are to be evaluated at
                compile time.  The default is -qfold.

         -qhsflt | -qnohsflt
                This option is obsolete. Use -qfloat=hsflt in your
                new applications. Speeds up calculations by
                removing range-checking on single-precision float
                results, and on conversions from floating-point to
                integer. -qnohsflt specifies that single-precision
                expressions are rounded after expression
                evaluation, and that floating-point-to-integer
                conversions are to be checked for out-of-range
                values.  The default is -qnohsflt.

         -qhssngl | -qnohssngl
                This option is obsolete. Use -qfloat=hssngl in your
                new applications. Specifies that single-precision
                expressions are rounded only when the results are
                stored into float memory locations. -qnohssngl
                specifies that single-precision expressions are
                rounded after expression evaluation.  The default
                is -qnohssngl.

         -qldbl128 | -qnoldbl128
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qlongdouble.  The default is -qnoldbl128.

         -qlongdouble | -qnolongdouble
                Specifies whether to increase the long double size
                from 64 to 128 bits. This is equivalent to
                -qldbl128.  The default is -qnolongdouble.

         -qlonglit | -qnolonglit
                Makes unsuffixed literals into the long type in
                64-bit mode.  The default is -qnolonglit.

         -qlonglong | -qnolonglong
                Allows long long integers.  When compiling with xlc
                or cc the default is -qlonglong. When compiling
                with c89, the default -qnolonglong.

         -qmaf | -qnomaf
                This option affects the precision of floating-point
                intermediate results. This option is obsolete. Use
                -qfloat=maf in your new applications. -qmaf
                specifies whether floating-point multiply-add
                instructions are to be generated. The default is
                -qmaf.

         -qrrm | -qnorrm
                This option is obsolete. Use -qfloat=rrm in your
                new applications. Prevents floating-point
                optimizations that are not compatible with runtime
                rounding to plus and minus infinity modes. The
                default is -qnorrm.

  ENVIRONMENT VARIABLES
         OBJECT_MODE
                Changes the compilation mode behavior, unless
                overridden by configuration file or command-line
                options.

                32
                     32-bit compiler mode.
                64
                     64-bit compiler mode.
                32_64
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.
                (not set)
                     32-bit compiler mode.
                (anything else)
                     Fatal error and stop, unless an explicit
                     configuration file or command-line compiler-
                     mode setting exists.

         PATH   Specifies the directory search path for the
                executable files of the compiler.

         MANPATH
                Specifies the directory search path for finding
                manual pages.

         OBJECT_MODE
                Specifies the default compilation mode to 32-bit or
                64-bit.

         LANG   Specifies the national language for message and
                help files.

         NLSPATH
                Specifies the path of the message and help files.

         PDFDIR Specifies the directory in which the profile data
                file is created.

         TMPDIR Specifies the directory in which temporary files
                are created. The default is /tmp.

         XLNOCLONEARCH
                Instructs the program to only execute the generic
                code (code that is not versioned for a particular
                architecture).

         XLSMPOPTS
                Sets options for programs using loop
                parallelization.
                e.g. XLSMPOPTS=PARTHDS=4:SCHEDULE=DYNAMIC=5

  SEE ALSO
         vacndi(1), gxlc(1), showpdf(1), mergepdf(1), resetpdf(1)
         cleanpdf(1)

         For more information, refer to the following Web sites:
         www.ibm.com/software/awdtools/caix/library/
         www.ibm.com/software/awdtools/caix/support/

  COPYRIGHT
         Licensed Materials - Property of IBM

         IBM(R) XL C Enterprise Edition V8.0 for AIX(R)

         5724-M11

         (C) Copyright IBM Corp. 1991, 2005, and by others. All
         Rights Reserved.

         IBM and AIX are trademarks or registered trademarks of IBM
         Corp. in the U.S., other countries or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.




























rm /tmp/xlcW0pLUcia
rm /tmp/xlcW1pLUcib
rm /tmp/xlcW2pLUcic
configure:11782: $? = 249
configure:11785: checking whether we are using the GNU C++ compiler
configure:11814: xlc++ -c -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp >&5
"conftest.cpp", line 33.14: 1540-0040 (S) The text "me" is unexpected.  "choke" may be undeclared or ambiguous.
configure:11821: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:11838: result: no
configure:11847: checking whether xlc++ accepts -g
configure:11877: xlc++ -c -g  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp >&5
configure:11884: $? = 0
configure:11985: result: yes
configure:12029: checking whether the C++ compiler xlc++ can build an executable
configure:12069: xlc++ -o conftest -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.cpp  >&5
configure:12076: $? = 0
configure:12102: result: yes
configure:12111: checking whether C++ compiler works with string
configure:12145: xlc++ -c -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp >&5
configure:12152: $? = 0
configure:12173: result: yes
configure:12186: checking whether the compiler supports exceptions
configure:12219: xlc++ -c -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp >&5
configure:12226: $? = 0
configure:12248: result: yes
configure:12258: checking whether the compiler recognizes bool as a built-in type
configure:12295: xlc++ -c -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp >&5
configure:12302: $? = 0
configure:12324: result: yes
configure:12334: checking whether the compiler implements namespaces
configure:12367: xlc++ -c -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp >&5
configure:12374: $? = 0
configure:12396: result: yes
configure:12417: checking whether <iostream> available
configure:12446: xlc++ -c -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp >&5
configure:12453: $? = 0
configure:12468: result: yes
configure:12474: checking whether the compiler implements the namespace std
configure:12511: xlc++ -c -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp >&5
configure:12518: $? = 0
configure:12541: result: yes
configure:12555: checking whether <math> available
configure:12584: xlc++ -c -q64  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp >&5
"conftest.cpp", line 32.10: 1540-0836 (S) The #include file <math> is not found.
configure:12591: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| /* end confdefs.h.  */
| 
| #include <math>
| 
| int
| main ()
| {
| using namespace std;
|   ;
|   return 0;
| }
configure:12606: result: no
configure:12783: checking whether C++ compiler accepts option -O2
configure:12793: result: yes
configure:12795: checking whether routines compiled with -O2 can be linked with ones compiled without -O2
configure:12803: result: yes
configure:12911: checking for perl
configure:12929: found /usr/bin/perl
configure:12941: result: /usr/bin/perl
configure:12954: checking for ar
configure:12981: result: ar -X64
configure:13003: checking for ranlib
configure:13019: found /usr/bin/ranlib
configure:13030: result: ranlib
configure:13049: checking for killall
configure:13065: found /usr/sbin/killall
configure:13076: result: killall
configure:13111: checking for a BSD-compatible install
configure:13179: result: confdb/install-sh -c
configure:13199: checking whether install works
configure:13207: result: yes
configure:13315: checking whether install breaks libraries
configure:13360: result: no
configure:13382: checking whether mkdir -p works
configure:13398: result: yes
configure:13416: checking for make
configure:13432: found /usr/bin/make
configure:13443: result: make
configure:13457: checking whether clock skew breaks make
configure:13482: result: no
configure:13492: checking whether make supports include
configure:13520: result: yes
configure:13529: checking whether make allows comments in actions
configure:13556: result: yes
configure:13571: checking for virtual path format
configure:13614: result: VPATH
configure:13625: checking whether make sets CFLAGS
configure:13651: result: yes
configure:13700: checking for bash
configure:13718: found /usr/bin/bash
configure:13730: result: /usr/bin/bash
configure:13753: checking whether /usr/bin/bash supports arrays
configure:13762: result: yes
configure:15449: checking for doctext
configure:15480: result: false
configure:15490: checking for location of doctext style files
configure:15507: result: unavailable
configure:15519: checking for an ANSI C-conforming const
configure:15594: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 41.17: 1506-359 (I) Automatic variable cs contains a const member and is not initialized.  It will be initialized to zero.
configure:15601: $? = 0
configure:15616: result: yes
configure:15626: checking for working volatile
configure:15655: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:15662: $? = 0
configure:15677: result: yes
configure:15687: checking for C/C++ restrict keyword
configure:15722: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:15729: $? = 0
configure:15747: result: __restrict
configure:15763: checking for inline
configure:15789: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:15796: $? = 0
configure:15814: result: inline
configure:15964: checking whether byte ordering is bigendian
configure:15989: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 35.16: 1506-166 (S) Definition of function not requires parentheses.
"conftest.c", line 35.20: 1506-046 (S) Syntax error.
configure:15996: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| /* end confdefs.h.  */
| #ifndef __APPLE_CC__
| 	       not a universal capable compiler
| 	     #endif
| 	     typedef int dummy;
| 
configure:16046: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:16053: $? = 0
configure:16085: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:16092: $? = 0
configure:16344: result: yes
configure:16391: checking whether C compiler allows unaligned doubles
configure:16434: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:16438: $? = 0
configure:16444: ./conftest
configure:16448: $? = 0
configure:16465: result: yes
configure:16484: checking whether xlc supports __func__
configure:16510: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:16517: $? = 0
configure:16532: result: yes
configure:16614: checking for gcc
configure:16630: found /usr/bin/gcc
configure:16641: result: gcc
configure:16676: result: Using gcc to determine dependencies
configure:16708: checking whether long double is supported
configure:16735: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:16742: $? = 0
configure:16757: result: yes
configure:16768: checking whether long long is supported
configure:16795: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:16802: $? = 0
configure:16817: result: yes
configure:16830: checking for max C struct integer alignment
configure:16958: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:16962: $? = 0
configure:16968: ./conftest
configure:16972: $? = 0
configure:16991: result: eight
configure:17028: checking for max C struct floating point alignment
configure:17140: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:17144: $? = 0
configure:17150: ./conftest
configure:17154: $? = 0
configure:17173: result: sixteen
configure:17208: checking for max C struct alignment of structs with doubles
configure:17289: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:17293: $? = 0
configure:17299: ./conftest
configure:17303: $? = 0
configure:17322: result: eight
configure:17329: checking for max C struct floating point alignment with long doubles
configure:17411: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:17415: $? = 0
configure:17421: ./conftest
configure:17425: $? = 0
configure:17444: result: sixteen
configure:17454: WARNING: Structures containing long doubles may be aligned differently from structures with floats or longs.  MPICH2 does not handle this case automatically and you should avoid assumed extents for structures containing float types.
configure:17489: checking if alignment of structs with doubles is based on position
configure:17533: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:17537: $? = 0
configure:17543: ./conftest
configure:17547: $? = 0
configure:17566: result: yes
configure:17582: checking if alignment of structs with long long ints is based on position
configure:17628: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:17632: $? = 0
configure:17638: ./conftest
configure:17642: $? = 0
configure:17661: result: no
configure:17677: checking if double alignment breaks rules, find actual alignment
configure:17734: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:17738: $? = 0
configure:17744: ./conftest
configure:17748: $? = 0
configure:17767: result: no
configure:17783: checking for alignment restrictions on pointers
configure:17813: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:17817: $? = 0
configure:17823: ./conftest
configure:17827: $? = 0
configure:17853: result: int or better
configure:17865: checking size of char
configure:18170: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:18174: $? = 0
configure:18180: ./conftest
configure:18184: $? = 0
configure:18210: result: 1
configure:18224: checking size of unsigned char
configure:18529: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:18533: $? = 0
configure:18539: ./conftest
configure:18543: $? = 0
configure:18569: result: 1
configure:18583: checking size of short
configure:18888: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:18892: $? = 0
configure:18898: ./conftest
configure:18902: $? = 0
configure:18928: result: 2
configure:18942: checking size of unsigned short
configure:19247: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:19251: $? = 0
configure:19257: ./conftest
configure:19261: $? = 0
configure:19287: result: 2
configure:19301: checking size of int
configure:19606: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:19610: $? = 0
configure:19616: ./conftest
configure:19620: $? = 0
configure:19646: result: 4
configure:19660: checking size of unsigned int
configure:19965: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:19969: $? = 0
configure:19975: ./conftest
configure:19979: $? = 0
configure:20005: result: 4
configure:20019: checking size of long
configure:20324: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:20328: $? = 0
configure:20334: ./conftest
configure:20338: $? = 0
configure:20364: result: 8
configure:20378: checking size of unsigned long
configure:20683: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:20687: $? = 0
configure:20693: ./conftest
configure:20697: $? = 0
configure:20723: result: 8
configure:20737: checking size of long long
configure:21042: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:21046: $? = 0
configure:21052: ./conftest
configure:21056: $? = 0
configure:21082: result: 8
configure:21096: checking size of unsigned long long
configure:21401: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:21405: $? = 0
configure:21411: ./conftest
configure:21415: $? = 0
configure:21441: result: 8
configure:21455: checking size of float
configure:21760: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:21764: $? = 0
configure:21770: ./conftest
configure:21774: $? = 0
configure:21800: result: 4
configure:21814: checking size of double
configure:22119: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:22123: $? = 0
configure:22129: ./conftest
configure:22133: $? = 0
configure:22159: result: 8
configure:22173: checking size of long double
configure:22478: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:22482: $? = 0
configure:22488: ./conftest
configure:22492: $? = 0
configure:22518: result: 8
configure:22532: checking size of void *
configure:22837: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:22841: $? = 0
configure:22847: ./conftest
configure:22851: $? = 0
configure:22877: result: 8
configure:22888: checking for ANSI C header files
configure:22918: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:22925: $? = 0
configure:23056: result: no
configure:23082: checking stddef.h usability
configure:23099: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:23106: $? = 0
configure:23120: result: yes
configure:23124: checking stddef.h presence
configure:23139: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:23146: $? = 0
configure:23160: result: yes
configure:23188: checking for stddef.h
configure:23197: result: yes
configure:23216: checking size of wchar_t
configure:23551: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:23555: $? = 0
configure:23561: ./conftest
configure:23565: $? = 0
configure:23591: result: 4
configure:23606: checking size of float_int
configure:23917: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:23921: $? = 0
configure:23927: ./conftest
configure:23931: $? = 0
configure:23957: result: 8
configure:23971: checking size of double_int
configure:24282: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:24286: $? = 0
configure:24292: ./conftest
configure:24296: $? = 0
configure:24322: result: 16
configure:24336: checking size of long_int
configure:24647: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:24651: $? = 0
configure:24657: ./conftest
configure:24661: $? = 0
configure:24687: result: 16
configure:24701: checking size of short_int
configure:25012: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:25016: $? = 0
configure:25022: ./conftest
configure:25026: $? = 0
configure:25052: result: 8
configure:25066: checking size of two_int
configure:25377: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:25381: $? = 0
configure:25387: ./conftest
configure:25391: $? = 0
configure:25417: result: 8
configure:25431: checking size of long_double_int
configure:25742: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:25746: $? = 0
configure:25752: ./conftest
configure:25756: $? = 0
configure:25782: result: 16
configure:25805: checking sys/bitypes.h usability
configure:25822: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 97.10: 1506-296 (S) #include file <sys/bitypes.h> not found.
configure:25829: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/bitypes.h>
configure:25843: result: no
configure:25847: checking sys/bitypes.h presence
configure:25862: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
"conftest.c", line 64.10: 1506-296 (S) #include file <sys/bitypes.h> not found.
configure:25869: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| /* end confdefs.h.  */
| #include <sys/bitypes.h>
configure:25883: result: no
configure:25911: checking for sys/bitypes.h
configure:25918: result: no
configure:25950: checking inttypes.h usability
configure:25967: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:25974: $? = 0
configure:25988: result: yes
configure:25992: checking inttypes.h presence
configure:26007: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:26014: $? = 0
configure:26028: result: yes
configure:26056: checking for inttypes.h
configure:26065: result: yes
configure:25950: checking stdint.h usability
configure:25967: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:25974: $? = 0
configure:25988: result: yes
configure:25992: checking stdint.h presence
configure:26007: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:26014: $? = 0
configure:26028: result: yes
configure:26056: checking for stdint.h
configure:26065: result: yes
configure:26083: checking for int8_t
configure:26114: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:26121: $? = 0
configure:26150: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 102.24: 1506-195 (S) Integral constant expression with a value greater than zero is required.
configure:26157: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static int test_array [1 - 2 * !((int8_t) ((((int8_t) 1 << (8 - 2)) - 1) * 2 + 1)
| 		 < (int8_t) ((((int8_t) 1 << (8 - 2)) - 1) * 2 + 2))];
| test_array [0] = 0
| 
|   ;
|   return 0;
| }
configure:26186: result: yes
configure:26199: checking for int16_t
configure:26230: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:26237: $? = 0
configure:26266: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 102.24: 1506-195 (S) Integral constant expression with a value greater than zero is required.
configure:26273: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static int test_array [1 - 2 * !((int16_t) ((((int16_t) 1 << (16 - 2)) - 1) * 2 + 1)
| 		 < (int16_t) ((((int16_t) 1 << (16 - 2)) - 1) * 2 + 2))];
| test_array [0] = 0
| 
|   ;
|   return 0;
| }
configure:26302: result: yes
configure:26315: checking for int32_t
configure:26346: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:26353: $? = 0
configure:26382: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 103.30: 1506-418 (E) '2147483646 + 2' does not evaluate to a constant that fits in its signed type.
"conftest.c", line 102.24: 1506-195 (S) Integral constant expression with a value greater than zero is required.
configure:26389: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static int test_array [1 - 2 * !((int32_t) ((((int32_t) 1 << (32 - 2)) - 1) * 2 + 1)
| 		 < (int32_t) ((((int32_t) 1 << (32 - 2)) - 1) * 2 + 2))];
| test_array [0] = 0
| 
|   ;
|   return 0;
| }
configure:26418: result: yes
configure:26431: checking for int64_t
configure:26462: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:26469: $? = 0
configure:26498: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 103.30: 1506-418 (E) '9223372036854775806 + 2' does not evaluate to a constant that fits in its signed type.
"conftest.c", line 102.24: 1506-195 (S) Integral constant expression with a value greater than zero is required.
configure:26505: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static int test_array [1 - 2 * !((int64_t) ((((int64_t) 1 << (64 - 2)) - 1) * 2 + 1)
| 		 < (int64_t) ((((int64_t) 1 << (64 - 2)) - 1) * 2 + 2))];
| test_array [0] = 0
| 
|   ;
|   return 0;
| }
configure:26534: result: yes
configure:26585: checking for uint8_t
configure:26616: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:26623: $? = 0
configure:26644: result: yes
configure:26662: checking for uint16_t
configure:26693: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:26700: $? = 0
configure:26721: result: yes
configure:26735: checking for uint32_t
configure:26766: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:26773: $? = 0
configure:26794: result: yes
configure:26812: checking for uint64_t
configure:26843: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:26850: $? = 0
configure:26871: result: yes
configure:26926: checking size of _Bool
configure:27231: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:27235: $? = 0
configure:27241: ./conftest
configure:27245: $? = 0
configure:27271: result: 1
configure:27285: checking size of float _Complex
configure:27590: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:27594: $? = 0
configure:27600: ./conftest
configure:27604: $? = 0
configure:27630: result: 8
configure:27644: checking size of double _Complex
configure:27949: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:27953: $? = 0
configure:27959: ./conftest
configure:27963: $? = 0
configure:27989: result: 16
configure:28003: checking size of long double _Complex
configure:28308: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:28312: $? = 0
configure:28318: ./conftest
configure:28322: $? = 0
configure:28348: result: 16
configure:28360: checking for _Bool
configure:28388: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:28395: $? = 0
configure:28422: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 114.20: 1506-046 (S) Syntax error.
configure:28429: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((_Bool)))
| 	  return 0;
|   ;
|   return 0;
| }
configure:28452: result: yes
configure:28462: checking for float _Complex
configure:28490: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:28497: $? = 0
configure:28524: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 115.29: 1506-046 (S) Syntax error.
configure:28531: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((float _Complex)))
| 	  return 0;
|   ;
|   return 0;
| }
configure:28554: result: yes
configure:28564: checking for double _Complex
configure:28592: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:28599: $? = 0
configure:28626: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 116.30: 1506-046 (S) Syntax error.
configure:28633: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((double _Complex)))
| 	  return 0;
|   ;
|   return 0;
| }
configure:28656: result: yes
configure:28666: checking for long double _Complex
configure:28694: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:28701: $? = 0
configure:28728: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 117.35: 1506-046 (S) Syntax error.
configure:28735: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((long double _Complex)))
| 	  return 0;
|   ;
|   return 0;
| }
configure:28758: result: yes
configure:29186: checking for size of Fortran type integer
configure:29222: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftestc.c >&5
configure:29225: $? = 0
configure:29244: xlf -o conftest -q64 -O2  conftest.f conftestc.o  >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:29247: $? = 0
configure:29283: result: 4
configure:29294: checking for size of Fortran type real
configure:29330: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftestc.c >&5
configure:29333: $? = 0
configure:29352: xlf -o conftest -q64 -O2  conftest.f conftestc.o  >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:29355: $? = 0
configure:29391: result: 4
configure:29402: checking for size of Fortran type double precision
configure:29438: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftestc.c >&5
configure:29441: $? = 0
configure:29460: xlf -o conftest -q64 -O2  conftest.f conftestc.o  >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:29463: $? = 0
configure:29499: result: 8
configure:29518: checking whether integer*1 is supported
configure:29535: xlf -c -q64 -O2 conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:29542: $? = 0
configure:29557: result: yes
configure:29559: checking whether integer*2 is supported
configure:29576: xlf -c -q64 -O2 conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:29583: $? = 0
configure:29598: result: yes
configure:29600: checking whether integer*4 is supported
configure:29617: xlf -c -q64 -O2 conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:29624: $? = 0
configure:29639: result: yes
configure:29641: checking whether integer*8 is supported
configure:29658: xlf -c -q64 -O2 conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:29665: $? = 0
configure:29680: result: yes
configure:29682: checking whether integer*16 is supported
configure:29699: xlf -c -q64 -O2 conftest.f >&5
"conftest.f", line 2.14: 1514-065 (E) Length specified is not valid for the specified type.  Default length assumed.
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:29706: $? = 0
configure:29721: result: yes
configure:29723: checking whether real*4 is supported
configure:29740: xlf -c -q64 -O2 conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:29747: $? = 0
configure:29762: result: yes
configure:29764: checking whether real*8 is supported
configure:29781: xlf -c -q64 -O2 conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:29788: $? = 0
configure:29803: result: yes
configure:29805: checking whether real*16 is supported
configure:29822: xlf -c -q64 -O2 conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:29829: $? = 0
configure:29844: result: yes
configure:30236: checking for C type matching Fortran integer
configure:30243: result: int
configure:30292: checking for size of MPI_Status
configure:30335: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:30339: $? = 0
configure:30345: ./conftest
configure:30349: $? = 0
configure:30367: result: 20
configure:30495: checking for values of Fortran logicals
configure:30538: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftestc.c >&5
configure:30541: $? = 0
configure:30551: xlf -o conftest -q64 -O2  conftest.f conftestc.o  >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:30554: $? = 0
configure:30592: result: True is 1 and False is 0
configure:30935: xlc -E conftest.c >/dev/null 2>conftest.out
configure:30938: $? = 0
configure:31037: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:31040: $? = 0
configure:31082: xlf -o conftest -q64 -O2  conftest.f  >&5
** conftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:31085: $? = 0
configure:31130: xlc++ -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.cpp  >&5
configure:31133: $? = 0
configure:2324: xlf90 -o conftest -q64 -O2  conftest.f90  >&5
** conftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f90.
configure:31238: checking for Fortran 90 integer kind for 8-byte integers
configure:31272: xlf90 -o conftest -q64 -O2  conftest.f90  >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f90.
configure:31275: $? = 0
configure:31288: result: 8
configure:31466: checking whether real*8 is supported in Fortran 90
configure:31483: xlf90 -c -q64 -O2 conftest.f90 >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f90.
configure:31490: $? = 0
configure:31505: result: yes
configure:31651: checking size of bool
configure:31956: xlc++ -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.cpp  >&5
configure:31960: $? = 0
configure:31966: ./conftest
configure:31970: $? = 0
configure:31996: result: 1
configure:32011: checking how to run the C++ preprocessor
configure:32047: xlc++ -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp
configure:32054: $? = 0
configure:32085: xlc++ -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp
"conftest.cpp", line 97.10: 1540-0836 (S) The #include file <ac_nonexistent.h> is not found.
configure:32092: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:32125: result: xlc++ -E
configure:32154: xlc++ -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp
configure:32161: $? = 0
configure:32192: xlc++ -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp
"conftest.cpp", line 97.10: 1540-0836 (S) The #include file <ac_nonexistent.h> is not found.
configure:32199: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:32249: checking complex usability
configure:32266: xlc++ -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp >&5
configure:32273: $? = 0
configure:32287: result: yes
configure:32291: checking complex presence
configure:32306: xlc++ -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.cpp
configure:32313: $? = 0
configure:32327: result: yes
configure:32355: checking for complex
configure:32362: result: yes
configure:32375: checking size of Complex
configure:32710: xlc++ -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.cpp  >&5
configure:32714: $? = 0
configure:32720: ./conftest
configure:32724: $? = 0
configure:32750: result: 8
configure:32764: checking size of DoubleComplex
configure:33099: xlc++ -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.cpp  >&5
configure:33103: $? = 0
configure:33109: ./conftest
configure:33113: $? = 0
configure:33139: result: 16
configure:33154: checking size of LongDoubleComplex
configure:33489: xlc++ -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.cpp  >&5
configure:33493: $? = 0
configure:33499: ./conftest
configure:33503: $? = 0
configure:33529: result: 16
configure:33610: checking if char * pointers use byte addresses
configure:33638: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:33642: $? = 0
configure:33648: ./conftest
configure:33652: $? = 0
configure:33669: result: yes
configure:33696: checking for alignment restrictions on 
configure:33740: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:33744: $? = 0
configure:33750: ./conftest
configure:33754: $? = 0
configure:33772: result: no
configure:33793: checking for alignment restrictions on int32_t
configure:33837: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:33841: $? = 0
configure:33847: ./conftest
configure:33851: $? = 0
configure:33869: result: no
configure:33885: checking size of MPIR_Bsend_data_t
configure:34214: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:34218: $? = 0
configure:34224: ./conftest
configure:34228: $? = 0
configure:34254: result: 88
configure:34712: checking for ANSI C header files
configure:34880: result: no
configure:34923: checking stdlib.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:34947: $? = 0
configure:34961: result: yes
configure:34965: checking stdlib.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:34987: $? = 0
configure:35001: result: yes
configure:35029: checking for stdlib.h
configure:35038: result: yes
configure:34923: checking stdarg.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:34947: $? = 0
configure:34961: result: yes
configure:34965: checking stdarg.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:34987: $? = 0
configure:35001: result: yes
configure:35029: checking for stdarg.h
configure:35038: result: yes
configure:34923: checking sys/types.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:34947: $? = 0
configure:34961: result: yes
configure:34965: checking sys/types.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:34987: $? = 0
configure:35001: result: yes
configure:35029: checking for sys/types.h
configure:35038: result: yes
configure:34923: checking string.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:34947: $? = 0
configure:34961: result: yes
configure:34965: checking string.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:34987: $? = 0
configure:35001: result: yes
configure:35029: checking for string.h
configure:35038: result: yes
configure:34912: checking for inttypes.h
configure:34919: result: yes
configure:34923: checking limits.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:34947: $? = 0
configure:34961: result: yes
configure:34965: checking limits.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:34987: $? = 0
configure:35001: result: yes
configure:35029: checking for limits.h
configure:35038: result: yes
configure:34912: checking for stddef.h
configure:34919: result: yes
configure:34923: checking errno.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:34947: $? = 0
configure:34961: result: yes
configure:34965: checking errno.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:34987: $? = 0
configure:35001: result: yes
configure:35029: checking for errno.h
configure:35038: result: yes
configure:34923: checking sys/socket.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:34947: $? = 0
configure:34961: result: yes
configure:34965: checking sys/socket.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:34987: $? = 0
configure:35001: result: yes
configure:35029: checking for sys/socket.h
configure:35038: result: yes
configure:34923: checking sys/time.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:34947: $? = 0
configure:34961: result: yes
configure:34965: checking sys/time.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:34987: $? = 0
configure:35001: result: yes
configure:35029: checking for sys/time.h
configure:35038: result: yes
configure:34923: checking unistd.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:34947: $? = 0
configure:34961: result: yes
configure:34965: checking unistd.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:34987: $? = 0
configure:35001: result: yes
configure:35029: checking for unistd.h
configure:35038: result: yes
configure:34923: checking endian.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 151.10: 1506-296 (S) #include file <endian.h> not found.
configure:34947: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <endian.h>
configure:34961: result: no
configure:34965: checking endian.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
"conftest.c", line 118.10: 1506-296 (S) #include file <endian.h> not found.
configure:34987: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <endian.h>
configure:35001: result: no
configure:35029: checking for endian.h
configure:35038: result: no
configure:34923: checking assert.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:34947: $? = 0
configure:34961: result: yes
configure:34965: checking assert.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:34987: $? = 0
configure:35001: result: yes
configure:35029: checking for assert.h
configure:35038: result: yes
configure:34923: checking sys/param.h usability
configure:34940: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:34947: $? = 0
configure:34961: result: yes
configure:34965: checking sys/param.h presence
configure:34980: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
configure:34987: $? = 0
configure:35001: result: yes
configure:35029: checking for sys/param.h
configure:35038: result: yes
configure:35053: checking for sys/uio.h
configure:35083: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:35090: $? = 0
configure:35105: result: yes
configure:35116: checking for size_t
configure:35144: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:35151: $? = 0
configure:35178: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 157.21: 1506-046 (S) Syntax error.
configure:35185: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((size_t)))
| 	  return 0;
|   ;
|   return 0;
| }
configure:35208: result: yes
configure:35227: checking for setitimer
configure:35283: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:35290: $? = 0
configure:35312: result: yes
configure:35227: checking for alarm
configure:35283: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:35290: $? = 0
configure:35312: result: yes
configure:35330: checking for vsnprintf
configure:35386: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:35393: $? = 0
configure:35415: result: yes
configure:35330: checking for vsprintf
configure:35386: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:35393: $? = 0
configure:35415: result: yes
configure:35430: checking whether vsnprintf needs a declaration
configure:35459: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 127.5: 1506-343 (S) Redeclaration of vsnprintf differs from previous declaration on line 277 of "/usr/include/stdio.h".
"conftest.c", line 127.5: 1506-377 (I) The type "double" of parameter 1 differs from the previous type "char*".
configure:35466: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #include <stdarg.h>
| int vsnprintf(double, int, double, const char *);
| int
| main ()
| {
| int a=vsnprintf(1.0,27,1.0,"foo");
|   ;
|   return 0;
| }
configure:35481: result: no
configure:35500: checking for strerror
configure:35556: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:35563: $? = 0
configure:35585: result: yes
configure:35500: checking for strncasecmp
configure:35556: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:35563: $? = 0
configure:35585: result: yes
configure:35603: checking for snprintf
configure:35659: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:35666: $? = 0
configure:35688: result: yes
configure:35702: checking whether snprintf needs a declaration
configure:35730: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 129.5: 1506-343 (S) Redeclaration of snprintf differs from previous declaration on line 268 of "/usr/include/stdio.h".
"conftest.c", line 129.5: 1506-376 (I) Redeclaration of snprintf has a different number of fixed parameters than the previous declaration.
"conftest.c", line 129.5: 1506-302 (I) The declarations of the function snprintf must be consistent in their use of the ellipsis.
"conftest.c", line 129.5: 1506-377 (I) The type "double" of parameter 1 differs from the previous type "char*".
configure:35737: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| int snprintf(double, int, double, const char *);
| int
| main ()
| {
| int a=snprintf(1.0,27,1.0,"foo");
|   ;
|   return 0;
| }
configure:35752: result: no
configure:35770: checking for va_copy
configure:35806: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
ld: 0711-317 ERROR: Undefined symbol: .va_copy
ld: 0711-345 Use the -bloadmap or -bnoquiet option to obtain more information.
configure:35813: $? = 8
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| /* end confdefs.h.  */
| 
| #include <stdarg.h>
| void foo1( char *fmt, ... ) {
|     va_list ap, list;
|     va_start(ap,fmt);
|     va_copy(list,ap);
|     va_end(list);
|     va_end(ap);
| }
| 
| int
| main ()
| {
| foo1("a test %d", 3);
|   ;
|   return 0;
| }
configure:35833: result: no
configure:35843: checking for __va_copy
configure:35879: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
ld: 0711-317 ERROR: Undefined symbol: .__va_copy
ld: 0711-345 Use the -bloadmap or -bnoquiet option to obtain more information.
configure:35886: $? = 8
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| /* end confdefs.h.  */
| 
| #include <stdarg.h>
| void foo1( char *fmt, ... ) {
|     va_list ap, list;
|     va_start(ap,fmt);
|     __va_copy(list,ap);
|     va_end(list);
|     va_end(ap);
| }
| 
| int
| main ()
| {
| foo1("a test %d", 3);
|   ;
|   return 0;
| }
configure:35906: result: no
configure:35917: checking for variable argument list macro functionality
configure:35943: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:35950: $? = 0
configure:35963: result: yes
configure:35998: checking valgrind.h usability
configure:36015: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 162.10: 1506-296 (S) #include file <valgrind.h> not found.
configure:36022: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <valgrind.h>
configure:36036: result: no
configure:36040: checking valgrind.h presence
configure:36055: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
"conftest.c", line 129.10: 1506-296 (S) #include file <valgrind.h> not found.
configure:36062: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| /* end confdefs.h.  */
| #include <valgrind.h>
configure:36076: result: no
configure:36104: checking for valgrind.h
configure:36113: result: no
configure:35998: checking memcheck.h usability
configure:36015: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 162.10: 1506-296 (S) #include file <memcheck.h> not found.
configure:36022: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <memcheck.h>
configure:36036: result: no
configure:36040: checking memcheck.h presence
configure:36055: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
"conftest.c", line 129.10: 1506-296 (S) #include file <memcheck.h> not found.
configure:36062: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| /* end confdefs.h.  */
| #include <memcheck.h>
configure:36076: result: no
configure:36104: checking for memcheck.h
configure:36113: result: no
configure:35998: checking valgrind/valgrind.h usability
configure:36015: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 162.10: 1506-296 (S) #include file <valgrind/valgrind.h> not found.
configure:36022: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <valgrind/valgrind.h>
configure:36036: result: no
configure:36040: checking valgrind/valgrind.h presence
configure:36055: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
"conftest.c", line 129.10: 1506-296 (S) #include file <valgrind/valgrind.h> not found.
configure:36062: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| /* end confdefs.h.  */
| #include <valgrind/valgrind.h>
configure:36076: result: no
configure:36104: checking for valgrind/valgrind.h
configure:36113: result: no
configure:35998: checking valgrind/memcheck.h usability
configure:36015: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 162.10: 1506-296 (S) #include file <valgrind/memcheck.h> not found.
configure:36022: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <valgrind/memcheck.h>
configure:36036: result: no
configure:36040: checking valgrind/memcheck.h presence
configure:36055: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c
"conftest.c", line 129.10: 1506-296 (S) #include file <valgrind/memcheck.h> not found.
configure:36062: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| /* end confdefs.h.  */
| #include <valgrind/memcheck.h>
configure:36076: result: no
configure:36104: checking for valgrind/memcheck.h
configure:36113: result: no
configure:36132: checking for working alloca.h
configure:36159: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:36166: $? = 0
configure:36186: result: yes
configure:36196: checking for alloca
configure:36243: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:36250: $? = 0
configure:36270: result: yes
configure:36529: checking for strdup
configure:36585: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:36592: $? = 0
configure:36614: result: yes
configure:36629: checking whether strdup needs a declaration
configure:36657: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 133.5: 1506-343 (S) Redeclaration of strdup differs from previous declaration on line 180 of "/usr/include/string.h".
"conftest.c", line 133.5: 1506-050 (I) Return type "int" in redeclaration is not compatible with the previous return type "char*".
"conftest.c", line 133.5: 1506-376 (I) Redeclaration of strdup has a different number of fixed parameters than the previous declaration.
"conftest.c", line 133.5: 1506-377 (I) The type "double" of parameter 1 differs from the previous type "const char*".
configure:36664: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_STRDUP 1
| /* end confdefs.h.  */
| #include <string.h>
| int strdup(double, int, double, const char *);
| int
| main ()
| {
| int a=strdup(1.0,27,1.0,"foo");
|   ;
|   return 0;
| }
configure:36679: result: no
configure:37018: checking for mkstemp
configure:37074: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:37081: $? = 0
configure:37103: result: yes
configure:37117: checking whether mkstemp needs a declaration
configure:37145: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 134.5: 1506-343 (S) Redeclaration of mkstemp differs from previous declaration on line 444 of "/usr/include/stdlib.h".
"conftest.c", line 134.5: 1506-376 (I) Redeclaration of mkstemp has a different number of fixed parameters than the previous declaration.
"conftest.c", line 134.5: 1506-377 (I) The type "double" of parameter 1 differs from the previous type "char*".
configure:37152: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_STRDUP 1
| #define HAVE_MKSTEMP 1
| /* end confdefs.h.  */
| #include <stdlib.h>
| int mkstemp(double, int, double, const char *);
| int
| main ()
| {
| int a=mkstemp(1.0,27,1.0,"foo");
|   ;
|   return 0;
| }
configure:37167: result: no
configure:37184: checking for fdopen
configure:37240: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:37247: $? = 0
configure:37269: result: yes
configure:37283: checking whether fdopen needs a declaration
configure:37311: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:37318: $? = 0
configure:37333: result: yes
configure:37350: checking for putenv
configure:37406: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:37413: $? = 0
configure:37435: result: yes
configure:37449: checking whether putenv needs a declaration
configure:37477: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
"conftest.c", line 137.5: 1506-343 (S) Redeclaration of putenv differs from previous declaration on line 393 of "/usr/include/stdlib.h".
"conftest.c", line 137.5: 1506-376 (I) Redeclaration of putenv has a different number of fixed parameters than the previous declaration.
"conftest.c", line 137.5: 1506-377 (I) The type "double" of parameter 1 differs from the previous type "char*".
configure:37484: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_STRDUP 1
| #define HAVE_MKSTEMP 1
| #define HAVE_FDOPEN 1
| #define NEEDS_FDOPEN_DECL 1
| #define HAVE_PUTENV 1
| /* end confdefs.h.  */
| #include <stdlib.h>
| int putenv(double, int, double, const char *);
| int
| main ()
| {
| int a=putenv(1.0,27,1.0,"foo");
|   ;
|   return 0;
| }
configure:37499: result: no
configure:37545: checking for clock_gettime
configure:37601: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:37608: $? = 0
configure:37630: result: yes
configure:37545: checking for clock_getres
configure:37601: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:37608: $? = 0
configure:37630: result: yes
configure:37545: checking for gethrtime
configure:37601: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
ld: 0711-317 ERROR: Undefined symbol: .gethrtime
ld: 0711-345 Use the -bloadmap or -bnoquiet option to obtain more information.
configure:37608: $? = 8
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_STRDUP 1
| #define HAVE_MKSTEMP 1
| #define HAVE_FDOPEN 1
| #define NEEDS_FDOPEN_DECL 1
| #define HAVE_PUTENV 1
| #define HAVE_CLOCK_GETTIME 1
| #define HAVE_CLOCK_GETRES 1
| /* end confdefs.h.  */
| /* Define gethrtime to an innocuous variant, in case <limits.h> declares gethrtime.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define gethrtime innocuous_gethrtime
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char gethrtime (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef gethrtime
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char gethrtime ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_gethrtime || defined __stub___gethrtime
| choke me
| #endif
| 
| int
| main ()
| {
| return gethrtime ();
|   ;
|   return 0;
| }
configure:37630: result: no
configure:37545: checking for gettimeofday
configure:37601: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c  >&5
configure:37608: $? = 0
configure:37630: result: yes
configure:37829: checking for clock_gettime in -lrt
configure:37864: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src  conftest.c -lrt   >&5
configure:37871: $? = 0
configure:37892: result: yes
configure:37905: checking for clock_getres
configure:37988: result: yes
configure:38004: checking whether struct timespec is defined in time.h
configure:38033: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:38040: $? = 0
configure:38056: result: yes
configure:38129: checking for CLOCK_REALTIME defined in time.h
configure:38158: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src conftest.c >&5
configure:38165: $? = 0
configure:38180: result: yes
SPARC V9 inline spin locks supported...no
void MPIDU_lock_acquire(int * lock);
.inline lock_acquire, 4
 1:
    set 1, %o1
    cas [%o0], %g0, %o1
    tst %o1
    bne 1b
    nop
    membar #LoadLoad | #LoadStore
.end
void MPIDU_lock_release(int * lock);
.inline lock_release, 4
    membar #StoreStore | #LoadStore
    clr [%o0]
.end
int main(int argc, char ** argv)
{
    int lock = 0;
    MPIDU_lock_acquire(&lock);
    MPIDU_lock_release(&lock);
    return 0;
}
xlc: 1501-218 file lconftest.il contains an incorrect file suffix
ld: 0711-715 ERROR: File lconftest.il cannot be processed.
	The file must be an object file, an import file, or an archive.
SPARC V8 inline spin locks supported...no
void MPIDU_lock_acquire(int * lock);
.inline lock_acquire, 4
 1:
    ldstub [%o0], %o1
    cmp %o1, %g0
    bne 1b
    nop
.end
void MPIDU_lock_release(int * lock);
.inline lock_release, 4
    stbar
    clrb [%o0]
.end
int main(int argc, char ** argv)
{
    int lock = 0;
    MPIDU_lock_acquire(&lock);
    MPIDU_lock_release(&lock);
    return 0;
}
xlc: 1501-218 file lconftest.il contains an incorrect file suffix
ld: 0711-715 ERROR: File lconftest.il cannot be processed.
	The file must be an object file, an import file, or an archive.
configure:39209: checking pthread.h usability
configure:39226: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS conftest.c >&5
configure:39233: $? = 0
configure:39247: result: yes
configure:39251: checking pthread.h presence
configure:39266: xlc -E  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS conftest.c
configure:39273: $? = 0
configure:39287: result: yes
configure:39315: checking for pthread.h
configure:39324: result: yes
configure:39347: checking for fgrep
configure:39411: result: /usr/bin/fgrep
configure:39416: checking for pthread_key_create in -lpthread
configure:39451: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c -lpthread   >&5
configure:39458: $? = 0
configure:39479: result: yes
LIBS(='') does not contain '-lpthread', appending
configure:39500: checking for pthread_yield
configure:39556: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
ld: 0711-317 ERROR: Undefined symbol: .pthread_yield
ld: 0711-345 Use the -bloadmap or -bnoquiet option to obtain more information.
configure:39563: $? = 8
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_STRDUP 1
| #define HAVE_MKSTEMP 1
| #define HAVE_FDOPEN 1
| #define NEEDS_FDOPEN_DECL 1
| #define HAVE_PUTENV 1
| #define HAVE_CLOCK_GETTIME 1
| #define HAVE_CLOCK_GETRES 1
| #define HAVE_GETTIMEOFDAY 1
| #define MPIR_Pint long
| #define MPIR_Upint unsigned long
| #define MPIU_SIZE_T unsigned long
| #define HAVE_PTHREAD_H 1
| /* end confdefs.h.  */
| /* Define pthread_yield to an innocuous variant, in case <limits.h> declares pthread_yield.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define pthread_yield innocuous_pthread_yield
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char pthread_yield (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef pthread_yield
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char pthread_yield ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_pthread_yield || defined __stub___pthread_yield
| choke me
| #endif
| 
| int
| main ()
| {
| return pthread_yield ();
|   ;
|   return 0;
| }
configure:39585: result: no
configure:39599: checking for pthread_key_create
configure:39655: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
configure:39662: $? = 0
configure:39682: result: yes
configure:39706: checking for pthread_cleanup_push
configure:39762: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
configure:39769: $? = 0
configure:39791: result: yes
configure:39872: checking whether pthread.h defines PTHREAD_MUTEX_RECURSIVE_NP
configure:39899: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS conftest.c >&5
"conftest.c", line 148.7: 1506-045 (S) Undeclared identifier PTHREAD_MUTEX_RECURSIVE_NP.
configure:39906: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_STRDUP 1
| #define HAVE_MKSTEMP 1
| #define HAVE_FDOPEN 1
| #define NEEDS_FDOPEN_DECL 1
| #define HAVE_PUTENV 1
| #define HAVE_CLOCK_GETTIME 1
| #define HAVE_CLOCK_GETRES 1
| #define HAVE_GETTIMEOFDAY 1
| #define MPIR_Pint long
| #define MPIR_Upint unsigned long
| #define MPIU_SIZE_T unsigned long
| #define HAVE_PTHREAD_H 1
| #define HAVE_PTHREAD_CLEANUP_PUSH 1
| /* end confdefs.h.  */
| #include <pthread.h>
| int
| main ()
| {
| int a=PTHREAD_MUTEX_RECURSIVE_NP;
|   ;
|   return 0;
| }
configure:39921: result: no
configure:39923: checking whether pthread.h defines PTHREAD_MUTEX_RECURSIVE
configure:39950: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS conftest.c >&5
configure:39957: $? = 0
configure:39972: result: yes
configure:39990: checking whether pthread.h defines PTHREAD_MUTEX_ERRORCHECK_NP
configure:40017: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS conftest.c >&5
"conftest.c", line 149.7: 1506-045 (S) Undeclared identifier PTHREAD_MUTEX_ERRORCHECK_NP.
configure:40024: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_STRDUP 1
| #define HAVE_MKSTEMP 1
| #define HAVE_FDOPEN 1
| #define NEEDS_FDOPEN_DECL 1
| #define HAVE_PUTENV 1
| #define HAVE_CLOCK_GETTIME 1
| #define HAVE_CLOCK_GETRES 1
| #define HAVE_GETTIMEOFDAY 1
| #define MPIR_Pint long
| #define MPIR_Upint unsigned long
| #define MPIU_SIZE_T unsigned long
| #define HAVE_PTHREAD_H 1
| #define HAVE_PTHREAD_CLEANUP_PUSH 1
| #define HAVE_PTHREAD_MUTEX_RECURSIVE 1
| /* end confdefs.h.  */
| #include <pthread.h>
| int
| main ()
| {
| int a=PTHREAD_MUTEX_ERRORCHECK_NP;
|   ;
|   return 0;
| }
configure:40039: result: no
configure:40041: checking whether pthread.h defines PTHREAD_MUTEX_ERRORCHECK
configure:40068: xlc -c -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS conftest.c >&5
configure:40075: $? = 0
configure:40090: result: yes
configure:40493: checking for sched_yield
configure:40549: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
configure:40556: $? = 0
configure:40578: result: yes
configure:40493: checking for yield
configure:40549: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
configure:40556: $? = 0
configure:40578: result: yes
configure:40493: checking for usleep
configure:40549: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
configure:40556: $? = 0
configure:40578: result: yes
configure:40493: checking for sleep
configure:40549: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
configure:40556: $? = 0
configure:40578: result: yes
configure:40493: checking for select
configure:40549: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
configure:40556: $? = 0
configure:40578: result: yes
configure:40493: checking for getpid
configure:40549: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
configure:40556: $? = 0
configure:40578: result: yes
configure:40602: checking for sched_setaffinity
configure:40658: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
ld: 0711-317 ERROR: Undefined symbol: .sched_setaffinity
ld: 0711-345 Use the -bloadmap or -bnoquiet option to obtain more information.
configure:40665: $? = 8
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_STRDUP 1
| #define HAVE_MKSTEMP 1
| #define HAVE_FDOPEN 1
| #define NEEDS_FDOPEN_DECL 1
| #define HAVE_PUTENV 1
| #define HAVE_CLOCK_GETTIME 1
| #define HAVE_CLOCK_GETRES 1
| #define HAVE_GETTIMEOFDAY 1
| #define MPIR_Pint long
| #define MPIR_Upint unsigned long
| #define MPIU_SIZE_T unsigned long
| #define HAVE_PTHREAD_H 1
| #define HAVE_PTHREAD_CLEANUP_PUSH 1
| #define HAVE_PTHREAD_MUTEX_RECURSIVE 1
| #define PTHREAD_MUTEX_ERRORCHECK_VALUE PTHREAD_MUTEX_ERRORCHECK
| #define MPIU_THREAD_PACKAGE_NAME MPIU_THREAD_PACKAGE_POSIX
| #define HAVE_SCHED_YIELD 1
| #define HAVE_YIELD 1
| #define HAVE_USLEEP 1
| #define HAVE_SLEEP 1
| #define HAVE_SELECT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define sched_setaffinity to an innocuous variant, in case <limits.h> declares sched_setaffinity.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define sched_setaffinity innocuous_sched_setaffinity
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char sched_setaffinity (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef sched_setaffinity
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char sched_setaffinity ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_sched_setaffinity || defined __stub___sched_setaffinity
| choke me
| #endif
| 
| int
| main ()
| {
| return sched_setaffinity ();
|   ;
|   return 0;
| }
configure:40687: result: no
configure:40602: checking for sched_getaffinity
configure:40658: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
ld: 0711-317 ERROR: Undefined symbol: .sched_getaffinity
ld: 0711-345 Use the -bloadmap or -bnoquiet option to obtain more information.
configure:40665: $? = 8
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_STRDUP 1
| #define HAVE_MKSTEMP 1
| #define HAVE_FDOPEN 1
| #define NEEDS_FDOPEN_DECL 1
| #define HAVE_PUTENV 1
| #define HAVE_CLOCK_GETTIME 1
| #define HAVE_CLOCK_GETRES 1
| #define HAVE_GETTIMEOFDAY 1
| #define MPIR_Pint long
| #define MPIR_Upint unsigned long
| #define MPIU_SIZE_T unsigned long
| #define HAVE_PTHREAD_H 1
| #define HAVE_PTHREAD_CLEANUP_PUSH 1
| #define HAVE_PTHREAD_MUTEX_RECURSIVE 1
| #define PTHREAD_MUTEX_ERRORCHECK_VALUE PTHREAD_MUTEX_ERRORCHECK
| #define MPIU_THREAD_PACKAGE_NAME MPIU_THREAD_PACKAGE_POSIX
| #define HAVE_SCHED_YIELD 1
| #define HAVE_YIELD 1
| #define HAVE_USLEEP 1
| #define HAVE_SLEEP 1
| #define HAVE_SELECT 1
| #define HAVE_GETPID 1
| /* end confdefs.h.  */
| /* Define sched_getaffinity to an innocuous variant, in case <limits.h> declares sched_getaffinity.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define sched_getaffinity innocuous_sched_getaffinity
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char sched_getaffinity (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef sched_getaffinity
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char sched_getaffinity ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_sched_getaffinity || defined __stub___sched_getaffinity
| choke me
| #endif
| 
| int
| main ()
| {
| return sched_getaffinity ();
|   ;
|   return 0;
| }
configure:40687: result: no
configure:40602: checking for bindprocessor
configure:40658: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
configure:40665: $? = 0
configure:40687: result: yes
configure:40602: checking for thread_policy_set
configure:40658: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread >&5
ld: 0711-317 ERROR: Undefined symbol: .thread_policy_set
ld: 0711-345 Use the -bloadmap or -bnoquiet option to obtain more information.
configure:40665: $? = 8
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define USE_SMP_COLLECTIVES 1
| #define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
| #define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
| #define USE_LOGGING MPID_LOGGING_NONE
| #define HAVE_RUNTIME_THREADCHECK 1
| #define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
| #define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
| #define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
| #define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
| #define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
| #define HAVE_ROMIO 1
| #define HAVE__FUNC__ /**/
| #define HAVE__FUNCTION__ /**/
| #define HAVE_PRAGMA_WEAK 1
| #define USE_WEAK_SYMBOLS 1
| #define HAVE_MULTIPLE_PRAGMA_WEAK 1
| #define HAVE_LONG_LONG 1
| #define F77_NAME_LOWER 1
| #define STDCALL 
| #define HAVE_FORTRAN_BINDING 1
| #define HAVE_CXX_EXCEPTIONS /**/
| #define HAVE_NAMESPACES /**/
| #define HAVE_NAMESPACE_STD /**/
| #define HAVE_CXX_BINDING 1
| #define HAVE_NAMEPUB_SERVICE 1
| #define restrict __restrict
| #define HAVE_LONG_DOUBLE 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_MAX_INTEGER_ALIGNMENT 8
| #define HAVE_MAX_STRUCT_ALIGNMENT 8
| #define HAVE_MAX_FP_ALIGNMENT 16
| #define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
| #define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
| #define HAVE_DOUBLE_POS_ALIGNMENT 1
| #define SIZEOF_CHAR 1
| #define SIZEOF_UNSIGNED_CHAR 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 8
| #define SIZEOF_UNSIGNED_LONG 8
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define SIZEOF_LONG_DOUBLE 8
| #define SIZEOF_VOID_P 8
| #define HAVE_STDDEF_H 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_FLOAT_INT 8
| #define SIZEOF_DOUBLE_INT 16
| #define SIZEOF_LONG_INT 16
| #define SIZEOF_SHORT_INT 8
| #define SIZEOF_TWO_INT 8
| #define SIZEOF_LONG_DOUBLE_INT 16
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_INT8_T 1
| #define HAVE_INT16_T 1
| #define HAVE_INT32_T 1
| #define HAVE_INT64_T 1
| #define HAVE_UINT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_UINT64_T 1
| #define SIZEOF__BOOL 1
| #define SIZEOF_FLOAT__COMPLEX 8
| #define SIZEOF_DOUBLE__COMPLEX 16
| #define SIZEOF_LONG_DOUBLE__COMPLEX 16
| #define HAVE__BOOL 1
| #define HAVE_FLOAT__COMPLEX 1
| #define HAVE_DOUBLE__COMPLEX 1
| #define HAVE_LONG_DOUBLE__COMPLEX 1
| #define MPIR_REAL4_CTYPE float
| #define MPIR_REAL8_CTYPE double
| #define MPIR_INTEGER1_CTYPE char
| #define MPIR_INTEGER2_CTYPE short
| #define MPIR_INTEGER4_CTYPE int
| #define MPIR_INTEGER8_CTYPE long
| #define SIZEOF_F77_INTEGER 4
| #define SIZEOF_F77_REAL 4
| #define SIZEOF_F77_DOUBLE_PRECISION 8
| #define HAVE_AINT_LARGER_THAN_FINT 1
| #define HAVE_FINT_IS_INT 1
| #define F77_TRUE_VALUE_SET 1
| #define F77_TRUE_VALUE 1
| #define F77_FALSE_VALUE 0
| #define SIZEOF_BOOL 1
| #define SIZEOF_COMPLEX 8
| #define SIZEOF_DOUBLECOMPLEX 16
| #define SIZEOF_LONGDOUBLECOMPLEX 16
| #define MPIR_CXX_COMPLEX_VALUE 0x4c000834
| #define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
| #define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
| #define HAVE_CXX_COMPLEX 1
| #define HAVE_ANY_INT64_T_ALIGNMENT 1
| #define HAVE_ANY_INT32_T_ALIGNMENT 1
| #define SIZEOF_MPIR_BSEND_DATA_T 88
| #define HAVE_STDLIB_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDDEF_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_SYS_SOCKET_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_ASSERT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_UIO_H 1
| #define HAVE_SETITIMER 1
| #define HAVE_ALARM 1
| #define HAVE_VSNPRINTF 1
| #define HAVE_VSPRINTF 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNCASECMP 1
| #define HAVE_SNPRINTF 1
| #define HAVE_MACRO_VA_ARGS 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_STRDUP 1
| #define HAVE_MKSTEMP 1
| #define HAVE_FDOPEN 1
| #define NEEDS_FDOPEN_DECL 1
| #define HAVE_PUTENV 1
| #define HAVE_CLOCK_GETTIME 1
| #define HAVE_CLOCK_GETRES 1
| #define HAVE_GETTIMEOFDAY 1
| #define MPIR_Pint long
| #define MPIR_Upint unsigned long
| #define MPIU_SIZE_T unsigned long
| #define HAVE_PTHREAD_H 1
| #define HAVE_PTHREAD_CLEANUP_PUSH 1
| #define HAVE_PTHREAD_MUTEX_RECURSIVE 1
| #define PTHREAD_MUTEX_ERRORCHECK_VALUE PTHREAD_MUTEX_ERRORCHECK
| #define MPIU_THREAD_PACKAGE_NAME MPIU_THREAD_PACKAGE_POSIX
| #define HAVE_SCHED_YIELD 1
| #define HAVE_YIELD 1
| #define HAVE_USLEEP 1
| #define HAVE_SLEEP 1
| #define HAVE_SELECT 1
| #define HAVE_GETPID 1
| #define HAVE_BINDPROCESSOR 1
| /* end confdefs.h.  */
| /* Define thread_policy_set to an innocuous variant, in case <limits.h> declares thread_policy_set.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define thread_policy_set innocuous_thread_policy_set
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char thread_policy_set (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef thread_policy_set
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char thread_policy_set ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_thread_policy_set || defined __stub___thread_policy_set
| choke me
| #endif
| 
| int
| main ()
| {
| return thread_policy_set ();
|   ;
|   return 0;
| }
configure:40687: result: no
configure:40979: configuring subsystem in src/openpa
configure:40979: configuring subsystem in src/mpid/ch3
configure:40979: configuring subsystem in src/mpid/common/locks
configure:40979: configuring subsystem in src/mpid/common/locks
configure:40979: configuring subsystem in src/mpi/romio
configure:40979: configuring subsystem in src/pmi/simple
configure:40979: configuring subsystem in src/pm/mpd
configure:40979: configuring subsystem in src/pm/hydra
configure:40979: configuring subsystem in src/pm/gforker
configure:40979: configuring subsystem in src/mpe2
configure:41106: checking size of OPA_ptr_t
configure:41417: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread      >&5
configure:41421: $? = 0
configure:41427: ./conftest
configure:41431: $? = 0
configure:41457: result: 8
configure:41512: checking the sizeof MPI_Offset
configure:41538: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread      >&5
configure:41541: $? = 0
configure:41565: result: 8
configure:41615: checking whether the Fortran Offset type works with Fortran77
configure:41628: xlf -c -q64 -O2 conftest.f >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:41635: $? = 0
configure:41649: result: yes
configure:42021: xlc -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.c  -lpthread      >&5
configure:42024: $? = 0
configure:42065: xlf -o conftest -q64 -O2  -lrt conftest.f  -lpthread      >&5
** conftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f.
configure:42068: $? = 0
configure:42112: xlc++ -o conftest -q64 -O2  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -lrt conftest.cpp  -lpthread      >&5
"conftest.cpp", line 2.7: 1540-0846 (W) The #line value "42107" is outside the range 1 to 32767.
configure:42115: $? = 0
configure:2324: xlf90 -o conftest -q64 -O2  -lrt conftest.f90  -lpthread      >&5
** conftest   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f90.
configure:42188: checking whether the Fortran Offset type works with Fortran90
configure:42201: xlf90 -c -q64 -O2 conftest.f90 >&5
** main   === End of Compilation 1 ===
1501-510  Compilation successful for file conftest.f90.
configure:42208: $? = 0
configure:42222: result: yes
configure:42617: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by config.status, which was
generated by GNU Autoconf 2.63.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on pls01.ccni.rpi.edu

config.status:1329: creating Makefile
config.status:1329: creating src/Makefile
config.status:1329: creating src/include/Makefile
config.status:1329: creating src/include/mpich2info.h
config.status:1329: creating mpich2-doxygen
config.status:1329: creating src/include/mpichtimer.h
config.status:1329: creating src/binding/Makefile
config.status:1329: creating src/binding/cxx/Makefile
config.status:1329: creating src/binding/cxx/mpicxx.h
config.status:1329: creating src/binding/f77/Makefile
config.status:1329: creating src/binding/f77/mpif.h
config.status:1329: creating src/binding/f77/setbotf.f
config.status:1329: creating src/binding/f90/Makefile
config.status:1329: creating src/binding/f90/mpi_sizeofs.f90
config.status:1329: creating src/packaging/Makefile
config.status:1329: creating src/packaging/pkgconfig/mpich2-ch3.pc
config.status:1329: creating src/packaging/pkgconfig/Makefile
config.status:1329: creating src/packaging/envmods/mpich2.module
config.status:1476: WARNING:  'src/packaging/envmods/mpich2.module.in' seems to ignore the --datarootdir setting
config.status:1329: creating src/packaging/envmods/Makefile
config.status:1329: creating src/env/mpixxx_opts.conf
config.status:1329: creating src/env/mpicc
config.status:1329: creating src/env/mpicc.conf
config.status:1329: creating src/env/mpicc.bash
config.status:1329: creating src/env/mpicxx
config.status:1329: creating src/env/mpicxx.conf
config.status:1329: creating src/env/mpicxx.bash
config.status:1329: creating src/env/mpif77
config.status:1329: creating src/env/mpif77.conf
config.status:1329: creating src/env/mpif77.bash
config.status:1329: creating src/env/mpif90
config.status:1329: creating src/env/mpif90.conf
config.status:1329: creating src/env/mpif90.bash
config.status:1329: creating src/env/parkill
config.status:1329: creating src/env/Makefile
config.status:1329: creating src/util/createshlib
config.status:1329: creating src/mpi/Makefile
config.status:1329: creating src/mpi/attr/Makefile
config.status:1329: creating src/mpi/coll/Makefile
config.status:1329: creating src/mpi/comm/Makefile
config.status:1329: creating src/mpi/datatype/Makefile
config.status:1329: creating src/mpi/debugger/Makefile
config.status:1329: creating src/mpi/errhan/Makefile
config.status:1329: creating src/mpi/group/Makefile
config.status:1329: creating src/mpi/init/Makefile
config.status:1329: creating src/mpi/misc/Makefile
config.status:1329: creating src/mpi/pt2pt/Makefile
config.status:1329: creating src/mpi/rma/Makefile
config.status:1329: creating src/mpi/spawn/Makefile
config.status:1329: creating src/mpi/timer/Makefile
config.status:1329: creating src/mpi/topo/Makefile
config.status:1329: creating src/mpid/Makefile
config.status:1329: creating src/mpid/common/Makefile
config.status:1329: creating src/mpid/common/datatype/Makefile
config.status:1329: creating src/mpid/common/datatype/dataloop/Makefile
config.status:1329: creating src/pm/Makefile
config.status:1329: creating src/pmi/Makefile
config.status:1329: creating src/pmi/simple/Makefile
config.status:1329: creating src/nameserv/Makefile
config.status:1329: creating src/nameserv/file/Makefile
config.status:1329: creating src/nameserv/mpd/Makefile
config.status:1329: creating src/nameserv/pmi/Makefile
config.status:1329: creating src/nameserv/test/Makefile
config.status:1329: creating src/util/Makefile
config.status:1329: creating src/util/info/Makefile
config.status:1329: creating src/util/instrm/Makefile
config.status:1329: creating src/util/thread/Makefile
config.status:1329: creating src/util/mem/Makefile
config.status:1329: creating src/util/msgs/Makefile
config.status:1329: creating src/util/param/Makefile
config.status:1329: creating src/util/dbg/Makefile
config.status:1329: creating src/util/dbg/getfuncstack
config.status:1329: creating src/util/osserv/Makefile
config.status:1329: creating src/util/procmap/Makefile
config.status:1329: creating src/util/other/Makefile
config.status:1329: creating src/include/mpi.h
config.status:1329: creating test/Makefile
config.status:1329: creating test/util/Makefile
config.status:1329: creating test/basic/Makefile
config.status:1329: creating test/commands/Makefile
config.status:1329: creating test/commands/cmdtests
config.status:1329: creating test/mpid/Makefile
config.status:1329: creating test/mpid/ch3/Makefile
config.status:1329: creating test/util/timer/Makefile
config.status:1329: creating examples/Makefile
config.status:1329: creating examples/f77/Makefile
config.status:1329: creating examples/f90/Makefile
config.status:1329: creating examples/cxx/Makefile
config.status:1329: creating src/util/logging/Makefile
config.status:1329: creating src/util/logging/common/Makefile
config.status:1329: creating doc/Makefile
config.status:1329: creating doc/mansrc/Makefile
config.status:1329: creating doc/mansrc/createhtmlindex
config.status:1329: creating doc/refman/Makefile
config.status:1329: creating doc/installguide/Makefile
config.status:1329: creating doc/userguide/Makefile
config.status:1329: creating doc/logging/Makefile
config.status:1329: creating doc/design/Makefile
config.status:1329: creating doc/smpd/Makefile
config.status:1329: creating doc/windev/Makefile
config.status:1329: creating src/include/mpichconf.h
config.status:1563: executing default-1 commands
config.status:1563: executing default-2 commands
config.status:1563: executing default-3 commands
config.status:1563: executing default-4 commands
config.status:1563: executing default-5 commands
config.status:1563: executing default-6 commands
config.status:1563: executing default-7 commands
config.status:1563: executing default-8 commands
config.status:1563: executing default-9 commands
config.status:1563: executing default-10 commands
config.status:1563: executing default-11 commands
config.status:1563: executing default-12 commands
config.status:1563: executing default-13 commands
configure:44102: === configuring in test/mpi (/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/test/mpi)
configure:44205: running /bin/sh ./configure --disable-option-checking '--prefix=/gpfs/small/STED/shared/mpich2/pwr5'  'OBJECT_MODE=64' 'CC=xlc' 'CXX=xlc++' 'FC=xlf' 'F90=xlf90' 'CFLAGS=-q64' 'CXXFLAGS=-q64' 'FFLAGS=-q64' 'F90FLAGS=-q64' 'AR=ar -X64' --cache-file=/dev/null --srcdir=.

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_c_bigendian=yes
ac_cv_c_compiler_gnu=no
ac_cv_c_const=yes
ac_cv_c_inline=inline
ac_cv_c_int16_t=yes
ac_cv_c_int32_t=yes
ac_cv_c_int64_t=yes
ac_cv_c_int8_t=yes
ac_cv_c_restrict=__restrict
ac_cv_c_uint16_t=yes
ac_cv_c_uint32_t=yes
ac_cv_c_uint64_t=yes
ac_cv_c_uint8_t=yes
ac_cv_c_volatile=yes
ac_cv_cxx_bool=yes
ac_cv_cxx_compiler_gnu=no
ac_cv_cxx_exceptions=yes
ac_cv_cxx_namespace_std=yes
ac_cv_cxx_namespaces=yes
ac_cv_env_CCC_set=''
ac_cv_env_CCC_value=''
ac_cv_env_CC_set=set
ac_cv_env_CC_value=xlc
ac_cv_env_CFLAGS_set=set
ac_cv_env_CFLAGS_value=-q64
ac_cv_env_CPPFLAGS_set=''
ac_cv_env_CPPFLAGS_value=''
ac_cv_env_CPP_set=''
ac_cv_env_CPP_value=''
ac_cv_env_CXXCPP_set=''
ac_cv_env_CXXCPP_value=''
ac_cv_env_CXXFLAGS_set=set
ac_cv_env_CXXFLAGS_value=-q64
ac_cv_env_CXX_set=set
ac_cv_env_CXX_value=xlc++
ac_cv_env_F77_set=''
ac_cv_env_F77_value=''
ac_cv_env_F90FLAGS_set=set
ac_cv_env_F90FLAGS_value=-q64
ac_cv_env_F90_set=set
ac_cv_env_F90_value=xlf90
ac_cv_env_FFLAGS_set=set
ac_cv_env_FFLAGS_value=-q64
ac_cv_env_LDFLAGS_set=''
ac_cv_env_LDFLAGS_value=''
ac_cv_env_LIBS_set=''
ac_cv_env_LIBS_value=''
ac_cv_env_MPICH2LIB_CFLAGS_set=''
ac_cv_env_MPICH2LIB_CFLAGS_value=''
ac_cv_env_MPICH2LIB_CXXFLAGS_set=''
ac_cv_env_MPICH2LIB_CXXFLAGS_value=''
ac_cv_env_MPICH2LIB_F90FLAGS_set=''
ac_cv_env_MPICH2LIB_F90FLAGS_value=''
ac_cv_env_MPICH2LIB_FFLAGS_set=''
ac_cv_env_MPICH2LIB_FFLAGS_value=''
ac_cv_env_build_alias_set=''
ac_cv_env_build_alias_value=''
ac_cv_env_host_alias_set=''
ac_cv_env_host_alias_value=''
ac_cv_env_target_alias_set=''
ac_cv_env_target_alias_value=''
ac_cv_f77_compiler_gnu=no
ac_cv_f77_libs=' -lxlf90 -L/usr/lpp/xlf/lib -lxlopt -lxlf -lxlomp_ser -lm'
ac_cv_f90_compiler_gnu=no
ac_cv_func_alarm=yes
ac_cv_func_alloca_works=yes
ac_cv_func_bindprocessor=yes
ac_cv_func_clock_getres=yes
ac_cv_func_clock_gettime=yes
ac_cv_func_fdopen=yes
ac_cv_func_gethrtime=no
ac_cv_func_getpid=yes
ac_cv_func_gettimeofday=yes
ac_cv_func_mkstemp=yes
ac_cv_func_pthread_cleanup_push=yes
ac_cv_func_pthread_key_create=yes
ac_cv_func_pthread_yield=no
ac_cv_func_putenv=yes
ac_cv_func_sched_getaffinity=no
ac_cv_func_sched_setaffinity=no
ac_cv_func_sched_yield=yes
ac_cv_func_select=yes
ac_cv_func_setitimer=yes
ac_cv_func_sleep=yes
ac_cv_func_snprintf=yes
ac_cv_func_strdup=yes
ac_cv_func_strerror=yes
ac_cv_func_strncasecmp=yes
ac_cv_func_thread_policy_set=no
ac_cv_func_usleep=yes
ac_cv_func_vsnprintf=yes
ac_cv_func_vsprintf=yes
ac_cv_func_yield=yes
ac_cv_header_assert_h=yes
ac_cv_header_complex=yes
ac_cv_header_endian_h=no
ac_cv_header_errno_h=yes
ac_cv_header_inttypes_h=yes
ac_cv_header_limits_h=yes
ac_cv_header_memcheck_h=no
ac_cv_header_pthread_h=yes
ac_cv_header_stdarg_h=yes
ac_cv_header_stdc=no
ac_cv_header_stddef_h=yes
ac_cv_header_stdint_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_sys_bitypes_h=no
ac_cv_header_sys_param_h=yes
ac_cv_header_sys_socket_h=yes
ac_cv_header_sys_time_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_sys_uio_h=yes
ac_cv_header_unistd_h=yes
ac_cv_header_valgrind_h=no
ac_cv_header_valgrind_memcheck_h=no
ac_cv_header_valgrind_valgrind_h=no
ac_cv_lib_pthread_pthread_key_create=yes
ac_cv_lib_rt_clock_gettime=yes
ac_cv_objext=o
ac_cv_path_BASH_SHELL=/usr/bin/bash
ac_cv_path_DOCTEXT=false
ac_cv_path_FGREP=/usr/bin/fgrep
ac_cv_path_PERL=/usr/bin/perl
ac_cv_prog_AR='ar -X64'
ac_cv_prog_CPP='xlc -E'
ac_cv_prog_CXX=xlc++
ac_cv_prog_CXXCPP='xlc++ -E'
ac_cv_prog_GCC=gcc
ac_cv_prog_KILLALL=killall
ac_cv_prog_MAKE=make
ac_cv_prog_RANLIB=ranlib
ac_cv_prog_ac_ct_CC=xlc
ac_cv_prog_cc_c89=''
ac_cv_prog_cc_cross=''
ac_cv_prog_cc_g=yes
ac_cv_prog_cc_works=yes
ac_cv_prog_cxx_cross=''
ac_cv_prog_cxx_g=yes
ac_cv_prog_cxx_works=yes
ac_cv_prog_f77_cross=''
ac_cv_prog_f77_g=yes
ac_cv_prog_f77_v=-v
ac_cv_prog_f77_works=yes
ac_cv_prog_f90_cross=no
ac_cv_prog_f90_g=yes
ac_cv_prog_f90_works=yes
ac_cv_prog_install_breaks_libs=no
ac_cv_sizeof_Complex=8
ac_cv_sizeof_DoubleComplex=16
ac_cv_sizeof_LongDoubleComplex=16
ac_cv_sizeof_MPIR_Bsend_data_t=88
ac_cv_sizeof_MPI_Offset=8
ac_cv_sizeof_OPA_ptr_t=8
ac_cv_sizeof__Bool=1
ac_cv_sizeof_bool=1
ac_cv_sizeof_char=1
ac_cv_sizeof_double=8
ac_cv_sizeof_double__Complex=16
ac_cv_sizeof_double_int=16
ac_cv_sizeof_float=4
ac_cv_sizeof_float__Complex=8
ac_cv_sizeof_float_int=8
ac_cv_sizeof_int=4
ac_cv_sizeof_long=8
ac_cv_sizeof_long_double=8
ac_cv_sizeof_long_double__Complex=16
ac_cv_sizeof_long_double_int=16
ac_cv_sizeof_long_int=16
ac_cv_sizeof_long_long=8
ac_cv_sizeof_short=2
ac_cv_sizeof_short_int=8
ac_cv_sizeof_two_int=8
ac_cv_sizeof_unsigned_char=1
ac_cv_sizeof_unsigned_int=4
ac_cv_sizeof_unsigned_long=8
ac_cv_sizeof_unsigned_long_long=8
ac_cv_sizeof_unsigned_short=2
ac_cv_sizeof_void_p=8
ac_cv_sizeof_wchar_t=4
ac_cv_type__Bool=yes
ac_cv_type_double__Complex=yes
ac_cv_type_float__Complex=yes
ac_cv_type_long_double__Complex=yes
ac_cv_type_size_t=yes
ac_cv_working_alloca_h=yes
pac_cv_attr_weak=yes
pac_cv_attr_weak_import=yes
pac_cv_c_char_p_is_byte=yes
pac_cv_c_double_alignment_exception=no
pac_cv_c_double_pos_align=yes
pac_cv_c_fp_align_nr=16
pac_cv_c_llint_pos_align=no
pac_cv_c_max_double_fp_align=eight
pac_cv_c_max_fp_align=sixteen
pac_cv_c_max_integer_align=eight
pac_cv_c_max_longdouble_fp_align=sixteen
pac_cv_c_struct_align_nr=8
pac_cv_cc_has___func__=yes
pac_cv_cxx_builds_exe=yes
pac_cv_cxx_compiles_string=yes
pac_cv_cxx_has_iostream=yes
pac_cv_cxx_has_math=no
pac_cv_f77_flibs_valid=yes
pac_cv_f77_sizeof_double_precision=8
pac_cv_f77_sizeof_integer=4
pac_cv_f77_sizeof_real=4
pac_cv_f90_accepts_F90=yes
pac_cv_f90_and_f77=yes
pac_cv_f90_ext=f90
pac_cv_f90_ext_f90=yes
pac_cv_f90_module_case=lower
pac_cv_f90_module_ext=mod
pac_cv_f90_module_incflag=-I
pac_cv_f90_vendor=ibm
pac_cv_fort90_real8=yes
pac_cv_fort_accepts_F=yes
pac_cv_fort_integer16=yes
pac_cv_fort_integer1=yes
pac_cv_fort_integer2=yes
pac_cv_fort_integer4=yes
pac_cv_fort_integer8=yes
pac_cv_fort_real16=yes
pac_cv_fort_real4=yes
pac_cv_fort_real8=yes
pac_cv_func___va_copy=no
pac_cv_func_decl_fdopen=yes
pac_cv_func_decl_mkstemp=no
pac_cv_func_decl_putenv=no
pac_cv_func_decl_snprintf=no
pac_cv_func_decl_strdup=no
pac_cv_func_decl_vsnprintf=no
pac_cv_func_va_copy=no
pac_cv_has_pthread_mutex_errorcheck=yes
pac_cv_has_pthread_mutex_errorcheck_np=no
pac_cv_has_pthread_mutex_recursive=yes
pac_cv_has_pthread_mutex_recursive_np=no
pac_cv_have__func__=yes
pac_cv_have__function__=yes
pac_cv_have_cap__func__=no
pac_cv_have_long_double=yes
pac_cv_have_long_long=yes
pac_cv_int32_t_alignment=no
pac_cv_int64_t_alignment=no
pac_cv_mkdir_p=yes
pac_cv_my_conf_dir=/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1
pac_cv_pointers_have_int_alignment=yes
pac_cv_posix_clock_realtime=yes
pac_cv_prog_TESTCPP='xlc -E'
pac_cv_prog_c_multiple_weak_symbols=yes
pac_cv_prog_c_unaligned_doubles=yes
pac_cv_prog_c_weak_symbols='pragma weak'
pac_cv_prog_f77_and_c_stdio_libs=none
pac_cv_prog_f77_exclaim_comments=yes
pac_cv_prog_f77_has_incdir=-I
pac_cv_prog_f77_library_dir_flag=-L
pac_cv_prog_f77_name_mangle=lower
pac_cv_prog_f77_true_false_value='1 0'
pac_cv_prog_f90_and_c_stdio_libs=none
pac_cv_prog_f90_cross=no
pac_cv_prog_f90_int_kind_16=8
pac_cv_prog_f90_works=yes
pac_cv_prog_make_allows_comments=yes
pac_cv_prog_make_found_clock_skew=no
pac_cv_prog_make_include=yes
pac_cv_prog_make_set_cflags=yes
pac_cv_prog_make_vpath=VPATH
pac_cv_sizeof_mpi_status=20
pac_cv_struct_timespec_defined=yes
pac_cv_test_stdcall=''

## ----------------- ##
## Output variables. ##
## ----------------- ##

ABIVERSION='1:2'
ADDRESS_KIND='8'
ALLOCA=''
AR='ar -X64'
BASH_SHELL='/usr/bin/bash'
BSEND_OVERHEAD='88'
BUILD_BASH_SCRIPTS='yes'
BUILD_DLLS='no'
BUILD_TVDLL='no'
CC='xlc'
CC_SHL='true'
CC_SHL_DBG=''
CFLAGS='-q64 -O2'
CONFIGURE_ARGS_CLEAN='--prefix=/gpfs/small/STED/shared/mpich2/pwr5 OBJECT_MODE=64 CC=xlc CXX=xlc++ FC=xlf F90=xlf90 CFLAGS=-q64 CXXFLAGS=-q64 FFLAGS=-q64 F90FLAGS=-q64 AR=ar -X64'
CONFIGURE_ARGUMENTS=' '\''--prefix=/gpfs/small/STED/shared/mpich2/pwr5'\'' '\''OBJECT_MODE=64'\'' '\''CC=xlc'\'' '\''CXX=xlc++'\'' '\''FC=xlf'\'' '\''F90=xlf90'\'' '\''CFLAGS=-q64'\'' '\''CXXFLAGS=-q64'\'' '\''FFLAGS=-q64'\'' '\''F90FLAGS=-q64'\'' '\''AR=ar -X64'\'''
CPP='xlc -E'
CPPFLAGS=' -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/openpa/src -DUSE_PROCESS_LOCKS  -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/ch3/include -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/ch3/include -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/common/datatype -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/common/datatype -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/common/locks -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/common/locks -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/ch3/channels/nemesis/include -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/ch3/channels/nemesis/include -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/ch3/channels/nemesis/nemesis/include -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/ch3/channels/nemesis/nemesis/include -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/ch3/channels/nemesis/nemesis/utils/monitor -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/ch3/channels/nemesis/nemesis/utils/monitor -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/common/locks -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/mpid/common/locks -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/util/wrappers -I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src/util/wrappers'
CREATESHLIB='false'
CXX='xlc++'
CXXCPP='xlc++ -E'
CXXFLAGS='-q64 -O2'
CXX_DEFS=' -DHAVE_CXX_IOSTREAM -DHAVE_NAMESPACE_STD'
CXX_LINKPATH_SHL=''
CXX_SHL='false'
C_LINKPATH_SHL=''
C_LINK_SHL='true'
C_LINK_SHL_DBG=''
DBG_SHLIB_TYPE=''
DEFS='-DHAVE_CONFIG_H'
DEVICE='ch3:nemesis'
DEVICE_ARGS=''
DEVICE_NAME='ch3'
DLLIMPORT=''
DOCTEXT='false'
DOCTEXTSTYLE=''
ECHO_C='\c'
ECHO_N=''
ECHO_T=''
EGREP=''
ENABLE_SHLIB='none'
EXEEXT=''
EXTERNAL_SRC_DIRS=' src/openpa'
EXTRA_STATUS_DECL=''
F77='xlf'
F77CPP=''
F77_COMPLEX16='1275072554'
F77_COMPLEX32='MPI_DATATYPE_NULL'
F77_COMPLEX8='1275070504'
F77_INCDIR='-I'
F77_INTEGER16='MPI_DATATYPE_NULL'
F77_INTEGER1='1275068717'
F77_INTEGER2='1275068975'
F77_INTEGER4='1275069488'
F77_INTEGER8='1275070513'
F77_IN_C_LIBS=''
F77_LIBDIR_LEADER='-L'
F77_NAME_MANGLE='F77_NAME_LOWER'
F77_OTHER_LIBS=''
F77_REAL16='MPI_DATATYPE_NULL'
F77_REAL4='1275069479'
F77_REAL8='1275070505'
F90='xlf90'
F90CPP=''
F90EXT='f90'
F90FLAGS='-q64 -O2'
F90INC='-I'
F90INCFLAG='-I'
F90MODEXT='mod'
F90MODINCFLAG='-I'
F90MODINCSPEC=''
F90_LINKPATH_SHL=''
F90_OTHER_LIBS=''
F90_SHL=''
F90_WORK_FILES_ARG=''
FC='xlf'
FC_LINKPATH_SHL=''
FC_SHL='false'
FFLAGS='-q64 -O2'
FGREP='/usr/bin/fgrep'
FILE=''
FINCLUDES='-I/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1/src'
FLIBS=' -lxlf90 -L/usr/lpp/xlf/lib -lxlopt -lxlf -lxlomp_ser -lm'
FORTRAN_BINDING='1'
FORTRAN_MPI_OFFSET='integer*8'
FWRAPNAME='fmpich'
GCC='gcc'
GNUCXX_MINORVERSION='0'
GNUCXX_VERSION='0'
GREP=''
HAVE_CXX_EXCEPTIONS='1'
HAVE_ROMIO='#include "mpio.h"'
INCLUDE_MPICXX_H='#include "mpicxx.h"'
INCLUDE_MPIDDEFS_H='/* ... no device specific definitions ... */'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
KILLALL='killall'
LDFLAGS=' -lrt'
LIBOBJS=''
LIBS=' -lpthread     '
LIBTOOL=''
LTLIBOBJS=''
MAKE='make'
MAKE_DEPEND_C='gcc -MM'
MANY_PM='no'
MKDIR_P='mkdir -p'
MPIBASEMODNAME='mpi_base'
MPICC='$(bindir)/mpicc'
MPICH2LIB_CFLAGS=''
MPICH2LIB_CXXFLAGS=''
MPICH2LIB_F90FLAGS=''
MPICH2LIB_FFLAGS=''
MPICH2_NUMVERSION='10201300'
MPICH2_VERSION='1.2.1'
MPICH_TIMER_KIND='USE_CLOCK_GETTIME'
MPICONSTMODNAME='mpi_constants'
MPICXX='$(bindir)/mpicxx'
MPICXXLIBNAME='mpichcxx'
MPID_TIMER_TYPE='struct timespec'
MPIF77='$(bindir)/mpif77'
MPIF90='$(bindir)/mpif90'
MPIFLIBNAME='mpich'
MPIFPMPI=',PMPI_WTIME,PMPI_WTICK'
MPILIBNAME='mpich'
MPIMODNAME='mpi'
MPIR_CXX_BOOL='0x4c000133'
MPIR_CXX_COMPLEX='0x4c000834'
MPIR_CXX_DOUBLE_COMPLEX='0x4c001035'
MPIR_CXX_LONG_DOUBLE_COMPLEX='0x4c001036'
MPISIZEOFMODNAME='mpi_sizeofs'
MPIU_DLL_SPEC_DEF='#define MPIU_DLL_SPEC'
MPIU_THREAD_LIB_NAME='mpich'
MPI_2COMPLEX='1275072548'
MPI_2DOUBLE_COMPLEX='1275076645'
MPI_2DOUBLE_PRECISION='1275072547'
MPI_2INT='0x4c000816'
MPI_2INTEGER='1275070496'
MPI_2REAL='1275070497'
MPI_AINT='long'
MPI_AINT_DATATYPE='0x4c000843'
MPI_AINT_FMT_DEC_SPEC='%ld'
MPI_AINT_FMT_HEX_SPEC='%lx'
MPI_BYTE='0x4c00010d'
MPI_CHAR='0x4c000101'
MPI_CHARACTER='1275068698'
MPI_COMPLEX16='0x4c00102a'
MPI_COMPLEX32='MPI_DATATYPE_NULL'
MPI_COMPLEX8='0x4c000828'
MPI_COMPLEX='1275070494'
MPI_C_BOOL='0x4c00013f'
MPI_C_DOUBLE_COMPLEX='0x4c001041'
MPI_C_FLOAT_COMPLEX='0x4c000840'
MPI_C_LONG_DOUBLE_COMPLEX='0x4c001042'
MPI_DOUBLE='0x4c00080b'
MPI_DOUBLE_COMPLEX='1275072546'
MPI_DOUBLE_INT='0x8c000001'
MPI_DOUBLE_PRECISION='1275070495'
MPI_F77_2INT='1275070486'
MPI_F77_AINT='1275070531'
MPI_F77_BYTE='1275068685'
MPI_F77_CHAR='1275068673'
MPI_F77_C_BOOL='1275068735'
MPI_F77_C_COMPLEX='1275070528'
MPI_F77_C_DOUBLE_COMPLEX='1275072577'
MPI_F77_C_FLOAT_COMPLEX='1275070528'
MPI_F77_C_LONG_DOUBLE_COMPLEX='1275072578'
MPI_F77_DOUBLE='1275070475'
MPI_F77_DOUBLE_INT='-1946157055'
MPI_F77_FLOAT='1275069450'
MPI_F77_FLOAT_INT='-1946157056'
MPI_F77_INT16_T='1275068984'
MPI_F77_INT32_T='1275069497'
MPI_F77_INT64_T='1275070522'
MPI_F77_INT8_T='1275068727'
MPI_F77_INT='1275069445'
MPI_F77_LB='1275068432'
MPI_F77_LONG='1275070471'
MPI_F77_LONG_DOUBLE='1275070476'
MPI_F77_LONG_DOUBLE_INT='-1946157052'
MPI_F77_LONG_INT='-1946157054'
MPI_F77_LONG_LONG='1275070473'
MPI_F77_LONG_LONG_INT='1275070473'
MPI_F77_OFFSET='1275070532'
MPI_F77_PACKED='1275068687'
MPI_F77_SHORT='1275068931'
MPI_F77_SHORT_INT='-1946157053'
MPI_F77_SIGNED_CHAR='1275068696'
MPI_F77_UB='1275068433'
MPI_F77_UINT16_T='1275068988'
MPI_F77_UINT32_T='1275069501'
MPI_F77_UINT64_T='1275070526'
MPI_F77_UINT8_T='1275068731'
MPI_F77_UNSIGNED='1275069446'
MPI_F77_UNSIGNED_CHAR='1275068674'
MPI_F77_UNSIGNED_LONG='1275070472'
MPI_F77_UNSIGNED_LONG_LONG='1275070489'
MPI_F77_UNSIGNED_SHORT='1275068932'
MPI_F77_WCHAR='1275069454'
MPI_FINT='int'
MPI_FLOAT='0x4c00040a'
MPI_FLOAT_INT='0x8c000000'
MPI_INT16_T='0x4c000238'
MPI_INT32_T='0x4c000439'
MPI_INT64_T='0x4c00083a'
MPI_INT8_T='0x4c000137'
MPI_INT='0x4c000405'
MPI_INTEGER16='MPI_DATATYPE_NULL'
MPI_INTEGER1='0x4c00012d'
MPI_INTEGER2='0x4c00022f'
MPI_INTEGER4='0x4c000430'
MPI_INTEGER8='0x4c000831'
MPI_INTEGER='1275069467'
MPI_LB='0x4c000010'
MPI_LOGICAL='1275069469'
MPI_LONG='0x4c000807'
MPI_LONG_DOUBLE='0x4c00080c'
MPI_LONG_DOUBLE_INT='0x8c000004'
MPI_LONG_INT='0x8c000002'
MPI_LONG_LONG='0x4c000809'
MPI_MAX_PROCESSOR_NAME='128'
MPI_OFFSET='long long'
MPI_OFFSET_DATATYPE='0x4c000844'
MPI_OFFSET_TYPEDEF='typedef long long MPI_Offset;'
MPI_PACKED='0x4c00010f'
MPI_REAL16='MPI_DATATYPE_NULL'
MPI_REAL4='0x4c000427'
MPI_REAL8='0x4c000829'
MPI_REAL='1275069468'
MPI_SHORT='0x4c000203'
MPI_SHORT_INT='0x8c000003'
MPI_SIGNED_CHAR='0x4c000118'
MPI_STATUS_SIZE='5'
MPI_UB='0x4c000011'
MPI_UINT16_T='0x4c00023c'
MPI_UINT32_T='0x4c00043d'
MPI_UINT64_T='0x4c00083e'
MPI_UINT8_T='0x4c00013b'
MPI_UNSIGNED_CHAR='0x4c000102'
MPI_UNSIGNED_INT='0x4c000406'
MPI_UNSIGNED_LONG='0x4c000808'
MPI_UNSIGNED_LONG_LONG='0x4c000819'
MPI_UNSIGNED_SHORT='0x4c000204'
MPI_WCHAR='0x4c00040e'
NEEDSPLIB='no'
NO_WEAK_SYM=''
NO_WEAK_SYM_TARGET='build_proflib'
OBJEXT='o'
OFFSET_KIND='8'
PACKAGE_BUGREPORT=''
PACKAGE_NAME=''
PACKAGE_STRING=''
PACKAGE_TARNAME=''
PACKAGE_VERSION=''
PATH_SEPARATOR=':'
PERL='/usr/bin/perl'
PMPIFLIBNAME='pmpich'
PMPILIBNAME='pmpich'
PROFILE_DEF_MPI=''
RANLIB='ranlib'
RANLIB_AFTER_INSTALL='no'
RELEASE_DATE='Unknown, built on Sun Dec 13 17:17:40 EST 2009'
REQD=''
REQI1=''
REQI2=''
REQI8=''
SET_CFLAGS='CFLAGS='
SET_MAKE='MAKE=make'
SHELL='/bin/sh'
SHLIB_EXT='unknown'
SHLIB_FROM_LO='no'
SHLIB_INSTALL='$(INSTALL_PROGRAM)'
SIZEOF_F90_CHARACTER='1'
SIZEOF_F90_DOUBLE_PRECISION='8'
SIZEOF_F90_INTEGER='4'
SIZEOF_F90_REAL='4'
SIZEOF_MPI_STATUS='20'
TESTCPP='xlc -E'
VPATH='VPATH=.:${srcdir}'
WRAPPER_CFLAGS='-q64'
WRAPPER_CXXFLAGS='-q64'
WRAPPER_F90FLAGS='-q64'
WRAPPER_FFLAGS='-q64'
WRAPPER_LDFLAGS=' -lrt '
XARGS_NODATA_OPT=''
ac_ct_CC='xlc'
ac_ct_CXX=''
ac_ct_F77=''
ac_ct_F90=''
bindings=' f77 f90 cxx'
bindings_dirs=' src/binding/f77 src/binding/f90 src/binding/cxx'
bindir='${exec_prefix}/bin'
build_alias=''
datadir='${datarootdir}'
datarootdir='${prefix}/share'
debugger_dir=''
device_name='ch3'
docdir='${datarootdir}/doc/${PACKAGE}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host_alias=''
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
logging_dir=''
logging_name='none'
logging_subdirs=''
mandir='${datarootdir}/man'
master_top_builddir='/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1'
master_top_srcdir='/gpfs/small/STED/home/STEDsuny/src/mpich/mpich2-1.2.1'
modincdir='${prefix}/include'
mpe_dir='mpe2'
nameserv_name='mpd'
oldincludedir='/usr/include'
other_install_dirs=' src/openpa src/pm/mpd src/mpe2'
other_pm_names=' hydra gforker'
pac_prog=''
pdfdir='${docdir}'
pm_name='mpd'
pmi_name='simple'
prefix='/gpfs/small/STED/shared/mpich2/pwr5'
program_transform_name='s,x,x,'
psdir='${docdir}'
romio_dir='romio'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
subdirs=' test/mpi'
subsystems='src/openpa  src/mpid/ch3 src/mpid/common/locks  src/mpid/common/locks src/mpi/romio src/pmi/simple src/pm/mpd src/pm/hydra src/pm/gforker src/mpe2  src/binding/f90'
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

#define PACKAGE_NAME ""
#define PACKAGE_TARNAME ""
#define PACKAGE_VERSION ""
#define PACKAGE_STRING ""
#define PACKAGE_BUGREPORT ""
#define USE_SMP_COLLECTIVES 1
#define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL
#define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL
#define USE_LOGGING MPID_LOGGING_NONE
#define HAVE_RUNTIME_THREADCHECK 1
#define MPICH_THREAD_LEVEL MPI_THREAD_MULTIPLE
#define USE_THREAD_IMPL MPICH_THREAD_IMPL_GLOBAL_MUTEX
#define MPIU_THREAD_GRANULARITY MPIU_THREAD_GRANULARITY_GLOBAL
#define MPIU_HANDLE_ALLOCATION_METHOD MPIU_HANDLE_ALLOCATION_MUTEX
#define MPIU_THREAD_REFCOUNT MPIU_REFCOUNT_NONE
#define HAVE_ROMIO 1
#define HAVE__FUNC__ /**/
#define HAVE__FUNCTION__ /**/
#define HAVE_PRAGMA_WEAK 1
#define USE_WEAK_SYMBOLS 1
#define HAVE_MULTIPLE_PRAGMA_WEAK 1
#define HAVE_LONG_LONG 1
#define F77_NAME_LOWER 1
#define STDCALL 
#define HAVE_FORTRAN_BINDING 1
#define HAVE_CXX_EXCEPTIONS /**/
#define HAVE_NAMESPACES /**/
#define HAVE_NAMESPACE_STD /**/
#define HAVE_CXX_BINDING 1
#define HAVE_NAMEPUB_SERVICE 1
#define restrict __restrict
#define HAVE_LONG_DOUBLE 1
#define HAVE_LONG_LONG_INT 1
#define HAVE_MAX_INTEGER_ALIGNMENT 8
#define HAVE_MAX_STRUCT_ALIGNMENT 8
#define HAVE_MAX_FP_ALIGNMENT 16
#define HAVE_MAX_DOUBLE_FP_ALIGNMENT 8
#define HAVE_MAX_LONG_DOUBLE_FP_ALIGNMENT 16
#define HAVE_DOUBLE_POS_ALIGNMENT 1
#define SIZEOF_CHAR 1
#define SIZEOF_UNSIGNED_CHAR 1
#define SIZEOF_SHORT 2
#define SIZEOF_UNSIGNED_SHORT 2
#define SIZEOF_INT 4
#define SIZEOF_UNSIGNED_INT 4
#define SIZEOF_LONG 8
#define SIZEOF_UNSIGNED_LONG 8
#define SIZEOF_LONG_LONG 8
#define SIZEOF_UNSIGNED_LONG_LONG 8
#define SIZEOF_FLOAT 4
#define SIZEOF_DOUBLE 8
#define SIZEOF_LONG_DOUBLE 8
#define SIZEOF_VOID_P 8
#define HAVE_STDDEF_H 1
#define SIZEOF_WCHAR_T 4
#define SIZEOF_FLOAT_INT 8
#define SIZEOF_DOUBLE_INT 16
#define SIZEOF_LONG_INT 16
#define SIZEOF_SHORT_INT 8
#define SIZEOF_TWO_INT 8
#define SIZEOF_LONG_DOUBLE_INT 16
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_INT8_T 1
#define HAVE_INT16_T 1
#define HAVE_INT32_T 1
#define HAVE_INT64_T 1
#define HAVE_UINT8_T 1
#define HAVE_UINT16_T 1
#define HAVE_UINT32_T 1
#define HAVE_UINT64_T 1
#define SIZEOF__BOOL 1
#define SIZEOF_FLOAT__COMPLEX 8
#define SIZEOF_DOUBLE__COMPLEX 16
#define SIZEOF_LONG_DOUBLE__COMPLEX 16
#define HAVE__BOOL 1
#define HAVE_FLOAT__COMPLEX 1
#define HAVE_DOUBLE__COMPLEX 1
#define HAVE_LONG_DOUBLE__COMPLEX 1
#define MPIR_REAL4_CTYPE float
#define MPIR_REAL8_CTYPE double
#define MPIR_INTEGER1_CTYPE char
#define MPIR_INTEGER2_CTYPE short
#define MPIR_INTEGER4_CTYPE int
#define MPIR_INTEGER8_CTYPE long
#define SIZEOF_F77_INTEGER 4
#define SIZEOF_F77_REAL 4
#define SIZEOF_F77_DOUBLE_PRECISION 8
#define HAVE_AINT_LARGER_THAN_FINT 1
#define HAVE_FINT_IS_INT 1
#define F77_TRUE_VALUE_SET 1
#define F77_TRUE_VALUE 1
#define F77_FALSE_VALUE 0
#define SIZEOF_BOOL 1
#define SIZEOF_COMPLEX 8
#define SIZEOF_DOUBLECOMPLEX 16
#define SIZEOF_LONGDOUBLECOMPLEX 16
#define MPIR_CXX_COMPLEX_VALUE 0x4c000834
#define MPIR_CXX_DOUBLE_COMPLEX_VALUE 0x4c001035
#define MPIR_CXX_LONG_DOUBLE_COMPLEX_VALUE 0x4c001036
#define HAVE_CXX_COMPLEX 1
#define HAVE_ANY_INT64_T_ALIGNMENT 1
#define HAVE_ANY_INT32_T_ALIGNMENT 1
#define SIZEOF_MPIR_BSEND_DATA_T 88
#define HAVE_STDLIB_H 1
#define HAVE_STDARG_H 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_STRING_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_LIMITS_H 1
#define HAVE_STDDEF_H 1
#define HAVE_ERRNO_H 1
#define HAVE_SYS_SOCKET_H 1
#define HAVE_SYS_TIME_H 1
#define HAVE_UNISTD_H 1
#define HAVE_ASSERT_H 1
#define HAVE_SYS_PARAM_H 1
#define HAVE_SYS_UIO_H 1
#define HAVE_SETITIMER 1
#define HAVE_ALARM 1
#define HAVE_VSNPRINTF 1
#define HAVE_VSPRINTF 1
#define HAVE_STRERROR 1
#define HAVE_STRNCASECMP 1
#define HAVE_SNPRINTF 1
#define HAVE_MACRO_VA_ARGS 1
#define HAVE_ALLOCA_H 1
#define HAVE_ALLOCA 1
#define HAVE_STRDUP 1
#define HAVE_MKSTEMP 1
#define HAVE_FDOPEN 1
#define NEEDS_FDOPEN_DECL 1
#define HAVE_PUTENV 1
#define HAVE_CLOCK_GETTIME 1
#define HAVE_CLOCK_GETRES 1
#define HAVE_GETTIMEOFDAY 1
#define MPIR_Pint long
#define MPIR_Upint unsigned long
#define MPIU_SIZE_T unsigned long
#define HAVE_PTHREAD_H 1
#define HAVE_PTHREAD_CLEANUP_PUSH 1
#define HAVE_PTHREAD_MUTEX_RECURSIVE 1
#define PTHREAD_MUTEX_ERRORCHECK_VALUE PTHREAD_MUTEX_ERRORCHECK
#define MPIU_THREAD_PACKAGE_NAME MPIU_THREAD_PACKAGE_POSIX
#define HAVE_SCHED_YIELD 1
#define HAVE_YIELD 1
#define HAVE_USLEEP 1
#define HAVE_SLEEP 1
#define HAVE_SELECT 1
#define HAVE_GETPID 1
#define HAVE_BINDPROCESSOR 1
#define SIZEOF_OPA_PTR_T 8
#define HAVE_F90_TYPE_ROUTINES 1
#define HAVE_MPICHCONF 1

configure: exit 0
