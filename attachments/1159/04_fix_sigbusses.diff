--- a/mpich2-1.3.1/src/mpid/ch3/channels/nemesis/include/mpidi_ch3_impl.h	2010-10-01 22:38:40.000000000 +0200
+++ mpich2-1.3.1/src/mpid/ch3/channels/nemesis/include/mpidi_ch3_impl.h	2011-01-05 12:04:14.998311000 +0100
@@ -182,8 +182,9 @@
     MPIDI_CH3_PktHandler_Fcn **pkt_handler;
     int num_pkt_handlers;
     
-    struct
+    union
     {
+	void *align_dummy;
         char padding[MPID_NEM_VC_NETMOD_AREA_LEN];
     } netmod_area;
     
--- a/mpich2-1.3.1/src/mpid/ch3/channels/nemesis/src/ch3_progress.c	2010-11-11 18:09:32.000000000 +0100
+++ mpich2-1.3.1/src/mpid/ch3/channels/nemesis/src/ch3_progress.c	2011-01-05 16:08:45.997128300 +0100
@@ -564,13 +564,16 @@
             {
                 MPIDI_msg_sz_t len = buflen;
                 MPIDI_CH3_Pkt_t *pkt = (MPIDI_CH3_Pkt_t *)buf;
-
+		MPIDI_CH3_Pkt_type_t type;
+		
                 MPIU_DBG_MSG(CH3_CHANNEL, VERBOSE, "received new message");
 
+		memcpy((void*)&type, (void*)&(pkt->type), sizeof(type));
+
                 /* invalid pkt data will result in unpredictable behavior */
-                MPIU_Assert(pkt->type >= 0 && pkt->type < MPIDI_NEM_PKT_END);
+                MPIU_Assert(type >= 0 && type < MPIDI_NEM_PKT_END);
 
-                mpi_errno = pktArray[pkt->type](vc, pkt, &len, &rreq);
+                mpi_errno = pktArray[type](vc, pkt, &len, &rreq);
                 if (mpi_errno) MPIU_ERR_POP(mpi_errno);
                 buflen -= len;
                 buf    += len;
--- a/mpich2-1.3.1/src/mpid/ch3/include/mpidimpl.h	2010-11-06 16:02:44.000000000 +0100
+++ mpich2-1.3.1/src/mpid/ch3/include/mpidimpl.h	2011-01-05 12:18:53.274021300 +0100
@@ -115,7 +115,11 @@
        can always allocate storage and hang it off of the end).  This 
        is necessary to allow dynamic loading of channels at MPI_Init time. */
 #define MPIDI_CH3_PG_SIZE 48
-    int32_t channel_private[MPIDI_CH3_PG_SIZE];
+    union
+    {
+	void *align_dummy;
+	int32_t channel_private[MPIDI_CH3_PG_SIZE];
+    };
 #if defined(MPIDI_CH3_PG_DECL)
     MPIDI_CH3_PG_DECL
 #endif    
@@ -768,7 +772,11 @@
 #ifndef MPIDI_CH3_VC_SIZE
 #define MPIDI_CH3_VC_SIZE 256
 #endif
-    int32_t channel_private[MPIDI_CH3_VC_SIZE];
+    union
+    {
+	void *align_dummy;
+	int32_t channel_private[MPIDI_CH3_VC_SIZE];
+    };
 # if defined(MPIDI_CH3_VC_DECL)
     MPIDI_CH3_VC_DECL
 # endif
--- a/mpich2-1.3.1/src/mpid/ch3/src/ch3u_eager.c	2010-09-08 17:21:24.000000000 +0200
+++ mpich2-1.3.1/src/mpid/ch3/src/ch3u_eager.c	2011-01-05 16:13:08.569870700 +0100
@@ -287,6 +287,7 @@
 					 MPIDI_msg_sz_t *buflen, MPID_Request **rreqp )
 {
     MPIDI_CH3_Pkt_eagershort_send_t * eagershort_pkt = &pkt->eagershort_send;
+    MPIDI_CH3_Pkt_eagershort_send_t eagershort_pkt_;
     MPID_Request * rreq;
     int found;
     int mpi_errno = MPI_SUCCESS;
@@ -307,11 +308,12 @@
     rreq = MPIDI_CH3U_Recvq_FDP_or_AEU(&eagershort_pkt->match, &found);
     MPIU_ERR_CHKANDJUMP1(!rreq, mpi_errno,MPI_ERR_OTHER, "**nomemreq", "**nomemuereq %d", MPIDI_CH3U_Recvq_count_unexp());
 
-    (rreq)->status.MPI_SOURCE = (eagershort_pkt)->match.parts.rank;
-    (rreq)->status.MPI_TAG    = (eagershort_pkt)->match.parts.tag;
-    (rreq)->status.count      = (eagershort_pkt)->data_sz;
-    (rreq)->dev.recv_data_sz  = (eagershort_pkt)->data_sz;
-    MPIDI_Request_set_seqnum((rreq), (eagershort_pkt)->seqnum);
+    memcpy((void*)&eagershort_pkt_, (void*)eagershort_pkt, sizeof(eagershort_pkt_));
+    (rreq)->status.MPI_SOURCE = eagershort_pkt_.match.parts.rank;
+    (rreq)->status.MPI_TAG    = eagershort_pkt_.match.parts.tag;
+    (rreq)->status.count      = eagershort_pkt_.data_sz;
+    (rreq)->dev.recv_data_sz  = eagershort_pkt_.data_sz;
+    MPIDI_Request_set_seqnum((rreq), eagershort_pkt_.seqnum);
     /* FIXME: Why do we set the message type? */
     MPIDI_Request_set_msg_type((rreq), MPIDI_REQUEST_EAGER_MSG);
 
@@ -563,13 +565,15 @@
  */    
 
 #define set_request_info(rreq_, pkt_, msg_type_)		\
-{								\
-    (rreq_)->status.MPI_SOURCE = (pkt_)->match.parts.rank;	\
-    (rreq_)->status.MPI_TAG = (pkt_)->match.parts.tag;		\
-    (rreq_)->status.count = (pkt_)->data_sz;			\
-    (rreq_)->dev.sender_req_id = (pkt_)->sender_req_id;		\
-    (rreq_)->dev.recv_data_sz = (pkt_)->data_sz;		\
-    MPIDI_Request_set_seqnum((rreq_), (pkt_)->seqnum);		\
+{                                                               \
+    MPIDI_CH3_Pkt_eager_send_t pkt__;				\
+    memcpy((void*)&pkt__, (void*)(pkt_), sizeof(pkt__));	\
+    (rreq_)->status.MPI_SOURCE = pkt__.match.parts.rank;	\
+    (rreq_)->status.MPI_TAG = pkt__.match.parts.tag;		\
+    (rreq_)->status.count = pkt__.data_sz;			\
+    (rreq_)->dev.sender_req_id = pkt__.sender_req_id;		\
+    (rreq_)->dev.recv_data_sz = pkt__.data_sz;		        \
+    MPIDI_Request_set_seqnum((rreq_), pkt__.seqnum);		\
     MPIDI_Request_set_msg_type((rreq_), (msg_type_));		\
 }
 
--- a/mpich2-1.3.1/src/mpid/ch3/src/ch3u_eagersync.c	2010-09-08 17:21:24.000000000 +0200
+++ mpich2-1.3.1/src/mpid/ch3/src/ch3u_eagersync.c	2011-01-05 16:12:49.521950800 +0100
@@ -200,12 +200,14 @@
 
 #define set_request_info(rreq_, pkt_, msg_type_)		\
 {								\
-    (rreq_)->status.MPI_SOURCE = (pkt_)->match.parts.rank;	\
-    (rreq_)->status.MPI_TAG = (pkt_)->match.parts.tag;		\
-    (rreq_)->status.count = (pkt_)->data_sz;			\
-    (rreq_)->dev.sender_req_id = (pkt_)->sender_req_id;		\
-    (rreq_)->dev.recv_data_sz = (pkt_)->data_sz;		\
-    MPIDI_Request_set_seqnum((rreq_), (pkt_)->seqnum);		\
+    MPIDI_CH3_Pkt_eager_send_t pkt__;                           \
+    memcpy((void*)&pkt__, (void*)(pkt_), sizeof(pkt__));	\
+    (rreq_)->status.MPI_SOURCE = pkt__.match.parts.rank;	\
+    (rreq_)->status.MPI_TAG = pkt__.match.parts.tag;		\
+    (rreq_)->status.count = pkt__.data_sz;			\
+    (rreq_)->dev.sender_req_id = pkt__.sender_req_id;		\
+    (rreq_)->dev.recv_data_sz = pkt__.data_sz;		\
+    MPIDI_Request_set_seqnum((rreq_), pkt__.seqnum);		\
     MPIDI_Request_set_msg_type((rreq_), (msg_type_));		\
 }
 
--- a/mpich2-1.3.1/src/mpid/ch3/src/ch3u_recvq.c	2010-07-28 00:54:09.000000000 +0200
+++ mpich2-1.3.1/src/mpid/ch3/src/ch3u_recvq.c	2011-01-05 16:14:50.436873900 +0100
@@ -210,8 +210,10 @@
     /* FIXME: Why doesn't this exit after it finds the first match? */
     cur_rreq = recvq_unexpected_head;
     while (cur_rreq != NULL) {
+	MPIDI_Message_match match_;
+	memcpy((void*)&match_, (void*)match, sizeof(match_));
 	if (cur_rreq->dev.sender_req_id == sreq_id &&
-	    (MATCH_WITH_NO_MASK(cur_rreq->dev.match, *match))) {
+	    (MATCH_WITH_NO_MASK(cur_rreq->dev.match, match_))) {
 	    matching_prev_rreq = prev_rreq;
 	    matching_cur_rreq = cur_rreq;
 	}
@@ -489,7 +491,10 @@
     rreq = recvq_posted_head;
 
     while (rreq != NULL) {
-	if (MATCH_WITH_LEFT_RIGHT_MASK(rreq->dev.match, *match, rreq->dev.mask)) {
+	MPIDI_Message_match match_;
+	memcpy((void*)&match_, (void*)match, sizeof(match_));
+
+	if (MATCH_WITH_LEFT_RIGHT_MASK(rreq->dev.match, match_, rreq->dev.mask)) {
 	    if (prev_rreq != NULL) {
 		prev_rreq->dev.next = rreq->dev.next;
 	    }
@@ -519,7 +524,7 @@
 	MPIDI_Request_create_rreq( rreq, mpi_errno, 
 				   found=FALSE;goto lock_exit );
         rreq->dev.recv_pending_count = 1;
-	rreq->dev.match	= *match;
+	memcpy((void*)&rreq->dev.match, (void*)match, sizeof(*match));
 	rreq->dev.next	= NULL;
 	if (recvq_unexpected_tail != NULL) {
 	    recvq_unexpected_tail->dev.next = rreq;
--- a/mpich2-1.3.1/src/mpid/common/datatype/mpid_ext32_segment.h	2010-09-01 01:55:04.000000000 +0200
+++ mpich2-1.3.1/src/mpid/common/datatype/mpid_ext32_segment.h	2011-01-06 15:00:46.865191800 +0100
@@ -88,6 +88,69 @@
 #include <netinet/in.h>
 #endif
 
+#define MEMCPY_8(dest, src)                        \
+{			                             \
+    *(((char*)(dest)) + 0) = *(((char*)(src)) + 0);  \
+}
+
+#define MEMCPY_16(dest, src)                          \
+{			                                \
+    MEMCPY_8(((char*)(dest)) + 0, ((char*)(src)) + 0);  \
+    MEMCPY_8(((char*)(dest)) + 1, ((char*)(src)) + 1);  \
+}
+
+#define MEMCPY_32(dest, src)                                  \
+{			                                        \
+    MEMCPY_16(((uint16_t*)(dest)) + 0, ((uint16_t*)(src)) + 0); \
+    MEMCPY_16(((uint16_t*)(dest)) + 1, ((uint16_t*)(src)) + 1); \
+}
+
+#define MEMCPY_64(dest, src)                                  \
+{			                                        \
+    MEMCPY_32(((uint32_t*)(dest)) + 0, ((uint32_t*)(src)) + 0); \
+    MEMCPY_32(((uint32_t*)(dest)) + 1, ((uint32_t*)(src)) + 1); \
+}
+
+#define MEMCPY_96(dest, src)                                  \
+{			                                        \
+    MEMCPY_32(((uint32_t*)(dest)) + 0, ((uint32_t*)(src)) + 0); \
+    MEMCPY_32(((uint32_t*)(dest)) + 1, ((uint32_t*)(src)) + 1); \
+    MEMCPY_32(((uint32_t*)(dest)) + 2, ((uint32_t*)(src)) + 2); \
+}
+
+#define MEMCPY_128(dest, src)				        \
+{			                                        \
+    MEMCPY_64(((uint64_t*)(dest)) + 0, ((uint64_t*)(src)) + 0); \
+    MEMCPY_64(((uint64_t*)(dest)) + 1, ((uint64_t*)(src)) + 1); \
+}
+
+#define ALIGN_SAFE_BIN_CPY(rval, lval)                        \
+{                                                             \
+    switch(sizeof(rval))				      \
+	{						      \
+	case 1:						      \
+	    MEMCPY_8(&(rval), &(lval));			      \
+	    break;					      \
+	case 2:						      \
+	    MEMCPY_16(&(rval), &(lval));		      \
+	    break;					      \
+	case 4:						      \
+	    MEMCPY_32(&(rval), &(lval));		      \
+	    break;					      \
+	case 8:						      \
+	    MEMCPY_64(&(rval), &(lval));		      \
+	    break;					      \
+	case 12:					      \
+	    MEMCPY_96(&(rval), &(lval));		      \
+	    break;					      \
+	case 16:					      \
+	    MEMCPY_128(&(rval), &(lval));		      \
+	    break;					      \
+	default:					      \
+	    memcpy(&(rval), &(lval), sizeof(rval));	      \
+	};						      \
+}
+
 #define BITSIZE_OF(type)    (sizeof(type) * CHAR_BIT)
 
 #if (MANUAL_BYTESWAPS == 1)
@@ -211,7 +274,7 @@
 #define BASIC_mixed_convert(src, dest)
 #else
 #define BASIC_convert(src, dest)               \
-        { dest = src; }
+    { ALIGN_SAFE_BIN_CPY(dest, src); }
 #define BASIC_mixed_convert(src, dest)         \
         { dest = src; }
 #endif
@@ -357,7 +420,7 @@
 }
 #else
 #define FLOAT_convert(src, dest)              \
-        { dest = src; }
+    { ALIGN_SAFE_BIN_CPY(dest, src); }
 #endif
 
 #ifdef HAVE_INT16_T
--- a/mpich2-1.3.1/test/mpi/pt2pt/pscancel.c	2007-11-02 23:50:19.000000000 +0100
+++ mpich2-1.3.1/test/mpi/pt2pt/pscancel.c	2011-01-05 11:13:02.432236700 +0100
@@ -86,7 +86,8 @@
 	if (rank == 0) {
 	    char *bsendbuf;
 	    int bsendbufsize;
-	    int bf, bs;
+	    void *bf;
+	    int bs;
 	    n = bufsizes[cs];
 	    buf = (char *)malloc( n );
 	    if (!buf) {
--- a/mpich2-1.3.1/test/mpi/pt2pt/scancel.c	2008-11-10 15:34:00.000000000 +0100
+++ mpich2-1.3.1/test/mpi/pt2pt/scancel.c	2011-01-05 11:11:22.308285000 +0100
@@ -89,7 +89,8 @@
 	if (rank == 0) {
 	    char *bsendbuf;
 	    int bsendbufsize;
-	    int bf, bs;
+	    void *bf;
+	    int bs;
 	    n = bufsizes[cs];
 	    buf = (char *)malloc( n );
 	    if (!buf) {
