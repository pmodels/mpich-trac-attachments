diff --git a/test/mpi/coll/coll6.c b/test/mpi/coll/coll6.c
index 5691357..62fbce2 100644
--- a/test/mpi/coll/coll6.c
+++ b/test/mpi/coll/coll6.c
@@ -17,21 +17,24 @@ int main( int argc, char **argv )
     int              participants;
     int              displs[MAX_PROCESSES];
     int              recv_counts[MAX_PROCESSES];
+    MPI_Comm         test_comm;
 
     MTest_Init( &argc, &argv );
     MPI_Comm_rank( MPI_COMM_WORLD, &rank );
     MPI_Comm_size( MPI_COMM_WORLD, &size );
 
     /* A maximum of MAX_PROCESSES processes can participate */
-    if ( size > MAX_PROCESSES ) participants = MAX_PROCESSES;
-    else              participants = size;
-    /* while (MAX_PROCESSES % participants) participants--; */
+    participants = ( size > MAX_PROCESSES ) ? MAX_PROCESSES : size;
+
     if (MAX_PROCESSES % participants) {
-	fprintf( stderr, "Number of processors must divide %d\n",
-		MAX_PROCESSES );
-	MPI_Abort( MPI_COMM_WORLD, 1 );
-	}
-    if ( (rank < participants) ) {
+        fprintf( stderr, "Number of processors must divide %d\n",
+                MAX_PROCESSES );
+        MPI_Abort( MPI_COMM_WORLD, 1 );
+    }
+
+    MPI_Comm_split(MPI_COMM_WORLD, rank<participants, rank, &test_comm);
+
+    if ( rank < participants ) {
 
       /* Determine what rows are my responsibility */
       int block_size = MAX_PROCESSES / participants;
@@ -41,43 +44,52 @@ int main( int argc, char **argv )
       
       /* Fill in the displacements and recv_counts */
       for (i=0; i<participants; i++) {
-	displs[i]      = i * block_size * MAX_PROCESSES;
-	recv_counts[i] = send_count;
+        displs[i]      = i * block_size * MAX_PROCESSES;
+        recv_counts[i] = send_count;
       }
 
       /* Paint my rows my color */
       for (i=begin_row; i<end_row ;i++)
-	for (j=0; j<MAX_PROCESSES; j++)
-	  table[i][j] = rank + 10;
+        for (j=0; j<MAX_PROCESSES; j++)
+          table[i][j] = rank + 10;
       
+        printf("rank %d at %d\n", rank, 13);
+
       /* Everybody gets the gathered data */
       MPI_Allgatherv(&table[begin_row][0], send_count, MPI_INT, 
-		     &table[0][0], recv_counts, displs, 
-		     MPI_INT, MPI_COMM_WORLD);
+                     &table[0][0], recv_counts, displs, 
+                     MPI_INT, test_comm);
+
+        printf("rank %d at %d\n", rank, 33);
 
       /* Everybody should have the same table now.
 
-	 The entries are:
-	 Table[i][j] = (i/block_size) + 10;
+         The entries are:
+         Table[i][j] = (i/block_size) + 10;
        */
+
       for (i=0; i<MAX_PROCESSES;i++) 
-	if ( (table[i][0] - table[i][MAX_PROCESSES-1] !=0) ) 
-	  errors++;
+        if ( (table[i][0] - table[i][MAX_PROCESSES-1] !=0) ) 
+          errors++;
       for (i=0; i<MAX_PROCESSES;i++) {
-	  for (j=0; j<MAX_PROCESSES;j++) {
-	      if (table[i][j] != (i/block_size) + 10) errors++;
-	      }
-	  }
+          for (j=0; j<MAX_PROCESSES;j++) {
+              if (table[i][j] != (i/block_size) + 10) errors++;
+              }
+          }
       if (errors) {
-	  /* Print out table if there are any errors */
-	  for (i=0; i<MAX_PROCESSES;i++) {
-	      printf("\n");
-	      for (j=0; j<MAX_PROCESSES; j++)
-		  printf("  %d",table[i][j]);
-	      }
-	  printf("\n");
-	  }
+          /* Print out table if there are any errors */
+          for (i=0; i<MAX_PROCESSES;i++) {
+              printf("\n");
+              for (j=0; j<MAX_PROCESSES; j++)
+                  printf("  %d",table[i][j]);
+              }
+          printf("\n");
+          }
     } 
+    else
+        MTestSleep(1);
+
+    MPI_Comm_free(&test_comm);
 
     MTest_Finalize( errors );
     MPI_Finalize();
