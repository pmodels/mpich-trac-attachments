From adef773c37b286d2b25364ba95710109738c898c Mon Sep 17 00:00:00 2001
From: Qi QC Zhang <keirazhang@cn.ibm.com>
Date: Sat, 29 Sep 2012 03:54:06 -0400
Subject: [PATCH] Fix coredump at MPI_Comm_split due to invalid MPI_Comm handler

Signed-off-by: Michael Blocksome <blocksom@us.ibm.com>
---
 src/include/mpierrs.h |   63 ++++++++++++++++++++++++++++++++++++++++++++++--
 src/include/mpiimpl.h |   25 ++++++++++++++----
 2 files changed, 79 insertions(+), 9 deletions(-)

diff --git a/src/include/mpierrs.h b/src/include/mpierrs.h
index 330c296..50ac0cf 100644
--- a/src/include/mpierrs.h
+++ b/src/include/mpierrs.h
@@ -332,6 +332,55 @@
             MPIU_ERR_SETANDSTMT(err_,errclass_,goto fn_fail,gmsg_);     \
         }                                                               \
     }
+#define MPIR_ERRTEST_BUILTIN_HANDLE_EXIST(handle_, bmsk_, kind_) {\
+    int index = 0, count = 0;\
+    count = sizeof(MPID_##kind_##_builtin)/sizeof(MPID_##kind_); \
+    index = (handle_) & (bmsk_);        \
+    if(index < count) is_exist = 1;     \
+}
+#define MPIR_ERRTEST_DIRECT_HANDLE_EXIST(handle_, kind_) {\
+    int index = 0, count = 0;\
+    count = sizeof(MPID_##kind_##_direct)/sizeof(MPID_##kind_); \
+    if(HANDLE_INDEX(handle_) < count) is_exist = 1;     \
+}
+#define MPIR_ERRTEST_INDIRECT_HANDLE_EXIST(handle_, kind_) {\
+    if((HANDLE_GET_MPI_KIND(handle_) == (MPID_##kind_##_mem).kind ) || \
+        (HANDLE_BLOCK(handle_) < (MPID_##kind_##_mem).indirect_size)) {\
+        is_exist = 1;   \
+    }   \
+}
+
+/* For MPI_Comm, MPI_Group, MPI_Errhandler, and MPI_Op, there are some built in objects */
+#define MPIR_ERRTEST_B_HANDLE_EXIST(handle_, kind_, bmsk_, err_, errclass_, gmsg_){\
+    int handle_kind = HANDLE_GET_KIND(handle_);               \
+    int is_exist = 0;   \
+    if (handle_kind == HANDLE_KIND_BUILTIN) {\
+    MPIR_ERRTEST_BUILTIN_HANDLE_EXIST(handle_,bmsk_, kind_);             \
+    }   \
+    else if (handle_kind == HANDLE_KIND_DIRECT)  {           \
+    MPIR_ERRTEST_DIRECT_HANDLE_EXIST(handle_,kind_);       \
+    }   \
+    else if (handle_kind == HANDLE_KIND_INDIRECT){           \
+    MPIR_ERRTEST_INDIRECT_HANDLE_EXIST(handle_,kind_);       \
+    }   \
+    if(is_exist == 0){  \
+        MPIU_ERR_SETANDSTMT(err_,errclass_,goto fn_fail,gmsg_);\
+    } \
+}
+
+#define MPIR_ERRTEST_HANDLE_EXIST(handle_, kind_,err_, errclass_, gmsg_){\
+    int handle_kind = HANDLE_GET_KIND(handle_);               \
+    int is_exist = 0;   \
+    if (handle_kind == HANDLE_KIND_DIRECT)  {           \
+        MPIR_ERRTEST_DIRECT_HANDLE_EXIST(handle_,kind_);       \
+    }   \
+    else if (handle_kind == HANDLE_KIND_INDIRECT){           \
+        MPIR_ERRTEST_INDIRECT_HANDLE_EXIST(handle_,kind_);       \
+    }   \
+    if(is_exist == 0){  \
+        MPIU_ERR_SETANDSTMT(err_,errclass_,goto fn_fail,gmsg_);\
+    } \
+}
 /* --END ERROR MACROS-- */
 
 #define MPIR_ERRTEST_OP(op,err)                                                 \
@@ -382,6 +431,7 @@
     }                                                                   \
     else {                                                              \
         MPIR_ERRTEST_VALID_HANDLE(group,MPID_GROUP,err,MPI_ERR_GROUP,"**group"); \
+        MPIR_ERRTEST_B_HANDLE_EXIST(group, Group, 0x03ffffff, err, MPI_ERR_GROUP,"**group");\
     }
 
 #define MPIR_ERRTEST_COMM(comm_, err_)					\
@@ -393,6 +443,7 @@
         else								\
         {                                                               \
             MPIR_ERRTEST_VALID_HANDLE((comm_), MPID_COMM, (err_), MPI_ERR_COMM, "**comm"); \
+            MPIR_ERRTEST_B_HANDLE_EXIST((comm_),Comm, 0x03ffffff, (err_), MPI_ERR_COMM, "**comm"); \
         }                                                               \
     }
 
@@ -417,6 +468,7 @@
         else								\
         {                                                               \
             MPIR_ERRTEST_VALID_HANDLE((request_), MPID_REQUEST, (err_), MPI_ERR_REQUEST, "**request"); \
+            MPIR_ERRTEST_HANDLE_EXIST((request_), Request, (err_), MPI_ERR_REQUEST, "**request");      \
         }                                                               \
     }
 
@@ -425,6 +477,7 @@
         if ((request_) != MPI_REQUEST_NULL)                             \
         {                                                               \
             MPIR_ERRTEST_VALID_HANDLE((request_), MPID_REQUEST, (err_), MPI_ERR_REQUEST, "**request"); \
+            MPIR_ERRTEST_HANDLE_EXIST((request_), Request, (err_), MPI_ERR_REQUEST, "**request");      \
         }                                                               \
     }
 
@@ -452,17 +505,20 @@
     else {								\
         MPIR_ERRTEST_VALID_HANDLE(errhandler_,MPID_ERRHANDLER,		\
 				  err_,MPI_ERR_ARG,"**errhandler");	\
+        MPIR_ERRTEST_B_HANDLE_EXIST((errhandler_),Errhandler,0x3,   \
+                                (err_), MPI_ERR_ARG, "**errhandler");\
     }
 
 #define MPIR_ERRTEST_INFO(info_, err_)					\
     {									\
         if ((info_) == MPI_INFO_NULL)					\
         {                                                               \
-            MPIU_ERR_SETANDSTMT(err_, MPI_ERR_ARG,goto fn_fail, "**infonull"); \
+            MPIU_ERR_SETANDSTMT(err_, MPI_ERR_INFO,goto fn_fail, "**infonull"); \
         }                                                               \
         else								\
         {                                                               \
-            MPIR_ERRTEST_VALID_HANDLE((info_), MPID_INFO, (err_), MPI_ERR_ARG, "**info"); \
+            MPIR_ERRTEST_VALID_HANDLE((info_), MPID_INFO, (err_), MPI_ERR_INFO, "**info"); \
+            MPIR_ERRTEST_HANDLE_EXIST((info_),Info, (err_), MPI_ERR_INFO, "**info");		\
         }                                                               \
     }
 
@@ -470,7 +526,8 @@
     {									\
         if ((info_) != MPI_INFO_NULL)					\
         {                                                               \
-            MPIR_ERRTEST_VALID_HANDLE((info_), MPID_INFO, (err_), MPI_ERR_ARG, "**info"); \
+            MPIR_ERRTEST_VALID_HANDLE((info_), MPID_INFO, (err_), MPI_ERR_INFO, "**info"); \
+            MPIR_ERRTEST_HANDLE_EXIST((info_),Info, (err_), MPI_ERR_INFO, "**info");	   \
         }                                                               \
     }
 
diff --git a/src/include/mpiimpl.h b/src/include/mpiimpl.h
index d98ba9f..b77117b 100644
--- a/src/include/mpiimpl.h
+++ b/src/include/mpiimpl.h
@@ -617,7 +617,8 @@ extern MPIU_Object_alloc_t MPID_Info_mem;
 /* Preallocated info objects */
 #define MPID_INFO_N_BUILTIN 2
 extern MPID_Info MPID_Info_builtin[MPID_INFO_N_BUILTIN];
-extern MPID_Info MPID_Info_direct[];
+#define MPID_INFO_PREALLOC 8
+extern MPID_Info MPID_Info_direct[MPID_INFO_PREALLOC];
 /* ------------------------------------------------------------------------- */
 
 /* ------------------------------------------------------------------------- */
@@ -681,8 +682,10 @@ typedef struct MPID_Errhandler {
 } MPID_Errhandler;
 extern MPIU_Object_alloc_t MPID_Errhandler_mem;
 /* Preallocated errhandler objects */
-extern MPID_Errhandler MPID_Errhandler_builtin[];
-extern MPID_Errhandler MPID_Errhandler_direct[];
+#define MPID_ERRHANDLER_N_BUILTIN 3
+#define MPID_ERRHANDLER_PREALLOC 8
+extern MPID_Errhandler MPID_Errhandler_builtin[MPID_ERRHANDLER_N_BUILTIN];
+extern MPID_Errhandler MPID_Errhandler_direct[MPID_ERRHANDLER_PREALLOC];
 
 /* We never reference count the builtin error handler objects, regardless of how
  * we decide to reference count the other predefined objects.  If we get to the
@@ -1087,8 +1090,9 @@ typedef struct MPID_Group {
 extern MPIU_Object_alloc_t MPID_Group_mem;
 /* Preallocated group objects */
 #define MPID_GROUP_N_BUILTIN 1
+#define MPID_GROUP_PREALLOC 8
 extern MPID_Group MPID_Group_builtin[MPID_GROUP_N_BUILTIN];
-extern MPID_Group MPID_Group_direct[];
+extern MPID_Group MPID_Group_direct[MPID_GROUP_PREALLOC];
 
 /* Object for empty group */
 extern MPID_Group * const MPID_Group_empty;
@@ -1298,8 +1302,9 @@ int MPIR_Comm_apply_hints(MPID_Comm *comm_ptr, MPID_Info *info_ptr);
    if needed in MPI_Finalize.  Having a separate version of comm_world
    avoids possible interference with User code */
 #define MPID_COMM_N_BUILTIN 3
+#define MPID_COMM_PREALLOC 8
 extern MPID_Comm MPID_Comm_builtin[MPID_COMM_N_BUILTIN];
-extern MPID_Comm MPID_Comm_direct[];
+extern MPID_Comm MPID_Comm_direct[MPID_COMM_PREALLOC];
 /* This is the handle for the internal MPI_COMM_WORLD .  The "2" at the end
    of the handle is 3-1 (e.g., the index in the builtin array) */
 #define MPIR_ICOMM_WORLD  ((MPI_Comm)0x44000002)
@@ -1492,7 +1497,15 @@ typedef struct MPID_Request {
 
 extern MPIU_Object_alloc_t MPID_Request_mem;
 /* Preallocated request objects */
-extern MPID_Request MPID_Request_direct[];
+#ifndef MPID_REQUEST_PREALLOC
+#if (MPIU_THREAD_GRANULARITY == MPIU_THREAD_GRANULARITY_GLOBAL)
+#define  MPID_REQUEST_PREALLOC 16
+#elif (MPIU_HANDLE_ALLOCATION_METHOD == MPIU_HANDLE_ALLOCATION_THREAD_LOCAL)
+#define  MPID_REQUEST_PREALLOC 512
+#endif
+#endif
+extern MPID_Request MPID_Request_direct[MPID_REQUEST_PREALLOC];
+
 
 #define MPIR_Request_add_ref( _req ) \
     do { MPIU_Object_add_ref( _req ); } while (0)
-- 
1.7.1

