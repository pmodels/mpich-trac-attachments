Index: src/mpid/ch3/channels/nemesis/nemesis/include/mpid_nem_defs.h
===================================================================
--- src/mpid/ch3/channels/nemesis/nemesis/include/mpid_nem_defs.h	(revision 3199)
+++ src/mpid/ch3/channels/nemesis/nemesis/include/mpid_nem_defs.h	(working copy)
@@ -96,7 +96,9 @@
     volatile int context_id;
     volatile int usage_cnt;
     volatile int cnt;
+#if MPID_NEM_CACHE_LINE_LEN != SIZEOF_INT
     char padding0[MPID_NEM_CACHE_LINE_LEN - sizeof(int)];
+#endif
     volatile int sig0;
     volatile int sig;
     char padding1[MPID_NEM_CACHE_LINE_LEN - 2* sizeof(int)];
Index: src/mpid/ch3/channels/nemesis/nemesis/include/mpid_nem_datatypes.h
===================================================================
--- src/mpid/ch3/channels/nemesis/nemesis/include/mpid_nem_datatypes.h	(revision 3199)
+++ src/mpid/ch3/channels/nemesis/nemesis/include/mpid_nem_datatypes.h	(working copy)
@@ -100,7 +100,7 @@
    
 */
 
-#define MPID_NEM_CELL_HEAD_LEN sizeof(double)
+#define MPID_NEM_CELL_HEAD_LEN    8 /* We use this to keep elements 64-bit aligned */
 #define MPID_NEM_CELL_PAYLOAD_LEN (MPID_NEM_CELL_LEN - MPID_NEM_CELL_HEAD_LEN)
 
 #define MPID_NEM_CALC_CELL_LEN(cellp) (MPID_NEM_CELL_HEAD_LEN + MPID_NEM_MPICH2_HEAD_LEN + MPID_NEM_CELL_DLEN (cell))
@@ -165,6 +165,7 @@
  * catch errors.  Use MPID_NEM_REL_TO_ABS and MPID_NEM_ABS_TO_REL to
  * convert between relative and absolute pointers. */
 
+/* This should always be exactly the size of a pointer */
 typedef struct MPID_nem_cell_rel_ptr
 {
     char *p;
@@ -180,7 +181,9 @@
 typedef struct MPID_nem_cell
 {
     MPID_nem_cell_rel_ptr_t next;
+#if MPID_NEM_CELL_HEAD_LEN != SIZEOF_VOID_P
     char padding[MPID_NEM_CELL_HEAD_LEN - sizeof(MPID_nem_cell_rel_ptr_t)];
+#endif
     MPID_nem_pkt_t pkt;
 } MPID_nem_cell_t;
 typedef volatile MPID_nem_cell_t *MPID_nem_cell_ptr_t;
@@ -188,7 +191,9 @@
 typedef struct MPID_nem_abs_cell
 {
     struct MPID_nem_abs_cell *next;
+#if MPID_NEM_CELL_HEAD_LEN != SIZEOF_VOID_P
     char padding[MPID_NEM_CELL_HEAD_LEN - sizeof(struct MPID_nem_abs_cell*)];
+#endif
     volatile MPID_nem_pkt_t pkt;
 } MPID_nem_abs_cell_t;
 typedef MPID_nem_abs_cell_t *MPID_nem_abs_cell_ptr_t;
@@ -213,16 +218,22 @@
 {
     volatile MPID_nem_cell_rel_ptr_t head;
     volatile MPID_nem_cell_rel_ptr_t tail;
+#if MPID_NEM_CACHE_LINE_LEN != (2 * SIZEOF_VOID_P)
     char padding1[MPID_NEM_CACHE_LINE_LEN - 2 * sizeof(MPID_nem_cell_rel_ptr_t)];
+#endif
     MPID_nem_cell_rel_ptr_t my_head;
+#if MPID_NEM_CACHE_LINE_LEN != SIZEOF_VOID_P
     char padding2[MPID_NEM_CACHE_LINE_LEN - sizeof(MPID_nem_cell_rel_ptr_t)];
+#endif
 } MPID_nem_queue_t, *MPID_nem_queue_ptr_t;
 
 /* Fast Boxes*/ 
 typedef union
 {
     volatile int value;
+#if MPID_NEM_CACHE_LINE_LEN != 0
     char padding[MPID_NEM_CACHE_LINE_LEN];
+#endif
 }
 MPID_nem_opt_volint_t;
 
Index: src/mpid/ch3/channels/nemesis/nemesis/src/mpid_nem_init.c
===================================================================
--- src/mpid/ch3/channels/nemesis/nemesis/src/mpid_nem_init.c	(revision 3199)
+++ src/mpid/ch3/channels/nemesis/nemesis/src/mpid_nem_init.c	(working copy)
@@ -73,6 +73,12 @@
        loading. */
     MPIU_Assert(sizeof(MPIDI_CH3_nem_pkt_t) <= sizeof(MPIDI_CH3_PktGeneric_t));
 
+    /* The MPID_nem_cell_rel_ptr_t defined in mpid_nem_datatypes.h
+     * should only contain a pointer. Also, we don't support compilers
+     * which add random padding to the start of the structure. The
+     * below assert should blow up if any of these happens. */
+    MPIU_Assert(sizeof(MPID_nem_cell_rel_ptr_t) == SIZEOF_VOID_P);
+
     /* Make sure the cell structure looks like it should */
     MPIU_Assert(MPID_NEM_CELL_PAYLOAD_LEN + MPID_NEM_CELL_HEAD_LEN == sizeof(MPID_nem_cell_t));
     MPIU_Assert(sizeof(MPID_nem_cell_t) == sizeof(MPID_nem_abs_cell_t));
