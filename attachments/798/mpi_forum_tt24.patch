commit 7694ed9a4348df1ed9f4e2d59615ca8dde8fd395
Author: Dave Goodell <goodell@mcs.anl.gov>
Date:   Tue Aug 18 16:38:33 2009 -0500

    WIP Implement MPI_Reduce_local and MPI_Op_commutative (MPI-2.2 ticket #24).
    
    This commit implements the new MPI_Reduce_local and MPI_Op_commutative
    functions added in MPI-2.2.  It also includes C-binding tests for the
    new functions.
    
    This commit is still WIP because the following things are needed:
    - at least one Fortran test for the functions
    
    No reviewer.
---
 src/binding/cxx/buildiface     |   11 ++-
 src/binding/f77/buildiface     |    1 +
 src/binding/f90/buildiface     |    1 +
 src/include/mpi.h.in           |    6 ++
 src/mpi/coll/Makefile.sm       |    2 +-
 src/mpi/coll/op_commutative.c  |  108 ++++++++++++++++++++++++++
 src/mpi/coll/reduce_local.c    |  163 ++++++++++++++++++++++++++++++++++++++++
 src/mpi/errhan/errnames.txt    |    4 +
 src/mpi/errhan/errutil.c       |    3 +-
 test/mpi/coll/Makefile.sm      |    4 +
 test/mpi/coll/op_commutative.c |  105 ++++++++++++++++++++++++++
 test/mpi/coll/reduce_local.c   |   95 +++++++++++++++++++++++
 12 files changed, 498 insertions(+), 5 deletions(-)

diff --git a/src/binding/cxx/buildiface b/src/binding/cxx/buildiface
index b133a19..1a29d04 100755
--- a/src/binding/cxx/buildiface
+++ b/src/binding/cxx/buildiface
@@ -464,7 +464,10 @@ $specialReturnType{"intra-Dup"} = "Intracomm";
 		    'Accept' => 'MPI_Comm',
 		     'Connect' => 'MPI_Comm',
 		     );
-%class_mpi2op = ();
+%class_mpi2op = (
+                 'Is_commutative' => '2;bool',
+                 'Reduce_local'   => '0',
+                );
 %class_mpi2preq = ();
 %class_mpi2req = ();
 # Start requires C++ to C function interposers (like errhandlers)
@@ -827,7 +830,7 @@ if ( -s "../../mpi/romio/include/mpio.h.in" ) {
 # The friends are the full class names
 %class_friends = ( 'comm' => 'Cartcomm,Intercomm,Intracomm,Graphcomm,Nullcomm,Datatype,Win,File',
 		   'cart' => '',
-		   'dtype' => 'Comm,Status,Intracomm,Intercomm,Win,File',
+		   'dtype' => 'Comm,Status,Intracomm,Intercomm,Win,File,Op',
 		   'errh' => 'Comm,File,Win',
 		   'graph' => '',
 		   'group' => 'Comm,Intracomm,Intercomm,Win,File',
@@ -966,6 +969,8 @@ if ( -s "../../mpi/romio/include/mpio.h.in" ) {
 	     'graph-Get_neighbors_count' => 'Graph_neighbors_count',
 	     'graph-Get_dims' => 'Graphdims_get',
 	     'graph-Dup' => 'Comm_dup',
+             'op-Is_commutative' => 'Op_commutative',
+             'op-Reduce_local' => 'Reduce_local',
 	     );
 
 # These routines must be defered because their implementations need 
@@ -2917,7 +2922,7 @@ sub PrintClassHead {
 	}
     }
     if ($lcclass eq $lctopclass) {
-	print $OUTFD "\		
+	print $OUTFD "\
   protected:
     $mpi_type the_real_$lcclass;\n";
 	# Check for special declarations
diff --git a/src/binding/f77/buildiface b/src/binding/f77/buildiface
index 47dcdf7..081f6d9 100755
--- a/src/binding/f77/buildiface
+++ b/src/binding/f77/buildiface
@@ -549,6 +549,7 @@ foreach $_ (@ARGV) {
     'Register_datarep' => '1:2:3', 'Register_datarep-1' => 'in:addnull',
 		  'Register_datarep-2' => 'in:checkdatarep',
 		  'Register_datarep-3' => 'in:checkdatarep',
+    'Op_commutative' => '2', 'Op_commutative-2' => 'out:logical',
     );
 
 # 
diff --git a/src/binding/f90/buildiface b/src/binding/f90/buildiface
index 6a7a5ea..836d268 100755
--- a/src/binding/f90/buildiface
+++ b/src/binding/f90/buildiface
@@ -165,6 +165,7 @@ $gDebug = 0;
 		  'Win_test-2' => 'bool',
 		  'Type_create_hindexed-2' => 'int[]',
 		  'Type_create_hindexed-3' => 'MPI_Aint[]',
+		  'Op_commutative-2' => 'bool',
 		);
 
 # Some routines must be skipped (custom code is provided for them)
diff --git a/src/include/mpi.h.in b/src/include/mpi.h.in
index cce1272..59bc1da 100644
--- a/src/include/mpi.h.in
+++ b/src/include/mpi.h.in
@@ -860,6 +860,10 @@ int MPI_Type_create_f90_integer( int, MPI_Datatype * );
 int MPI_Type_create_f90_real( int, int, MPI_Datatype * );
 int MPI_Type_create_f90_complex( int, int, MPI_Datatype * );
 
+/* MPI-2.2 functions */
+int MPI_Reduce_local(void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype, MPI_Op op);
+int MPI_Op_commutative(MPI_Op op, int *commute);
+
 /* End Prototypes */
 #endif /* MPICH_SUPPRESS_PROTOTYPES */
 
@@ -1138,6 +1142,8 @@ int PMPI_Unpack_external(char *, void *, MPI_Aint, MPI_Aint *, void *, int,
 int PMPI_Win_create_errhandler(MPI_Win_errhandler_function *, MPI_Errhandler *);
 int PMPI_Win_get_errhandler(MPI_Win, MPI_Errhandler *);
 int PMPI_Win_set_errhandler(MPI_Win, MPI_Errhandler);
+int PMPI_Reduce_local(void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype, MPI_Op op);
+int PMPI_Op_commutative(MPI_Op op, int *commute);
 #endif  /* MPI_BUILD_PROFILING */
 /* End of MPI bindings */
 
diff --git a/src/mpi/coll/Makefile.sm b/src/mpi/coll/Makefile.sm
index 2ba42b2..f918372 100644
--- a/src/mpi/coll/Makefile.sm
+++ b/src/mpi/coll/Makefile.sm
@@ -4,7 +4,7 @@
 mpi_sources = allreduce.c barrier.c op_create.c op_free.c \
  bcast.c alltoall.c alltoallv.c reduce.c scatter.c \
  gather.c scatterv.c gatherv.c scan.c exscan.c allgather.c allgatherv.c \
- red_scat.c alltoallw.c 
+ red_scat.c alltoallw.c reduce_local.c op_commutative.c
 
 lib${MPILIBNAME}_a_SOURCES = $(mpi_sources) \
  helper_fns.c opsum.c opmax.c opmin.c opband.c opbor.c opbxor.c \
diff --git a/src/mpi/coll/op_commutative.c b/src/mpi/coll/op_commutative.c
new file mode 100644
index 0000000..f8e7844
--- /dev/null
+++ b/src/mpi/coll/op_commutative.c
@@ -0,0 +1,108 @@
+/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*- */
+/*
+ *
+ *  (C) 2009 by Argonne National Laboratory.
+ *      See COPYRIGHT in top-level directory.
+ */
+
+#include "mpiimpl.h"
+
+/* -- Begin Profiling Symbol Block for routine MPI_Op_commutative */
+#if defined(HAVE_PRAGMA_WEAK)
+#pragma weak MPI_Op_commutative = PMPI_Op_commutative
+#elif defined(HAVE_PRAGMA_HP_SEC_DEF)
+#pragma _HP_SECONDARY_DEF PMPI_Op_commutative  MPI_Op_commutative
+#elif defined(HAVE_PRAGMA_CRI_DUP)
+#pragma _CRI duplicate MPI_Op_commutative as PMPI_Op_commutative
+#endif
+/* -- End Profiling Symbol Block */
+
+/* Define MPICH_MPI_FROM_PMPI if weak symbols are not supported to build
+   the MPI routines */
+#ifndef MPICH_MPI_FROM_PMPI
+#undef MPI_Op_commutative
+#define MPI_Op_commutative PMPI_Op_commutative
+
+#endif
+
+/*@
+  MPI_Op_commute - Queries an MPI reduction operation for its commutativity.
+
+  Input Parameter:
+. op - operation (handle)
+
+  Output Parameter:
+. commute - Flag is true if 'op' is a commutative operation. (logical)
+
+.N NULL
+
+.N ThreadSafe
+
+.N Fortran
+
+.N Errors
+.N MPI_SUCCESS
+.N MPI_ERR_ARG
+
+.seealso: MPI_Op_create
+@*/
+#undef FUNCNAME
+#define FUNCNAME MPI_Op_commutative
+#undef FCNAME
+#define FCNAME MPIU_QUOTE(FUNCNAME)
+int MPI_Op_commutative(MPI_Op op, int *commute)
+{
+    MPID_Op *op_ptr = NULL;
+    int mpi_errno = MPI_SUCCESS;
+    MPID_MPI_STATE_DECL(MPID_STATE_MPI_OP_COMMUTATIVE);
+
+    MPIR_ERRTEST_INITIALIZED_ORDIE();
+
+    MPIU_THREAD_CS_ENTER(ALLFUNC,);
+    MPID_MPI_FUNC_ENTER(MPID_STATE_MPI_OP_COMMUTATIVE);
+
+    MPID_Op_get_ptr( op, op_ptr );
+
+#   ifdef HAVE_ERROR_CHECKING
+    {
+        MPID_BEGIN_ERROR_CHECKS;
+        {
+            MPID_Op_valid_ptr( op_ptr, mpi_errno );
+            if (mpi_errno) MPIU_ERR_POP(mpi_errno);
+        }
+        MPID_END_ERROR_CHECKS;
+    }
+#   endif /* HAVE_ERROR_CHECKING */
+
+    /* ... body of routine ...  */
+
+    if (HANDLE_GET_KIND(op) == HANDLE_KIND_BUILTIN) {
+        *commute = 1;
+        /* get the function by indexing into the op table */
+    }
+    else {
+        if (op_ptr->kind == MPID_OP_USER_NONCOMMUTE)
+            *commute = 0;
+        else
+            *commute = 1;
+    }
+
+    /* ... end of body of routine ... */
+
+fn_exit:
+    MPID_MPI_FUNC_EXIT(MPID_STATE_MPI_OP_COMMUTATIVE);
+    return mpi_errno;
+fn_fail:
+    /* --BEGIN ERROR HANDLING-- */
+#   ifdef HAVE_ERROR_CHECKING
+    {
+        mpi_errno = MPIR_Err_create_code(
+            mpi_errno, MPIR_ERR_RECOVERABLE, FCNAME, __LINE__, MPI_ERR_OTHER, "**mpi_op_commutative",
+            "**mpi_op_commutative %O %p", op, commute);
+    }
+#   endif
+    mpi_errno = MPIR_Err_return_comm( NULL, FCNAME, mpi_errno );
+    goto fn_exit;
+    /* --END ERROR HANDLING-- */
+}
+
diff --git a/src/mpi/coll/reduce_local.c b/src/mpi/coll/reduce_local.c
new file mode 100644
index 0000000..73be73f
--- /dev/null
+++ b/src/mpi/coll/reduce_local.c
@@ -0,0 +1,163 @@
+/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*- */
+/*
+ *
+ *  (C) 2009 by Argonne National Laboratory.
+ *      See COPYRIGHT in top-level directory.
+ */
+
+#include "mpiimpl.h"
+
+/* -- Begin Profiling Symbol Block for routine MPI_Reduce_local */
+#if defined(HAVE_PRAGMA_WEAK)
+#pragma weak MPI_Reduce_local = PMPI_Reduce_local
+#elif defined(HAVE_PRAGMA_HP_SEC_DEF)
+#pragma _HP_SECONDARY_DEF PMPI_Reduce_local  MPI_Reduce_local
+#elif defined(HAVE_PRAGMA_CRI_DUP)
+#pragma _CRI duplicate MPI_Reduce_local as PMPI_Reduce_local
+#endif
+/* -- End Profiling Symbol Block */
+
+/* Define MPICH_MPI_FROM_PMPI if weak symbols are not supported to build
+   the MPI routines */
+#ifndef MPICH_MPI_FROM_PMPI
+#undef MPI_Reduce_local
+#define MPI_Reduce_local PMPI_Reduce_local
+/* any utility functions should go here, usually prefixed with PMPI_LOCAL to
+ * correctly handle weak symbols and the profiling interface */
+#endif
+
+/*@
+
+MPI_Reduce_local - Applies a reduction operator to local arguments.
+
+Input Parameters:
++ inbuf - address of the input buffer (choice)
+. count - number of elements in each buffer (integer)
+. datatype - data type of elements in the buffers (handle)
+- op - reduction operation (handle)
+
+Output Parameter:
+. inoutbuf - address of input-output buffer (choice)
+
+.N ThreadSafe
+
+.N Fortran
+
+.N collops
+
+.N Errors
+.N MPI_SUCCESS
+.N MPI_ERR_COUNT
+.N MPI_ERR_TYPE
+.N MPI_ERR_BUFFER
+.N MPI_ERR_BUFFER_ALIAS
+
+@*/
+#undef FUNCNAME
+#define FUNCNAME MPI_Reduce_local
+#undef FCNAME
+#define FCNAME MPIU_QUOTE(FUNCNAME)
+int MPI_Reduce_local(void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype, MPI_Op op)
+{
+    int mpi_errno = MPI_SUCCESS;
+    MPI_User_function *uop;
+    MPID_Op *op_ptr;
+#ifdef HAVE_CXX_BINDING
+    int is_cxx_uop = 0;
+#endif
+    MPIU_THREADPRIV_DECL;
+    MPID_MPI_STATE_DECL(MPID_STATE_MPI_REDUCE_LOCAL);
+
+    MPIR_ERRTEST_INITIALIZED_ORDIE();
+
+    MPIU_THREAD_CS_ENTER(ALLFUNC,);
+    MPID_MPI_COLL_FUNC_ENTER(MPID_STATE_MPI_REDUCE_LOCAL);
+
+    /* Validate parameters */
+#   ifdef HAVE_ERROR_CHECKING
+    {
+        MPID_BEGIN_ERROR_CHECKS;
+        {
+            MPIR_ERRTEST_OP(op, mpi_errno);
+            if (mpi_errno) MPIU_ERR_POP(mpi_errno);
+
+            if (HANDLE_GET_KIND(op) != HANDLE_KIND_BUILTIN) {
+                MPID_Op_get_ptr(op, op_ptr);
+                MPID_Op_valid_ptr( op_ptr, mpi_errno );
+            }
+            if (HANDLE_GET_KIND(op) == HANDLE_KIND_BUILTIN) {
+                mpi_errno = (*MPIR_Op_check_dtype_table[op%16 - 1])(datatype);
+            }
+            if (count != 0) {
+                MPIR_ERRTEST_ALIAS_COLL(inbuf, inoutbuf, mpi_errno);
+            }
+            if (mpi_errno != MPI_SUCCESS) goto fn_fail;
+        }
+        MPID_END_ERROR_CHECKS;
+    }
+#   endif /* HAVE_ERROR_CHECKING */
+
+
+    /* ... body of routine ...  */
+
+    if (count == 0) goto fn_exit;
+
+    MPIU_THREADPRIV_GET;
+    MPIU_THREADPRIV_FIELD(op_errno) = MPI_SUCCESS;
+
+    if (HANDLE_GET_KIND(op) == HANDLE_KIND_BUILTIN) {
+        /* get the function by indexing into the op table */
+        uop = MPIR_Op_table[op%16 - 1];
+    }
+    else {
+        MPID_Op_get_ptr(op, op_ptr);
+
+#ifdef HAVE_CXX_BINDING
+        if (op_ptr->language == MPID_LANG_CXX) {
+            uop = (MPI_User_function *) op_ptr->function.c_function;
+            is_cxx_uop = 1;
+        }
+        else
+#endif
+        {
+            if ((op_ptr->language == MPID_LANG_C))
+                uop = (MPI_User_function *) op_ptr->function.c_function;
+            else
+                uop = (MPI_User_function *) op_ptr->function.f77_function;
+        }
+    }
+
+    /* actually perform the reduction */
+#ifdef HAVE_CXX_BINDING
+    if (is_cxx_uop) {
+        (*MPIR_Process.cxx_call_op_fn)(inbuf, inoutbuf, count, datatype, uop);
+    }
+    else
+#endif
+    {
+        (*uop)(inbuf, inoutbuf, &count, &datatype);
+    }
+    /* ... end of body of routine ... */
+
+  fn_exit:
+    if (MPIU_THREADPRIV_FIELD(op_errno))
+        mpi_errno = MPIU_THREADPRIV_FIELD(op_errno);
+
+    MPID_MPI_COLL_FUNC_EXIT(MPID_STATE_MPI_REDUCE_LOCAL);
+    MPIU_THREAD_CS_EXIT(ALLFUNC,);
+    return mpi_errno;
+
+  fn_fail:
+    /* --BEGIN ERROR HANDLING-- */
+#   ifdef HAVE_ERROR_CHECKING
+    {
+        mpi_errno = MPIR_Err_create_code(
+            mpi_errno, MPIR_ERR_RECOVERABLE, FCNAME, __LINE__, MPI_ERR_OTHER, "**mpi_reduce_local",
+            "**mpi_reduce_local %p %p %d %D %O", inbuf, inoutbuf, count, datatype, op);
+    }
+#   endif
+    mpi_errno = MPIR_Err_return_comm( NULL, FCNAME, mpi_errno );
+    goto fn_exit;
+    /* --END ERROR HANDLING-- */
+}
+
diff --git a/src/mpi/errhan/errnames.txt b/src/mpi/errhan/errnames.txt
index 222b494..1d50e1c 100644
--- a/src/mpi/errhan/errnames.txt
+++ b/src/mpi/errhan/errnames.txt
@@ -932,10 +932,14 @@ is too big (> MPIU_SHMW_GHND_SZ)
 **mpi_op_create %p %d %p:MPI_Op_create(fn=%p, commute=%d, op=%p) failed
 **mpi_op_free:MPI_Op_free failed
 **mpi_op_free %p:MPI_Op_free(op=%p) failed
+**mpi_op_commutative:MPI_Op_commutative failed
+**mpi_op_commutative %O %p:MPI_Op_commutative(op=%O, commute=%p) failed
 **mpi_allreduce:MPI_Allreduce failed
 **mpi_allreduce %p %p %d %D %O %C:MPI_Allreduce(sbuf=%p, rbuf=%p, count=%d, %D, %O, %C) failed
 **mpi_reduce_scatter:MPI_Reduce_scatter failed
 **mpi_reduce_scatter %p %p %p %D %O %C:MPI_Reduce_scatter(sbuf=%p, rbuf=%p, rcnts=%p, %D, %O, %C) failed
+**mpi_reduce_local:MPI_Reduce_local failed
+**mpi_reduce_local %p %p %d %D %O:MPI_Reduce_local(inbuf=%p, inoutbuf=%p, count=%d, %D, %O) failed
 **mpi_scan:MPI_Scan failed
 **mpi_scan %p %p %d %D %O %C:MPI_Scan(sbuf=%p, rbuf=%p, count=%d, %D, %O, %C) failed
 **mpi_group_size:MPI_Group_size failed
diff --git a/src/mpi/errhan/errutil.c b/src/mpi/errhan/errutil.c
index 8ba8ad0..d608ccc 100644
--- a/src/mpi/errhan/errutil.c
+++ b/src/mpi/errhan/errutil.c
@@ -233,7 +233,8 @@ int MPIR_Err_is_fatal(int errcode)
 
 /*
  * This is the routine that is invoked by most MPI routines to 
- * report an error 
+ * report an error.  It is legitimate to pass NULL for comm_ptr in order to get
+ * the default (MPI_COMM_WORLD) error handling.
  */
 int MPIR_Err_return_comm( MPID_Comm  *comm_ptr, const char fcname[], 
 			  int errcode )
diff --git a/test/mpi/coll/Makefile.sm b/test/mpi/coll/Makefile.sm
index 0cee188..0f8d79b 100644
--- a/test/mpi/coll/Makefile.sm
+++ b/test/mpi/coll/Makefile.sm
@@ -24,6 +24,8 @@ red4_SOURCES = red4.c
 red4_LDADD = ../util/mtest.o
 reduce_SOURCES = reduce.c
 reduce_LDADD = ../util/mtest.o
+reduce_local_SOURCES = reduce_local.c
+reduce_local_LDADD = ../util/mtest.o
 coll8_SOURCES = coll8.c
 coll13_SOURCES = coll13.c
 alltoallv_SOURCES = alltoallv.c
@@ -123,6 +125,8 @@ opmaxloc_SOURCES = opmaxloc.c
 opmaxloc_LDADD = ../util/mtest.o
 opprod_SOURCES = opprod.c
 opprod_LDADD = ../util/mtest.o
+op_commutative_SOURCES = op_commutative.c
+op_commutative_LDADD = ../util/mtest.o
 exscan_SOURCES = exscan.c
 exscan_LDADD = ../util/mtest.o
 exscan2_SOURCES = exscan2.c
diff --git a/test/mpi/coll/op_commutative.c b/test/mpi/coll/op_commutative.c
new file mode 100644
index 0000000..116835e
--- /dev/null
+++ b/test/mpi/coll/op_commutative.c
@@ -0,0 +1,105 @@
+/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*- */
+/*
+ *
+ *  (C) 2009 by Argonne National Laboratory.
+ *      See COPYRIGHT in top-level directory.
+ */
+#include "mpi.h"
+#include <stdio.h>
+#include <stdlib.h>
+#include "mpitest.h"
+
+static char MTEST_Descrip[] = "A simple test of MPI_Op_create/commute/free";
+
+/* prototype to keep the compiler happy */
+static void comm_user_op(void *invec, void *inoutvec, int *len, MPI_Datatype *datatype);
+static void noncomm_user_op(void *invec, void *inoutvec, int *len, MPI_Datatype *datatype);
+static void user_op(void *invec, void *inoutvec, int *len, MPI_Datatype *datatype);
+
+static void comm_user_op(void *invec, void *inoutvec, int *len, MPI_Datatype *datatype)
+{
+    user_op(invec, inoutvec, len, datatype);
+}
+
+static void noncomm_user_op(void *invec, void *inoutvec, int *len, MPI_Datatype *datatype)
+{
+    user_op(invec, inoutvec, len, datatype);
+}
+
+static void user_op(void *invec, void *inoutvec, int *len, MPI_Datatype *datatype)
+{
+    int i;
+    int *invec_int = (int *)invec;
+    int *inoutvec_int = (int *)inoutvec;
+
+    if (*datatype != MPI_INT) {
+        ++uop_errs;
+        printf("invalid datatype passed to user_op");
+        return;
+    }
+
+    for (i = 0; i < *len; ++i) {
+        inoutvec_int[i] = invec_int[i] * 2 + inoutvec_int[i];
+    }
+}
+
+
+int main( int argc, char *argv[] )
+{
+    int errs = 0;
+    MPI_Op c_uop = MPI_OP_NULL;
+    MPI_Op nc_uop = MPI_OP_NULL;
+    int is_commutative = 0;
+
+    MTest_Init(&argc, &argv);
+
+    /* make sure that user-define ops work too */
+    MPI_Op_create(&user_op, 1/*commute*/,  &c_uop);
+    MPI_Op_create(&user_op, 0/*!commute*/, &nc_uop);
+
+#if MTEST_HAVE_MIN_MPI_VERSION(2,2)
+    /* this function was added in MPI-2.2 */
+
+#define CHECK_COMMUTATIVE(op_)                     \
+    do {                                           \
+        MPI_Op_commutative(MPI_, &is_commutative); \
+        if (!is_commutative) { ++errs; }           \
+    } while (0)
+
+    /* Check all predefined reduction operations for commutivity.
+     * This list is from section 5.9.2 of the MPI-2.1 standard */
+    CHECK_COMMUTATIVE(MPI_MAX);
+    CHECK_COMMUTATIVE(MPI_MIN);
+    CHECK_COMMUTATIVE(MPI_SUM);
+    CHECK_COMMUTATIVE(MPI_PROD);
+    CHECK_COMMUTATIVE(MPI_LAND);
+    CHECK_COMMUTATIVE(MPI_BAND);
+    CHECK_COMMUTATIVE(MPI_LOR);
+    CHECK_COMMUTATIVE(MPI_BOR);
+    CHECK_COMMUTATIVE(MPI_LXOR);
+    CHECK_COMMUTATIVE(MPI_BXOR);
+    CHECK_COMMUTATIVE(MPI_MAXLOC);
+    CHECK_COMMUTATIVE(MPI_MINLOC);
+
+#undef CHECK_COMMUTATIVE
+
+    MPI_Op_commutative(c_uop, &is_commutative);
+    if (!is_commutative) {
+        ++errs;
+    }
+
+    /* also check our non-commutative user defined operation */
+    MPI_Op_commutative(nc_uop, &is_commutative);
+    if (is_commutative) {
+        ++errs;
+    }
+#endif
+
+    MPI_Op_free(&nc_uop);
+    MPI_Op_free(&c_uop);
+
+    MTest_Finalize(errs);
+    MPI_Finalize();
+    return 0;
+}
+
diff --git a/test/mpi/coll/reduce_local.c b/test/mpi/coll/reduce_local.c
new file mode 100644
index 0000000..057bc69
--- /dev/null
+++ b/test/mpi/coll/reduce_local.c
@@ -0,0 +1,95 @@
+/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*- */
+/*
+ *
+ *  (C) 2009 by Argonne National Laboratory.
+ *      See COPYRIGHT in top-level directory.
+ */
+#include "mpi.h"
+#include <stdio.h>
+#include <stdlib.h>
+#include "mpitest.h"
+
+static char MTEST_Descrip[] = "A simple test of MPI_Reduce_local";
+
+#define MAX_BUF_ELEMENTS (65000)
+
+static int uop_errs = 0;
+
+/* prototype to keep the compiler happy */
+static void user_op(void *invec, void *inoutvec, int *len, MPI_Datatype *datatype);
+
+static void user_op(void *invec, void *inoutvec, int *len, MPI_Datatype *datatype)
+{
+    int i;
+    int *invec_int = (int *)invec;
+    int *inoutvec_int = (int *)inoutvec;
+
+    if (*datatype != MPI_INT) {
+        ++uop_errs;
+        printf("invalid datatype passed to user_op");
+        return;
+    }
+
+    for (i = 0; i < *len; ++i) {
+        inoutvec_int[i] = invec_int[i] * 2 + inoutvec_int[i];
+    }
+}
+
+int main( int argc, char *argv[] )
+{
+    int errs = 0;
+    int i;
+    int *inbuf = NULL;
+    int *inoutbuf = NULL;
+    int count = -1;
+    MPI_Op uop = MPI_OP_NULL;
+
+    MTest_Init(&argc, &argv);
+#if MTEST_HAVE_MIN_MPI_VERSION(2,2)
+    /* this function was added in MPI-2.2 */
+
+    inbuf = malloc(sizeof(int) * MAX_BUF_ELEMENTS);
+    inoutbuf = malloc(sizeof(int) * MAX_BUF_ELEMENTS);
+
+
+    for (count = 0; count < MAX_BUF_ELEMENTS; count *= 2) {
+        for (i = 0; i < count; ++i) {
+            inbuf = i;
+            inoutbuf[i] = i;
+        }
+        MPI_Reduce_local(inbuf, inoutbuf, count, MPI_INT, MPI_OP_SUM);
+        for (i = 0; i < count; ++i)
+            if (inbuf[i] != i) {
+                ++errs;
+            if (inoutbuf[i] != (2*i))
+                ++errs;
+        }
+    }
+
+    /* make sure that user-define ops work too */
+    MPI_Op_create(&user_op, 0/*!commute*/, &uop);
+    for (count = 0; count < MAX_BUF_ELEMENTS; count *= 2) {
+        for (i = 0; i < count; ++i) {
+            inbuf = i;
+            inoutbuf[i] = i;
+        }
+        MPI_Reduce_local(inbuf, inoutbuf, count, MPI_INT, uop);
+        errs += uop_errs;
+        for (i = 0; i < count; ++i)
+            if (inbuf[i] != i) {
+                ++errs;
+            if (inoutbuf[i] != (3*i))
+                ++errs;
+        }
+    }
+    MPI_Op_free(&user_op);
+
+    free(inbuf);
+    free(inoutbuf);
+#endif
+
+    MTest_Finalize(errs);
+    MPI_Finalize();
+    return 0;
+}
+
