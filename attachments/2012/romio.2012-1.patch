From eaef2bd1da381369defe60792dfcf641be1e5ab6 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles.gouaillardet@iferc.org>
Date: Thu, 30 Jan 2014 17:02:54 +0900
Subject: [PATCH] Add wrap retry logic into romio/adio/ad_lustre. Fixes #2012

Since [p](read|write) can return with less data than requested,
some wrap retry logic has been added in ad_lustre.
For example, in my test environment, a 4GB write requires
3 calls to write ( write returns ~2GB, ~2GB and 8kB).
read/write were replaced with pread/pwrite for thread safety.
"short" pread/pwrite are not wrapped yet and additional patches
may follow.
---
 src/mpi/romio/adio/ad_lustre/ad_lustre_rwcontig.c |  109 ++++++++++++++-------
 1 files changed, 73 insertions(+), 36 deletions(-)

diff --git a/src/mpi/romio/adio/ad_lustre/ad_lustre_rwcontig.c b/src/mpi/romio/adio/ad_lustre/ad_lustre_rwcontig.c
index 3dfdb48..e6bf03c 100644
--- a/src/mpi/romio/adio/ad_lustre/ad_lustre_rwcontig.c
+++ b/src/mpi/romio/adio/ad_lustre/ad_lustre_rwcontig.c
@@ -14,10 +14,10 @@
 
 #define LUSTRE_MEMALIGN (1<<12)  /* to use page_shift */
 
-static void ADIOI_LUSTRE_Aligned_Mem_File_Write(ADIO_File fd, const void *buf, int len,
-              ADIO_Offset offset, int *err);
-static void ADIOI_LUSTRE_Aligned_Mem_File_Write(ADIO_File fd, const void *buf, int len,
-              ADIO_Offset offset, int *err)
+static void ADIOI_LUSTRE_Aligned_Mem_File_Write(ADIO_File fd, const void *buf, MPI_Count len,
+              ADIO_Offset offset, ssize_t *err);
+static void ADIOI_LUSTRE_Aligned_Mem_File_Write(ADIO_File fd, const void *buf, MPI_Count len,
+              ADIO_Offset offset, ssize_t *err)
 {
     int rem, size, nbytes;
     if (!(len % fd->d_miniosz) && (len >= fd->d_miniosz)) {
@@ -27,18 +27,22 @@ static void ADIOI_LUSTRE_Aligned_Mem_File_Write(ADIO_File fd, const void *buf, i
     } else {
 	rem = len % fd->d_miniosz;
 	size = len - rem;
-	nbytes = pwrite(fd->fd_direct, buf, size, offset);
-	nbytes += pwrite(fd->fd_sys, ((char *)buf) + size, rem, offset+size);
-	*err = nbytes;
+	*err = pwrite(fd->fd_direct, buf, size, offset);
+        if (*err == -1) return;
+        nbytes = *err;
+	*err = pwrite(fd->fd_sys, ((char *)buf) + size, rem, offset+size);
+        if (*err == -1) return;
+	*err += nbytes;
     }
 }
 
-static void ADIOI_LUSTRE_Aligned_Mem_File_Read(ADIO_File fd, const void *buf, int len,
-              ADIO_Offset offset, int *err);
-static void ADIOI_LUSTRE_Aligned_Mem_File_Read(ADIO_File fd, const void *buf, int len,
-              ADIO_Offset offset, int *err)
+static void ADIOI_LUSTRE_Aligned_Mem_File_Read(ADIO_File fd, const void *buf, MPI_Count len,
+              ADIO_Offset offset, ssize_t *err);
+static void ADIOI_LUSTRE_Aligned_Mem_File_Read(ADIO_File fd, const void *buf, MPI_Count len,
+              ADIO_Offset offset, ssize_t *err)
 {
-    int rem, size, nbytes;
+    MPI_Count rem, size;
+    ssize_t nbytes;
     if (!(len % fd->d_miniosz) && (len >= fd->d_miniosz))
 	*err = pread(fd->fd_direct, (void *)buf, len, offset);
     else if (len < fd->d_miniosz)
@@ -46,19 +50,22 @@ static void ADIOI_LUSTRE_Aligned_Mem_File_Read(ADIO_File fd, const void *buf, in
     else {
 	rem = len % fd->d_miniosz;
 	size = len - rem;
-	nbytes = pread(fd->fd_direct, (void *)buf, size, offset);
-	nbytes += pread(fd->fd_sys, ((char *)buf) + size, rem, offset+size);
-	*err = nbytes;
+	*err = pread(fd->fd_direct, (void *)buf, size, offset);
+        if (*err == -1) return;
+        nbytes = *err;
+	*err = pread(fd->fd_sys, ((char *)buf) + size, rem, offset+size);
+        if (*err == -1) return;
+	*err += nbytes;
     }
 }
 
-
-static int ADIOI_LUSTRE_Directio(ADIO_File fd, const void *buf, int len,
+static ssize_t ADIOI_LUSTRE_Directio(ADIO_File fd, const void *buf, MPI_Count len,
 			   off_t offset, int rw);
-static int ADIOI_LUSTRE_Directio(ADIO_File fd, const void *buf, int len,
+static ssize_t ADIOI_LUSTRE_Directio(ADIO_File fd, const void *buf, MPI_Count len,
 			   off_t offset, int rw)
 {
-    int err=-1, diff, size=len, nbytes = 0;
+    ssize_t err=-1, diff, nbytes = 0;
+    MPI_Count size=len;
     void *newbuf;
 
     if (offset % fd->d_miniosz) {
@@ -68,47 +75,58 @@ static int ADIOI_LUSTRE_Directio(ADIO_File fd, const void *buf, int len,
 	    nbytes = pwrite(fd->fd_sys, (void *)buf, diff, offset);
 	else
 	    nbytes = pread(fd->fd_sys, (void *)buf, diff, offset);
+        if (nbytes == -1) return -1;
 	buf = ((char *) buf) + diff;
 	offset += diff;
 	size = len - diff;
     }
 
     if (!size) {
-	return diff;
+	return nbytes;
     }
 
     if (rw) { /* direct I/O enabled */
 	if (!(((long) buf) % fd->d_mem)) {
 	    ADIOI_LUSTRE_Aligned_Mem_File_Write(fd, buf, size, offset, &err);
+            if (err == -1) return -1;
 	    nbytes += err;
 	} else {
 	    newbuf = (void *) memalign(LUSTRE_MEMALIGN, size);
 	    if (newbuf) {
 		memcpy(newbuf, buf, size);
 		ADIOI_LUSTRE_Aligned_Mem_File_Write(fd, newbuf, size, offset, &err);
+                if (err == -1) return -1;
 		nbytes += err;
 		ADIOI_Free(newbuf);
 	    }
-	    else nbytes += pwrite(fd->fd_sys, buf, size, offset);
+	    else {
+                err = pwrite(fd->fd_sys, buf, size, offset);
+                if (err == -1) return -1;
+                nbytes += err;
+            }
 	}
-	err = nbytes;
     } else {       
 	if (!(((long) buf) % fd->d_mem)) {
 	    ADIOI_LUSTRE_Aligned_Mem_File_Read(fd, buf, size, offset, &err);
+            if (err == -1) return -1;
 	    nbytes += err;
 	} else {
 	    newbuf = (void *) memalign(LUSTRE_MEMALIGN, size);
 	    if (newbuf) {
 		ADIOI_LUSTRE_Aligned_Mem_File_Read(fd, newbuf, size, offset, &err);
+                if (err == -1) return -1;
 		if (err > 0) memcpy((void *)buf, newbuf, err);
 		nbytes += err;
 		ADIOI_Free(newbuf);
 	    }
-	    else nbytes += pread(fd->fd_sys, (void *)buf, size, offset);
+	    else {
+                err = pread(fd->fd_sys, (void *)buf, size, offset);
+                if (err == -1) return -1;
+                nbytes += err;
+            }
 	}
-	err = nbytes;
     }
-    return err;
+    return nbytes;
 }
 
 static void ADIOI_LUSTRE_IOContig(ADIO_File fd, const void *buf, int count,
@@ -120,9 +138,12 @@ static void ADIOI_LUSTRE_IOContig(ADIO_File fd, const void *buf, int count,
 	           ADIO_Offset offset, ADIO_Status *status, 
 		   int io_mode, int *error_code)
 {
-    int err=-1;
+    ssize_t err=-1;
+    size_t rw_count;
+    ADIO_Offset bytes_xfered=0;
     MPI_Count datatype_size, len;
     static char myname[] = "ADIOI_LUSTRE_IOCONTIG";
+    char *p;
 
     MPI_Type_size_x(datatype, &datatype_size);
     len = datatype_size * count;
@@ -137,36 +158,52 @@ static void ADIOI_LUSTRE_IOContig(ADIO_File fd, const void *buf, int count,
 	    if (err == -1) goto ioerr;
 	}
 	
+        p = (char *)buf;
 	if (io_mode) {
+            while (bytes_xfered < len) {
 #ifdef ADIOI_MPE_LOGGING
-        MPE_Log_event(ADIOI_MPE_write_a, 0, NULL);
+                MPE_Log_event(ADIOI_MPE_write_a, 0, NULL);
 #endif
-	    err = write(fd->fd_sys, buf, len);
+                rw_count = len - bytes_xfered;
+	        err = pwrite(fd->fd_sys, p, rw_count, offset+bytes_xfered);
+                if (err == -1) goto ioerr;
 #ifdef ADIOI_MPE_LOGGING
-        MPE_Log_event(ADIOI_MPE_write_b, 0, NULL);
+                MPE_Log_event(ADIOI_MPE_write_b, 0, NULL);
 #endif
+                if (err == 0) break;
+                bytes_xfered += err;
+                p += err;
+            }
         } else {
+            while (bytes_xfered < len) {
 #ifdef ADIOI_MPE_LOGGING
-        MPE_Log_event(ADIOI_MPE_read_a, 0, NULL);
+                MPE_Log_event(ADIOI_MPE_read_a, 0, NULL);
 #endif
-	    err = read(fd->fd_sys, (void *)buf, len);
+                rw_count = len - bytes_xfered;
+	        err = pread(fd->fd_sys, p, rw_count, offset+bytes_xfered);
+                if (err == -1) goto ioerr;
 #ifdef ADIOI_MPE_LOGGING
-        MPE_Log_event(ADIOI_MPE_read_b, 0, NULL);
+                MPE_Log_event(ADIOI_MPE_read_b, 0, NULL);
 #endif
+                if (err == 0) break;
+                bytes_xfered += err;
+                p += err;
+            }
         }
     } else {
 	err = ADIOI_LUSTRE_Directio(fd, buf, len, offset, io_mode);
+        if (err == -1) goto ioerr;
+        bytes_xfered = err;
     }
 
-    if (err == -1) goto ioerr;
-    fd->fp_sys_posn = offset + err;
+    fd->fp_sys_posn = offset + bytes_xfered;
 
     if (file_ptr_type == ADIO_INDIVIDUAL) {
-	fd->fp_ind += err; 
+	fd->fp_ind += bytes_xfered;
     }
 
 #ifdef HAVE_STATUS_SET_BYTES
-    if (status) MPIR_Status_set_bytes(status, datatype, err);
+    if (status) MPIR_Status_set_bytes(status, datatype, bytes_xfered);
 #endif
     *error_code = MPI_SUCCESS;
 
-- 
1.7.1

