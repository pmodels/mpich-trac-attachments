From 2fe9feeeff88c1f5e89fbe0be314254ec4d104dd Mon Sep 17 00:00:00 2001
From: Charles Archer <archerc@us.ibm.com>
Date: Sun, 27 Jan 2013 22:07:24 -0500
Subject: [PATCH] D197509: Fortran module compatibility for 3rd party compilers

Signed-off-by: Charles Archer <archerc@us.ibm.com>
---
 src/binding/f77/setbot.c.in |   39 ++++++++++++++++++++++++++++++++++++++-
 1 files changed, 38 insertions(+), 1 deletions(-)

diff --git a/src/binding/f77/setbot.c.in b/src/binding/f77/setbot.c.in
index 2a8f2fc..370951b 100644
--- a/src/binding/f77/setbot.c.in
+++ b/src/binding/f77/setbot.c.in
@@ -8,6 +8,7 @@
 
 #ifdef FORTRAN_BACKWARD_BINCOMPAT 
 #include <dlfcn.h>
+#include <stdio.h>
 #endif
 
 #ifdef F77_NAME_UPPER
@@ -103,16 +104,20 @@ FORT_DLL_SPEC void FORT_CALL mpirinitc_( void *si, void *ssi,
      * gcc and Intel?
      */
     void *dlhandle = dlopen(NULL, RTLD_NOW);
+    int verbose    = 0;
+    if(getenv("MP_S_FORTRAN_COMMON_BLOCK"))
+        verbose=1;
     if(dlhandle)
     {
         void* priv1 = dlsym(dlhandle, "mpipriv1_");
         void* priv2 = dlsym(dlhandle, "mpipriv2_");
         void* privc = dlsym(dlhandle, "mpiprivc_");
+        if(verbose) fprintf(stdout, "priv1,2,c = %p %p %p\n", priv1, priv2, privc);
         if(priv1)
         {
             MPIR_F_MPI_BOTTOM     = priv1;
             MPIR_F_MPI_IN_PLACE   = (void*)      (char*)priv1 + 1*sizeof(int);
-            MPI_F_STATUS_IGNORE   = (MPI_Fint *) (char*)priv1 + 2*sizeof(int);                        
+            MPI_F_STATUS_IGNORE   = (MPI_Fint *) (char*)priv1 + 2*sizeof(int);
         }
         if(priv2)
         {
@@ -121,6 +126,38 @@ FORT_DLL_SPEC void FORT_CALL mpirinitc_( void *si, void *ssi,
         }
         if(privc)
             MPI_F_ARGVS_NULL      = privc;
+
+        if(priv1 == NULL)
+          {
+              void *mpifcmb1 = dlsym(dlhandle, "mpifcmb1_");
+              void *mpifcmb2 = dlsym(dlhandle, "mpifcmb2_");
+              void *mpifcmb3 = dlsym(dlhandle, "mpifcmb3_");
+              void *mpifcmb4 = dlsym(dlhandle, "mpifcmb4_");
+              void *mpifcmb5 = dlsym(dlhandle, "mpifcmb5_");
+              void *mpifcmb6 = dlsym(dlhandle, "mpifcmb6_");
+              void *mpifcmb7 = dlsym(dlhandle, "mpifcmb7_");
+              void *mpifcmb8 = dlsym(dlhandle, "mpifcmb8_");
+              if(verbose)fprintf(stdout, "mpifcmb = %p %p %p %p %p %p %p %p ip=%p\n",
+                                 mpifcmb1, mpifcmb2, mpifcmb3, mpifcmb4,
+                                 mpifcmb5, mpifcmb6, mpifcmb7, mpifcmb8,
+                                 MPIR_F_MPI_IN_PLACE);
+              if(verbose)fprintf(stdout, "before = %p %p %p %p %p %p %p\n",
+                                 (void*)MPI_F_STATUS_IGNORE, (void*)MPI_F_STATUSES_IGNORE,
+                                 (void*)MPIR_F_MPI_BOTTOM, (void*)MPIR_F_MPI_IN_PLACE,
+                                 (void*)MPIR_F_MPI_UNWEIGHTED, (void*)MPI_F_ERRCODES_IGNORE,
+                                 (void*)MPI_F_ARGVS_NULL);
+              if(mpifcmb1)
+                {
+                    MPI_F_STATUS_IGNORE   = (MPI_Fint*) mpifcmb1;
+                    MPI_F_STATUSES_IGNORE = (MPI_Fint*) mpifcmb2;
+                    MPIR_F_MPI_BOTTOM     = mpifcmb3;
+                    MPIR_F_MPI_IN_PLACE   = mpifcmb4;
+                    MPIR_F_MPI_UNWEIGHTED = mpifcmb5;
+                    MPI_F_ERRCODES_IGNORE = (int*)mpifcmb6;
+                    MPI_F_ARGVS_NULL      = (void*)mpifcmb7;
+
+                }
+          }
     }
 #endif
 }
-- 
1.7.1

