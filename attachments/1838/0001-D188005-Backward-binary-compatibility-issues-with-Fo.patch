From 2b81efbd33bb2c44d4dfe290f65d682e1d3195a6 Mon Sep 17 00:00:00 2001
From: Charles Archer <archerc@us.ibm.com>
Date: Sat, 5 Jan 2013 11:10:54 -0500
Subject: [PATCH] D188005: Backward binary compatibility issues with Fortran

If an executable is compiled against an older version of
MPICH2 ( <= 1.2), the MPI constants are stored in
common blocks priv1, priv2, and privc.
MPICH2 > 1.2 stores each constant in it's own common block
This implements backward binary compatibility by detecting
the older common block layouts and arranging the pointers
to the fortran constants:
1)  dlopen "self" and check for the old common blocks
2)  if found, doctor the pointers to point to the common
    blocks provided by the binary
    The old layout looks like this:
      COMMON /MPIPRIV1/ MPI_BOTTOM, MPI_IN_PLACE, MPI_STATUS_IGNORE
      COMMON /MPIPRIV2/ MPI_STATUSES_IGNORE, MPI_ERRCODES_IGNORE
      COMMON /MPIPRIVC/ MPI_ARGVS_NULL, MPI_ARGV_NULL
This block of code can be removed when Intel and IBM
are on the same release levels and Intel breaks backward
binary compatibility

Signed-off-by: Bob Cernohous <bobc@us.ibm.com>
---
 src/binding/f77/setbot.c.in |   47 +++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 47 insertions(+), 0 deletions(-)

diff --git a/src/binding/f77/setbot.c.in b/src/binding/f77/setbot.c.in
index 820b3f7..2a8f2fc 100644
--- a/src/binding/f77/setbot.c.in
+++ b/src/binding/f77/setbot.c.in
@@ -6,6 +6,9 @@
  */
 #include "mpi_fortimpl.h"
 
+#ifdef FORTRAN_BACKWARD_BINCOMPAT 
+#include <dlfcn.h>
+#endif
 
 #ifdef F77_NAME_UPPER
 #define mpirinitc_ MPIRINITC
@@ -76,6 +79,50 @@ FORT_DLL_SPEC void FORT_CALL mpirinitc_( void *si, void *ssi,
     MPIR_F_MPI_UNWEIGHTED = uw;
     MPI_F_ERRCODES_IGNORE = (MPI_Fint *)ecsi;
     MPI_F_ARGVS_NULL      = asn;
+#ifdef FORTRAN_BACKWARD_BINCOMPAT
+    /*
+     * If an executable is compiled against an older version of
+     * MPICH2 ( <= 1.2), the MPI constants are stored in
+     * common blocks priv1, priv2, and privc.
+     * MPICH2 > 1.2 stores each constant in it's own common block
+     * This implements backward binary compatibility by detecting
+     * the older common block layouts and arranging the pointers
+     * to the fortran constants:
+     * 1)  dlopen "self" and check for the old common blocks
+     * 2)  if found, doctor the pointers to point to the common
+     *     blocks provided by the binary
+     *     The old layout looks like this:
+     *       COMMON /MPIPRIV1/ MPI_BOTTOM, MPI_IN_PLACE, MPI_STATUS_IGNORE
+     *       COMMON /MPIPRIV2/ MPI_STATUSES_IGNORE, MPI_ERRCODES_IGNORE
+     *       COMMON /MPIPRIVC/ MPI_ARGVS_NULL, MPI_ARGV_NULL
+     * This block of code can be removed when Intel and IBM
+     * are on the same release levels and Intel breaks backward
+     * binary compatibility
+     * \todo:  Do we need to check for all the other aliased names
+     * for mpipriv1_ such as MPIPRIV1_, for other compilers besides
+     * gcc and Intel?
+     */
+    void *dlhandle = dlopen(NULL, RTLD_NOW);
+    if(dlhandle)
+    {
+        void* priv1 = dlsym(dlhandle, "mpipriv1_");
+        void* priv2 = dlsym(dlhandle, "mpipriv2_");
+        void* privc = dlsym(dlhandle, "mpiprivc_");
+        if(priv1)
+        {
+            MPIR_F_MPI_BOTTOM     = priv1;
+            MPIR_F_MPI_IN_PLACE   = (void*)      (char*)priv1 + 1*sizeof(int);
+            MPI_F_STATUS_IGNORE   = (MPI_Fint *) (char*)priv1 + 2*sizeof(int);                        
+        }
+        if(priv2)
+        {
+            MPI_F_STATUSES_IGNORE = (MPI_Fint *) priv2;
+            MPI_F_ERRCODES_IGNORE = (MPI_Fint *) (char*)priv2 + @MPI_STATUS_SIZE@ * sizeof(int);
+        }
+        if(privc)
+            MPI_F_ARGVS_NULL      = privc;
+    }
+#endif
 }
 /* Initialize the Fortran ARGV_NULL to a blank.  Using this routine
    avoids potential problems with string manipulation routines that
-- 
1.7.1

